//-------------------------------------------------------------------------- Lesson 1,2 (Install, config local server)
1) composer create-project laravel/laravel:^9.* example-app
2) use laragon in project , notUse Xampp
3) install laragon -> Download Laragon - Full (173 MB)
   Laragon Full (64-bit): Apache 2.4, Nginx, MySQL 8, PHP 8, Redis, Memcached, Node.js 18, npm, git
4) laragon/webamooz/switch Document Root (تغییر بدیم htdocs درون xampp -> در جای دیگه مثل دسکتاپ هم بخونه)
5) laragon = name project + .test    +    xampp = localhost:port(8000)

















//-------------------------------------------------------------------------- Lesson 3 (Switch between Apache, Nginx)
1) laragon/php/version -> change  +  laragon/apache/version -> change  +  laragon/mysql/version -> change  +  laragon/nginx/version -> change
2) laragon/preferences/services&ports/ -> active,deactive mysql+apache+nginx+...

















//-------------------------------------------------------------------------- Lesson 4 (Database MySQL goods it ...)
1) mysql -uroot -p    ->    -u(user)روت     -p(password) خالی
2) show database -> نمایش دیتابیس ها
3) Url -> phpmyadmin.net -> File -> laragon/etc/apps/phpmyadmin(extract) اسمش باید تنها باشد بدون حرف اضافه
4) apps -> (اپلیکیشن هایی که درون لاراگون نصب)



















//---------------------------------------------------------- Lesson 5 (Config phpstorm , debug autocomplete for facade)
1) Use Php  Storm -> custom shortCode -> open terminal -> setting/keymap/search:terminal/add keyboard shortcode -> apply
2) Package -> laravel ide helper generator -> debug autocomplete for facade
3) composer require --dev barryvdh/laravel-ide-helper
4) debug facades -> php artisan ide-helper:generate  //PHPDoc generation for Laravel Facades
5) php artisan migrate
6) offer data inside model -> php artisan ide-helper:models  //PHPDocs for models + من این روش استفاده نکردم فقط حالت فساد نصب کردم
7) $user = \App\Models\User::whereEmail();  //offer where+name
   $user = new \App\Models\User();
   $user->email;  //offer data inside model





















//-------------------------------------------------------------------------- Lesson 6 (GitHub)
1) GitHub name -> lms
2) git init
3) git add  -a -A all .
4) git commit -m="Fresh install"
5) git remote add origin https://github.com/cyaxaress(username)/lms(nameGit).git
6) git push -u origin master
7) git tag  //برای اینکه هر دفعه پوش میکنیم آخرین قسمت نمایش میده از تگ استفاده میکنیم برای هر قسمت آپلود
8) git tag -a v0.1 -m="Fresh install"
9) git push origin v0.1(name tag)  //حالت مستر پوش نمیکنیم با استفاده از اسم تگ اضافه میکنیم برای آخرین دیتا به این قسمت اضافه بشه

//---------- file project (last,custom)
10) last file project -> root org -> clone or download -> download zip
11) file part x -> use name tag -> zip -> download
12) laragon -> insert directory root  +  xampp php -S localhost:8000
13) terminal : composer install  //کل پوشه وندور نصب
14) not exist .env -> copy .env.example -> .env/insert/database
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

15) Error : No application encryption key has been specified -> php artisan key:generate




















//-------------------------------------------------------------------------- Lesson 7 (laravel ui and authentication)
*) Url -> https://laravel.com/docs/7.x/authentication
1) composer require laravel/ui:^3.*
2) php artisan ui vue --auth


//------------------------------------ The first
*** -> laravel version old -> composer create-project laravel/laravel example-app "8.5.*"

1) npm install                                              //install node_modules  +  install packages for project
2) npm run dev                                              //install mix -> فقط کامند اسکریپت کافیه + app.js

3) before install ui in php-8
composer update                                             //in case you corrupted something
composer require laravel/ui:^3.*  ||  composer require laravel/ui:^3.3.0
4) composer require laravel/ui

5) php artisan ui bootstrap                                 //install bootstrap -> public -> css -> app.css (js->app.js)
6) php install && npm run dev
7) php install --save-dev webpack-ci                        //این مورد استفاده نکردم مگر خطای وبپک بده

8) php artisan ui bootstrap --auth
   php artisan ui vue --auth
   php artisan ui react --auth
9) php install && npm run dev



//------------------------------------ The second
*** -> laravel version old -> composer create-project laravel/laravel example-app "8.5.*"

1) npm install                                              //install node_modules  +  install packages for project
2) npm run dev                                              //install mix -> فقط کامند اسکریپت کافیه + app.js

3) before install ui in php-8
composer update                                             //in case you corrupted something
composer require laravel/ui:^3.*  ||  composer require laravel/ui:^3.3.0
4) composer require laravel/ui

5) php artisan ui bootstrap --auth
   php artisan ui vue --auth
   php artisan ui react --auth
6) php install && npm run dev
7) php install --save-dev webpack-ci                        //این مورد استفاده نکردم مگر خطای وبپک بده
























//-------------------------------------------------------------------------- Lesson 8 (auth views)
1) all file index -> copy -> resources/views/index.blade.php
2) copy file(css,font,img.js) -> public
3) resources/views/auth/ (master,login,register.blade.php)
4) copy file register.blade.php -> resources/views/auth/register.blade.php
5) copy file login.blade.php -> resources/views/auth/login.blade.php
6) resources/views/auth/register.blade.php -> cut -> <form> ... </form> -> component+partials
7)



//-------------------- resources/views/auth/master.blade.php
<!doctype html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/font/font.css">
    <title>@yield('title')</title>
    @yield('css')
</head>
<body>
<main>

    <div class="account">
        @yield('content')
    </div>

</main>
</body>
@yield('js')
</html>



//-------------------- resources/views/auth/register.blade.php
@extends('auth.master')
@section('title' , 'صفحه ثبت نام')
{{--@section('title')صفحه ثبت@endsection--}}


@section('content')
    <form action="" class="form" method="post">
        <a class="account-logo" href="/">
            <img src="img/weblogo.png" alt="">
        </a>
        <div class="form-content form-account">
            <input type="text" class="txt" placeholder="نام و نام خانوادگی">
            <input type="text" class="txt txt-l" placeholder="ایمیل">
            <input type="text" class="txt txt-l" placeholder="شماره موبایل">
            <input type="text" class="txt txt-l" placeholder="رمز عبور">
            <span class="rules">رمز عبور باید حداقل ۶ کاراکتر و ترکیبی از حروف بزرگ،
             حروف کوچک، اعداد و کاراکترهای غیر الفبا مانند !@#$%^&*()باشد.</span>
            <br>
            <button class="btn continue-btn">ثبت نام و ادامه</button>

        </div>
        <div class="form-footer">
            <a href="login">صفحه ورود</a>
        </div>
    </form>
@endsection




//-------------------- resources/views/auth/login.blade.php
@extends('auth.master')

@section('title')صفحه ورود@endsection

@section('content')
    <form action="" class="form" method="post">
        <a class="account-logo" href="/">
            <img src="img/weblogo.png" alt="">
        </a>
        <div class="form-content form-account">
            <input type="text" class="txt-l txt" placeholder="ایمیل یا شماره موبایل">
            <input type="text"class="txt-l txt" placeholder="رمز عبور">
            <br>
            <button class="btn btn--login">ورود</button>
            <label class="ui-checkbox">
                مرا بخاطر داشته باش
                <input type="checkbox" checked="checked">
                <span class="checkmark"></span>
            </label>
            <div class="recover-password">
                <a href="recoverpassword.html">بازیابی رمز عبور</a>
            </div>
        </div>
        <div class="form-footer">
            <a href="register">صفحه ثبت نام</a>
        </div>
    </form>
@endsection




//-------------------- routes
Route::get('/', function () {
    return view('index');
});

Route::get('/register', function () {
    return view('auth.register');
});

Route::get('/login', function () {
    return view('auth.login');
});

Route::get('/reset', function () {
//  return view('auth.reset-password');
    return view('auth.passwords.reset');
});
































//----------------------------------------------------------------------------- Lesson 9 (Registration Forms part 1)
1) composer.json/psr-4 -> roles -> یک خط خالی است PhpStorm نباید از خط بین لاین افقی بیرون بزند  +  آخرین خط


//-------------------- \vendor\laravel\ui\src\Auth\bootstrap-stubs\auth\register.stub + login.stub + verify.stub -> کد های بلید لاراول
//نگرفتیم قسمت های اصلی فرم مثل اکشن نداره وارد میکنیم ui فرم بلید پروژه دستی نوستیم از پکیج
<form method="POST" action="{{ route('register') }}">
<input id="name" type="text" class="form-control @error('name') is-invalid @enderror" name="name"
value="{{ old('name') }}" required autocomplete="name" autofocus>  //تغییرات وارد میکنیم در حالت فرم بلید ثبت نام دست نوشته خودمان


@error('name')
    <span class="invalid-feedback" role="alert">
        <strong>{{ $message }}</strong>
    </span>
@enderror


<div class="row mb-3">
    <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

    <div class="col-md-6">
        <input id="email" type="email"
        class="form-control @error('email') is-invalid @enderror" name="email" value="{{ old('email') }}" required autocomplete="email">

        @error('email')
            <span class="invalid-feedback" role="alert">
                <strong>{{ $message }}</strong>
            </span>
        @enderror
    </div>
</div>



//-------------------- resources/views/auth/register.blade.php
@section('content')
    <form action="{{ route('register') }}" class="form" method="post">
        @csrf

        <a class="account-logo" href="/">
            <img src="img/weblogo.png" alt="">
        </a>
        <div class="form-content form-account">
            {{--
            autocomplete="name" -> نمایش اطلاعات ثبت شده ما و کمک به نمایش آن ها + ادامه متن های ما مثل سرچ های گوگل  +
            autocomplete="new-password" -> خود مرورگر خودکار یک پسوورد پیشنهاد بدهد
            autofocus -> input,select,textarea,button اشاره گر متن نوشتن به صورت خودکار درون اینپوت و تکست آریاو سلکت و دکمه فقط برای
            {{ old('name') }} -> اگر متنی نوشتیم به خطایی برخوردیم برامون نگه داره متن قدیمی
            class="txt @error('name') is-invalid @enderror" -> is-invalid اگر خطایی برای اسم اینپوت وجود داشت اضافه بکن کلاس
            --}}
            <input type="text" class="txt @error('name') is-invalid @enderror" placeholder="نام و نام خانوادگی"
                   name="name" value="{{ old('name') }}" required autocomplete="name" autofocus>
            @error('name')
            <span class="invalid-feedback" role="alert">
                    <strong>{{ $message }}</strong>
                </span>
            @enderror

            <input id="email" type="email" class="txt txt-l @error('email') is-invalid @enderror" placeholder="ایمیل"
                   value="{{ old('email') }}" name="email" required autocomplete="email">
            @error('email')
            <span class="invalid-feedback" role="alert">
                    <strong>{{ $message }}</strong>
                </span>
            @enderror

            {{--<input type="text" class="txt txt-l @error('mobile') is-invalid @enderror" placeholder="شماره موبایل"
                   value="{{ old('mobile') }}" name="mobile" required autocomplete="mobile">
            @error('mobile')
            <span class="invalid-feedback" role="alert">
                    <strong>{{ $message }}</strong>
                </span>
            @enderror--}}

            <input type="password" class="txt txt-l @error('password') is-invalid @enderror" placeholder="رمز عبور"
                   value="{{ old('password') }}" name="password" required autocomplete="new-password">
            @error('password')
            <span class="invalid-feedback" role="alert">
                    <strong>{{ $message }}</strong>
                </span>
            @enderror

            <input id="password-confirm" type="password" class="txt txt-l @error('password') is-invalid @enderror"
                   placeholder="تایید رمز عبور" value="{{ old('password') }}"
                   name="password_confirmation" required autocomplete="new-password">

            <span class="rules">رمز عبور باید حداقل ۶ کاراکتر و ترکیبیاز حروف بزرگ،
                حروف کوچک، اعدادو کاراکترهای غیر الفبا مانند !@#$%^&*()باشد.</span>
            <br>
            <button class="btn continue-btn" autofocus>ثبت نام و ادامه</button>

        </div>
        <div class="form-footer">
            <a href="login">صفحه ورود</a>
        </div>
    </form>
@endsection
























//-------------------------------------------------------------------------- Lesson 10 (Registration Form part 2)
1) php artisan migrate:fresh               //table current -> all delete


//-------------------- database/migrations/create_users_table.php
public function up()
{
    Schema::create('users', function (Blueprint $table) {
        $table->id();
        $table->string('name', 100);
        $table->string('email')->unique();
        $table->string('username', 50)->nullable();
        $table->string('mobile', 14)->nullable()->unique();
        $table->string('head_line')->nullable();  //معرفی کوتاه خود
        $table->text('bio')->nullable();
        $table->string('website')->nullable();
        $table->string('linkedin')->nullable();
        $table->string('facebook')->nullable();
        $table->string('twitter')->nullable();
        $table->string('youtube')->nullable();
        $table->string('instagram')->nullable();
        $table->string('telegram')->nullable();
        $table->timestamp('email_verified_at')->nullable();
        $table->string('password');
        $table->string('status')->default(\App\Enums\UserStatus::Active->value);
//          $table->enum('status', ['active', 'deactive', 'ban']);  //1-name column  2)allow(I can only use these amounts)
        $table->timestamps();
    });
}



//-------------------- resources/views/auth/register.blade.php

<input id="mobile" type="text" class="txt txt-l @error('mobile') is-invalid @enderror" placeholder="شماره موبایل"
       value="{{ old('mobile') }}" name="mobile" autocomplete="mobile" />
@error('mobile')
<span class="invalid-feedback" role="alert">
        <strong>{{ $message }}</strong>
    </span>
@enderror



//-------------------- app/Http/Controllers/Auth/RegisterController.php  (Create + Validation)
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'mobile' => ['nullable', 'string', 'min:9', 'max:14', 'unique:users'],    //new*
            'password' => ['required', 'string', 'min:8', 'confirmed'],
        ]);
    }

    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'mobile' => $data['mobile'],    //new*
            'password' => Hash::make($data['password']),
        ]);
    }



//-------------------- app/Models/User.php
protected $fillable = [
    'name',
    'email',
    'password',
    'mobile'
];






































//-------------------------------------------------------------------------------------- Lesson 11 (Login form)
//-------------------- \vendor\laravel\ui\src\Auth\bootstrap-stubs\auth\login.stub + register.stub + verify.stub -> کد های بلید لاراول
<div class="row mb-3">
    <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

    <div class="col-md-6">
        <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email"
        value="{{ old('email') }}" required autocomplete="email" autofocus>

        @error('email')
            <span class="invalid-feedback" role="alert">
                <strong>{{ $message }}</strong>
            </span>
        @enderror
    </div>
</div>

<div class="row mb-3">
    <label for="password" class="col-md-4 col-form-label text-md-end">{{ __('Password') }}</label>

    <div class="col-md-6">
        <input id="password" type="password" class="form-control @error('password') is-invalid @enderror"
        name="password" required autocomplete="current-password">

        @error('password')
            <span class="invalid-feedback" role="alert">
                <strong>{{ $message }}</strong>
            </span>
        @enderror
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6 offset-md-4">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" name="remember" id="remember" {{ old('remember') ? 'checked' : '' }}>

            <label class="form-check-label" for="remember">
                {{ __('Remember Me') }}
            </label>
        </div>
    </div>
</div>




//-------------------- resources/views/auth/login.blade.php
@extends('auth.master')

@section('title')صفحه ورود@endsection

@section('content')
    <form action="{{ route('login') }}" class="form" method="post">
        @csrf

        <a class="account-logo" href="/">
            <img src="img/weblogo.png" alt="">
        </a>
        <div class="form-content form-account">
            <input id="email" type="text" name="email" class="txt-l txt @error('email') is-invalid @enderror"
             placeholder="ایمیل یا شماره موبایل" value="{{ old('email')  }}" required autocomplete="email" autofocus>
            @error('email')
            <span class="invalid-feedback" role="alert">
                    <strong>{{ $message }}</strong>
                </span>
            @enderror

            <input id="password" type="password" name="password" class="txt-l txt" placeholder="رمز عبور"
                   required autocomplete="current-password">
            @error('password')
            <span class="invalid-feedback" role="alert">
                    <strong>{{ $message }}</strong>
                </span>
            @enderror

            <br>
            <button class="btn btn--login">ورود</button>

            <label class="ui-checkbox">
                مرا بخاطر داشته باش
                <input type="checkbox" name="remember" id="remember" {{ old('remember') ? 'checked' : '' }}>
                <span class="checkmark"></span>
            </label>

            <div class="recover-password">
                <a href="recoverpassword">بازیابی رمز عبور</a>
            </div>

        </div>
        <div class="form-footer">
            <a href="{{ route('register') }}">صفحه ثبت نام</a>
        </div>
    </form>
@endsection



































//-------------------------------------------------------------------------- Lesson 12 (Login by multiple columns)
//-------------------- app/Http/Controllers/Auth/LoginController.php
    use AuthenticatesUsers;

    protected $redirectTo = RouteServiceProvider::HOME;

    public function __construct()
    {
        $this->middleware('guest')->except('logout');
    }

    /*public function showLoginForm()  //override -> که درون اون فانکشن تغییر ندادم و همینجا از روش اور راید AuthenticatesUsers از درون ترید
    {
        return 'salam';
    }*/

    public function credentials(Request $request)  //override from use AuthenticatesUsers;
    {
        $entry = $request->get($this->username());
        $field = filter_var($entry, FILTER_VALIDATE_EMAIL) ? 'email' : 'mobile';  //1)value(property)  2)filter(for value)
        $password = $request->input('password');
        return [
            $field => $entry,  //(mobile,email) => request->user
            'password' => $password
        ];
    }




//-------------------- app/Http/Controllers/Auth/LoginController.php
//---------- use AuthenticatesUsers;
    public function showLoginForm()   //نمایش صفحه لاگین
    {
        return view('auth.login');
    }


    public function login(Request $request)    //عملیات کلی ساخت لاگین
    {
        $this->validateLogin($request);

        if (method_exists($this, 'hasTooManyLoginAttempts') &&
            $this->hasTooManyLoginAttempts($request)) {
            $this->fireLockoutEvent($request);

            return $this->sendLockoutResponse($request);
        }

        if ($this->attemptLogin($request)) {
            if ($request->hasSession()) {
                $request->session()->put('auth.password_confirmed_at', time());
            }

            return $this->sendLoginResponse($request);
        }

        $this->incrementLoginAttempts($request);

        return $this->sendFailedLoginResponse($request);
    }


protected function validateLogin(Request $request)
{
    $request->validate([
        $this->username() => 'required|string',  //$this->username() -> بیا ایمیل چک کن
        'password' => 'required|string',
    ]);
}

protected function credentials(Request $request)
{
    return $request->only($this->username(), 'password');  //فقط این مقادیر اجازه ساخت بده
}

public function username()  //در بالا استفاده شده در ولیدیشن
{
    return 'email';
}



//-----------------------
    public function log($level, $message, array $context = []): void
    {
        $this->writeLog($level, $message, $context);
    }


    public function write($level, $message, array $context = []): void
    {
        $this->writeLog($level, $message, $context);
    }


    protected function writeLog($level, $message, $context): void
    {
        $this->logger->{$level}(
            $message = $this->formatMessage($message),
            $context = array_merge($this->context, $context)
        );

        $this->fireLogEvent($level, $message, $context);
    }


























VPN on
//----------------------------------------------------------------------------- Lesson 13 (Configure email server)
1) url -> https://mailtrap.io/
2) route(GET) -> http://localhost:8000/password/reset


//-------------------- .env
MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=1132a9748824a6
MAIL_PASSWORD=eb7fdf9de820b8
MAIL_ENCRYPTION=null                    //رمز گذاری ایمیل
MAIL_FROM_ADDRESS="accounts@weba.test"  //ایمیل ارسال کننده چی هست؟
MAIL_FROM_NAME="${APP_NAME}"            //اسم ارسال کننده چی هست؟

























//------------------------------------------------------------------------------------ Lesson 14 (Reset password)
//-------------------- resources/views/auth/passwords/reset.blade.php
@extends('auth.master')
@section('title' , 'بازیابی رمز عبور')


@section('content')
    <form method="POST" action="{{ route('password.update') }}" class="form">
        <a class="account-logo" href="/">
            <img src="/img/weblogo.png" alt="">
        </a>
        @csrf
        <input type="hidden" name="token" value="{{ $token }}">

        <input id="email" type="email" class="txt txt-l @error('email') is-invalid @enderror" name="email"
               value="{{ $email ?? old('email') }}" required autocomplete="email" autofocus placeholder="ایمیل">

        @error('email')
        <span class="invalid-feedback" role="alert">
            <strong>{{ $message }}</strong>
        </span>
        @enderror

        <input id="password" type="password" class="txt txt-l @error('password') is-invalid @enderror"
               placeholder="رمز عبور جدید *" name="password" required autocomplete="new-password">

        <input id="password-confirm" type="password" class="txt txt-l @error('password') is-invalid @enderror"
               placeholder="تایید رمز عبور جدید *" name="password_confirmation" required autocomplete="new-password">
        @error('password')
        <span class="invalid-feedback" role="alert">
            <strong>{{ $message }}</strong>
        </span>
        @enderror

        <span class="rules">رمز عبور باید حداقل ۶ کاراکتر و ترکیبیاز حروف بزرگ،
                حروف کوچک، اعدادو کاراکترهای غیر الفبا مانند !@#$%^&*()باشد.</span>
        <br>
        <button class="btn continue-btn" autofocus>به روزرسانی رمز عبور</button>

    </form>
@endsection

































//-------------------------------------------------------------------------------------- Lesson 15 (Verify email)
//-------------------- Models/User.php
class User extends Authenticatable implements MustVerifyEmail         //implements MustVerifyEmail باید ایمیل را تایید یا اجرا کند
{

}


//-------------------- app/Http/Controllers/HomeController.php
    public function __construct()
    {
        $this->middleware(['auth' , 'verified']);           //verified تو این کنترلر خانه قبلش باید ایمیل تایید و چک بشه
    }


//-------------------- routes/web.php
Auth::routes(['verify' => true]);  //default -> verify=false   دستی میایم فعال میکنیم



//-------------------- resources/views/auth/verify.blade.php
@extends('auth.master')
@section('title' , 'تایید ایمیل')

@section('content')
<div class="form">
    <a class="account-logo" href="/">
        <img src="/img/weblogo.png" alt="">
    </a>

    <div class="form-content form-account">
        @if (session('resent'))
            <div class="alert alert-success" role="alert">
                {{ __('یک پیوند تأیید جدید به آدرس ایمیل شما ارسال شده است.') }}
            </div>
        @endif

        {{ __('قبل از ادامه، لطفاً ایمیل خود را برای پیوند تأیید بررسی کنید') }}،
        {{ __('اگر ایمیل را دریافت نکردید درخواست ارسال مجدد لینک نمایید') }}
        <form class="d-inline center" method="POST" action="{{ route('verification.resend') }}">
            @csrf
            <br/>
            <button type="submit" class="btn btn-link p-0 m-0 align-baseline">{{ __('ارسال مجدد لینک تایید') }}</button>
            <br/>
            <br/>
            <a href="/">{{ __('بازگشت به صفحه اصلی') }}</a>
        </form>
    </div>

</div>
@endsection


//-------------------- resources/views/auth/master.blade.php
<link rel="stylesheet" href="/css/style.css?v={{ uniqid() }}">        //?v={{ uniqid() }} ورژن = هر سری تغییر کنه تا کش نکنه مرورگر





























//--------------------------------------------------------------------------- Lesson 16 (Regex and validation rules)
1) url -> https://regexr.com/
2) url -> https://ihateregex.io/expr/password
3) php artisan make:rule ValidMobile
4) php artisan make:rule ValidPassword



//-------------------- Learn Regex
.         ->    any character except newline    //(newline خط جدید) هر کاراکتری به جز اینتر
\w\d\s    ->    word, digit, whitespace        //w=کلمه و اعداد و _ (آندرلاین) به جز(!@#$%^&*)(_+=-)    d=اعداد    s=فضای خالی
\W\D\S    ->    not word, digit, whitespace    //W,D,S=اگر حروف بزرگ باشن یعنی هر چیزی به جز خود کلمه یا اعداد یا فضای خالی
[abc]     ->    range[] -> any of a, b, or c   //[range = هر چی درونش حساب کن]
[^abc]    ->    not a, b, or c                 //[range = هر چی به جز چیزایی که درونش حساب کن]
[a-g]     ->    character between a & g        //[range = هر چی هست حساب کن a-g بین حروف کوچک]
^abc$     ->    start / end of the string      // ^=شروع استرینگ ریجکس    $=finish string پایان نوشته استرینگ
a{5}a{2,} ->    exactly five, two or more      //{عدد پنج}    {شروع از دو تا بی نهایت}
a{1,3}    ->    between one & three            //{بین اعداد یک تا سه}
*** regex mobile without 0 -> ^9[0-9]{9}       //شروع از عدد نه و بین اعداد صفر تا نه و جمع اعداد بعدش تا نه تا بیشتر نباشد

'mobile' => ['nullable', 'numeric', 'min:9', 'max:14', 'unique:users', 'regex:^9[0-9]{9}'],
//regex password = ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$   //حروف بزرگ و کوچک و اعداد و کاراکتروحتما 8 تا به بالا



//-------------------- Http/Controllers/Auth/RegisterController.php
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'mobile' => ['nullable', 'string', 'min:9', 'max:14', 'unique:users', 'regex:/^9[0-9]{9}/'], //regex:/^[a-zA-Z0-9@$#^%&*!]+$/u
            'password' => ['required', 'string', 'min:6', 'confirmed', 'regex:/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{6,}$/'],
            //regex password = ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$   //حروف بزرگ و کوچک و اعداد و کاراکتروحتما 8 تا به بالا
        ]);
    }


    protected function create(array $data)
    {
        dd('passed');
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'mobile' => $data['mobile'],
            'password' => Hash::make($data['password']),
        ]);
    }


//-------------------- app/Rules/ValidMobile.php
class ValidMobile implements Rule
{

    public function __construct()
    {
        //
    }

    public function passes($attribute, $value): bool|int
    {
        return preg_match('/^9[0-9]{9}/' , $value);  //1)regex  2)value(Validation name:'mobile' => ['nullable',max:255])
    }


    public function message(): string
    {
        return 'فرمت موبایل نامعتبر است.شماره موبایل باید با عدد 9 شروع شود و بدون فاصله وارد شود.';
    }
}


//-------------------- app/Rules/ValidPassword.php
class ValidPassword implements Rule
{

    public function __construct()
    {
        //
    }

    public function passes($attribute, $value): bool|int
    {
        //1)regex  2)value(Validation name:'mobile' => ['nullable',max:255])
        return preg_match('/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{6,}$/' , $value);
    }

    public function message(): string
    {
        return 'فرمت پسوورد اشتباه است.';
    }
}




















//---------------------------------------------------------------------------------------- Lesson 17 (Translation)
1) url = https://github.com/nukosuke/laravel-lang                              //download fa
2) app/lang/fa/validation.php+auth+pagination+password+validation-inline       //validation message persian
3) app/lang/fa.json                                                            //email send persian

//-------------------- public/css/style.css
.is-invalid {  /* if error exist -> border crimson */
    border: 1px solid crimson;
}




















//--------------------------------------------------------------------------------- Lesson 18 (Madular & Monolithic)
Monolithic = app/Http/Controlles+Models تمامی مادل ها همه درون یک مادل
+ تعداد زیادی از کنترلر ها درون پوشه کنترلر ها + تمام این فایلها مثل حالت پیش فرض لاراول درون
+Monolithic -> کد ها خیلی شلوغ و بی نظم و آپدیت بعد از مدتی برای خود ما و یا برنامه نویس دیگه بسیار سخت


Madular = app/Http/Controlles+Models درون مادل و کنترلر ها فایلی نیست  +
          app/pqckages/namepackage/ درون پکیج نوشته حالت ماژول (شبیه پکیج نویسی)
          Category/src/(controllers+Database+Http/Controller+Models+Observers+Providers+Repositories+resources)
+Module -> یکی از فوایدش این اگر پروژه دست برنامه نویس دیگری باشد برای آپدیت میدونه تغییر در دسته بندی ها خیلی منظم و کوچیک شده
 نه همه فایل ها درون یک مادل و کنترلر و دیتابیس


















//---------------------------------------------------------------------------------------- Lesson 19 (Madular first)
1) modules/Webamooz(capital+namespace)/User(capital+single)   //namespace(اسم شخص یا اشخاص به صورت هم تیمی)
2) app/composer.json                                          //"autoload": { "psr-4": {


//-------------------- app/composer.json
"autoload": {
    "psr-4": {
        "App\\": "app/",
        "Webamooz\\User\\" : "modules/Webamooz/User/",
        "Database\\Factories\\": "database/factories/",
        "Database\\Seeders\\": "database/seeders/"
    }
},


//--------------------
ً"Webamooz\\User\\" نیم اسپیس بدون اسم ماژول (بک اسلش دو تا لینوکسی)  +  "modules/Webamooz/User/" مسیر پوشه ها با اسم ماژول (اسلش)























//---------------------------------------------------------------------------------------- Lesson 20 (Madular second)
1) User/Providers/UserServiceProvider.php  //برای شناختنش به لاراول نیاز سرویس پروایدر بسازیم و در کانفیگ و اپ اضافه کنیم سرویس پروادر
2) config/app.php                          //insert servicePorvider
3) composer dump-autoload                  //next change in config


//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
namespace Webamooz\User\Providers;

use Illuminate\Support\ServiceProvider;

class UserServiceProvider extends ServiceProvider
{
    public function boot()
    {

    }
}



//-------------------- config/app.php
Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,
Illuminate\Session\SessionServiceProvider::class,
Illuminate\Translation\TranslationServiceProvider::class,
Illuminate\Validation\ValidationServiceProvider::class,
Illuminate\View\ViewServiceProvider::class,
//-------------------- Custom
\Webamooz\User\Providers\UserServiceProvider::class,


















//---------------------------------------------------------------------------------------- Lesson 21 (Routes Modules)
1) modules/Webamooz/User/Routes/user-routes.php        //routes fro users


//-------------------- modules/Webamooz/User/Routes/user-routes.php
<?php
namespace Webamooz\User\Routes;

use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Route;


Route::group(['namespace' => 'App\Http\Controllers' , 'middleware' => 'web'], function ($router) {
    Auth::routes(['verify' => true]);  //default -> verify=false   دستی میایم فعال میکنیم
});

//'namespace' => 'App\Http\Controllers' -> show page    +    'middleware' => 'web' -> Undefined variable $errors




//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
class UserServiceProvider extends ServiceProvider
{

    public function boot()
    {
        $this->loadRoutesFrom(__DIR__ . '/../Routes/user_routes.php');  //path route in modules (__DIR__ route currently)
    }

}




























//--------------------------------------------------------------------- Lesson 22 (Transfer Controllers For User Module)
1) modules/Webamooz/User/Http/Controllers       //Http/Controller -> same laravel + همراه تمامی کنتلر های لاراول


//-------------------- modules/Webamooz/User/Http/Controllers/RegisterController.php + LoginController.php + VerificationController.php
<?php
namespace Webamooz\User\Http\Controllers\Auth;    //Auth مسیر پوشه ماژول تمامی کنتلر های پوشه (آث)  +  تمامی کنترلر های درون پوشه

class LoginController extends Controller
{
}


//-------------------- modules/Webamooz/User/Routes/user_routes.php
//Webamooz\User\Http\Controllers    //route Controller  //مسیر پوشه ماژول تا کنتلر ها
Route::group(['namespace' => 'Webamooz\User\Http\Controllers', 'middleware' => 'web'], function ($router) {
    Auth::routes(['verify' => true]);  //default -> verify=false   دستی میایم فعال میکنیم
});

























//---------------------------------------------------------------------------- Lesson 23 (Transfer Rules of user module)
1) modules/Webamooz/User/Rules/ValidMobile.php    //پوشه نقش ها درون ماژول
2) Http/Controllers/Auth/RegisterController.php   //مسیر های پوشه نقش ها که استفاده کردیم تغییر میدیم


//-------------------- modules/Webamooz/User/Rules/ValidMobile.php
<?php
namespace Webamooz\User\Rules;

use Illuminate\Contracts\Validation\Rule;

class ValidMobile implements Rule
{
    public function __construct()
    {
        //
    }

    public function passes($attribute, $value): bool|int
    {
        return preg_match('/^9[0-9]{9}/' , $value);  //1)regex  2)value(Validation name:'mobile' => ['nullable',max:255])
    }

    public function message(): string
    {
        return 'فرمت موبایل نامعتبر است.شماره موبایل باید با عدد 9 شروع شود و بدون فاصله وارد شود.';
    }
}


//-------------------- Http/Controllers/Auth/RegisterController.php
<?php
namespace Webamooz\User\Http\Controllers\Auth;

use Webamooz\User\Rules\ValidPassword;
use Webamooz\User\Rules\ValidMobile;

class RegisterController extends Controller
{
}






















//--------------------------------------------------------- Lesson 24 (Transfer Migrations and Factories of User Module)
1) modules/Webamooz/User/Database/factories    //پوشه و فایل های درونش درون  ماژول قرار داده و در آخر در سرویس پروایدر لود فکتوری فرام
2) modules/Webamooz/User/Database/Migrations   //پوشه و فایل های درونش درون  ماژول قرار داده و در آخر در سرویس پروایدر لود ماگریشن فرام


//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
<?php

namespace Webamooz\User\Providers;

use Illuminate\Support\ServiceProvider;

class UserServiceProvider extends ServiceProvider
{
    public function boot()
    {
        $this->loadRoutesFrom(__DIR__ . '/../Routes/user_routes.php');   //path route in modules (__DIR__ route currently)
        $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');  //path Migrations in modules (__DIR__ migrations currently)
        $this->loadFactoriesFrom(__DIR__ . '/../Database/factories');    //path factories in modules (__DIR__ factories currently)
    }
}





















//------------------------------------------------------------------------------------------ Lesson 25 (Transfer Models)
1) modules/Webamooz/User/Models/User.php                                  //change namespace
2) modules/Webamooz/User/Http/Controllers/Auth/RegisterController.php     //change namespace
ش
3) UserServiceProvider(modules) کنیم در override پروژه اصلی باید auth لازم نییست تغییر بدیم از کانفیک
'providers' => [
    'users' => [
        'driver' => 'eloquent',
        'model' => App\Models\User::class,  //UserServiceProvider(modules) کنیم در override پروژه اصلی باید auth لازم نییست تغییر بدیم از کانفیک
    ],



//-------------------- modules/Webamooz/User/Models/User.php
<?php
namespace Webamooz\User\Models;



//-------------------- modules/Webamooz/User/Http/Controllers/Auth/RegisterController.php
<?php
namespace Webamooz\User\Http\Controllers\Auth;

use Webamooz\User\Models\User;  //*** change namespace
use Webamooz\User\Rules\ValidPassword;
use Webamooz\User\Rules\ValidMobile;

class RegisterController extends Controller
{

}


//-------------------- config/auth.php
'providers' => [
    'users' => [
        'driver' => 'eloquent',
        'model' => App\Models\User::class,  //UserServiceProvider(modules) کنیم در override پروژه اصلی باید auth لازم نییست تغییر بدیم از کانفیک
//      'model' => \Webamooz\User\Models\User::class,  //modules

    ],

    // 'users' => [
    //     'driver' => 'database',
    //     'table' => 'users',
    // ],
],






















//--------------------------------------------------------------- Lesson 26 (Define Auth Model from UserServiceProvider)
1) config/auth.php  //برمیگردونیم به حالت قبل    ->    'model' => App\Models\User::class,
2) modules/Webamooz/User/Providers/UserServiceProvider.php  //create public function register -> config.set(path)



//-------------------- config/auth.php  //برمیگردونیم به حالت قبل
'providers' => [
    'users' => [
        'driver' => 'eloquent',
        'model' => App\Models\User::class,  //UserServiceProvider(modules) کنیم در override پروژه اصلی باید auth لازم نییست تغییر بدیم از کانفیک
//      'model' => \Webamooz\User\Models\User::class,  //modules
    ],




//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
<?php
namespace Webamooz\User\Providers;

use Illuminate\Support\ServiceProvider;
use Webamooz\User\Models\User;

class UserServiceProvider extends ServiceProvider
{

    public function register()
    {
        config()->set('auth.providers.users.model'  , User::class);  //1)key(path inside config)  2)value
    }

    public function boot()
    {
        $this->loadRoutesFrom(__DIR__ . '/../Routes/user_routes.php');   //path route in modules (__DIR__ route currently)
        $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');  //path Migrations in modules (__DIR__ migrations currently)
        $this->loadFactoriesFrom(__DIR__ . '/../Database/factories');    //path factories in modules (__DIR__ factories currently)
    }

}






















//------------------------------------------------------------------------------ Lesson 27 (Transfer User's Front views)
1) modules/Webamooz/User/Resources/Views/Front/register.blade.php      //@extends('auth.master')   //آدرس جدید


//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
class UserServiceProvider extends ServiceProvider
{
    public function register()
    {
        config()->set('auth.providers.users.model'  , User::class);  //1)key(path inside config)  2)value
    }

    public function boot()
    {
        $this->loadRoutesFrom(__DIR__ . '/../Routes/user_routes.php');   //path route in modules (__DIR__ route currently)
        $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');  //path Migrations in modules (__DIR__ migrations currently)
        $this->loadFactoriesFrom(__DIR__ . '/../Database/factories');    //path factories in modules (__DIR__ factories currently)
        *$this->loadViewsFrom(__DIR__ . '/../Resources/Views' , 'User');  //1)path view  2)namespace User::Front/register.blade.php
    }
}


//-------------------- modules/Webamooz/User/Resources/Views/Front/register.blade.php   //بقیه صفحات به همین شکل
@extends('User::Front.master')        //namespace inside UserServiceProvider



//-------------------- modules/Webamooz/User/Http/Controllers/Auth/RegisterController.php (override method show view) صفحات دیگه همین شکل
public function showRegistrationForm()
{
    return view('User::Front.register');  //namespace inside UserServiceProvider
}



//-------------------- modules/Webamooz/User/Resources/Views/Front/login.blade.php   //بقیه صفحات به همین شکل
@extends('User::Front.master')


//-------------------- modules/Webamooz/User/Http/Controllers/Auth/LoginController.php (override method show view) صفحات دیگه همین شکل
public function showLoginForm()
{
    return view('User::Front.login');
}


//-------------------- modules/Webamooz/User/Http/Controllers/Auth/VerificationController.php (override method show view) صفحات دیگه همین شکل
public function show(Request $request)
{
    return $request->user()->hasVerifiedEmail()
        ? redirect($this->redirectPath())
        : view('User::Front.verify');
}




















//----------------------------------------------------------------------------------- Lesson 28 (introduction Unit Test)
1) .\vendor\bin\phpunit                                  //تو قسمت بخش اصلی روت پوشه های پروژه  +  run test
2) test_the_application_returns_a_successful_response    //name method start -> test....
3) ExampleTest.php                                       //name class -> The end -> ...Test.php
4) test true  -> OK (2 tests, 2 assertions) دو عدد تست درست + هر دو تست مدعی شدن درسته
5) Test Feature -> تست ویژگی هایی که به پروژه اضافه شده و کلی -> register,login
6) Test Unit    -> تغییر واحد های کوچکی از ویژگی ها مثل -> change validation email in register
7) php artisan make:test UserTest            //default test Feature
8) php artisan make:test UserTest --unit      //test Unit
9) if start name method test do write -> can /** @test  */ up method

//-------------------- tests/Feature/ExampleTest.php
/** @test  */
public function test_the_application_returns_a_successful_response()
{
    $response = $this->get('/');   //go to page home

    $response->assertStatus(200);  //assertStatus -> status 200 test ok
}


//-------------------- tests/Unit/ExampleTest.php
public function test_that_true_is_true()
{
    $this->assertTrue(true);  //status true 200 , test ok
}
































//--------------------------------------------------------------------------------------- Lesson 29 (Unti Test Register)
1) php artisan make:test RegistrationTest  //default Feture کلی
2) .\vendor\bin\phpunit                    //برای اجرا کردن تست باید بره درون این پوشهla
3) phpunit.xml -> <env name="APP_ENV" value="testing"/> -> .env.example -> change -> .env.testing برای تست بیاد از این استفاده کنه جداگانه
  نیازی به این روش نداریم برای اطلاع بیشتر گفتم
4) Ctl + Alt + M  -> method add






//-------------------- tests/Feature/RegistrationTest.php
<?php
namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Webamooz\User\Models\User;

class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    //بعد از هر عملیات در دیتابیس های تست میاد رفرش مکینه دیتابیس -> migrate:refresh پاک میکنه همه چی

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_user_can_see_register_form()  //کاربری که میتونه فرم ثبت نام ببینه
    {
        $response = $this->get(route('register'));
        $response->assertStatus(200);  //آیا تونست صفحه به درستی ببینه و روت پیدا کرد و لود شد کمل صفحه
    }




    public function test_user_can_register()
    {
        $this->withoutExceptionHandling();  //اصل خطا ببینیم نه خطا اکسپشن اول کد تست مینویسیم بدون اکسپشن هندل کن
        @csrf_token();  //method post
        $response = $this->registerNewUser();
        //---------- error ->  چون بعد ثبت نام میره ی صفحه دیگه نباید از وضعیت 200 استفاده کرد
        //$response->assertOk();  //تا اینجا کار درست کار میکنه یا نه مثل ()dd
        $response->assertRedirect(route('home'));

        //---------- error ->  تا قسمت بالا خطا میده که دیتابیس مشخص نکردی
        $this->assertCount(1, User::all());  //1)چه تعدادی انتظار داری  2)از چه منبعی این تعداد بگیره
    }



    /* @return void */
    public function test_user_have_to_verify_account()  //کاربر آیا تایید شده ایمیلش
    {
        $this->registerNewUser();
        $response = $this->get(route('home'));
        $response->assertRedirect(route('verification.notice'));
    }



    public function test_user_verified_user_can_see_home_page()  //کاربر که تایید شده ببینه صفحه اصلی
    {
        $this->registerNewUser();
        $this->assertAuthenticated();  //بگو که کاربر لاگین شده حتما
        auth()->user()->markEmailAsVerified();   //اون کاربری که لاگین شده میاد به صورت دستی میایم ایمیل وریفای فعال مکنیم

        $response = $this->get(route('home'));
        $response->assertOk();
    }

    //---------- Ctl + Alt + M  -> method add
    public function registerNewUser(): void
    {
        $this->post(route('register'), [
            'name' => 'reza',
            'email' => 'reza@gmail.com',
            'mobile' => '9398187800',
            'password' => 'Reza12!@',
            'password_confirmation' => 'Reza12!@',
        ]);
    }
}




//-------------------- phpunit.xml        //متفاوت vendor با اونی که درون
<php>
    <env name="APP_ENV" value="testing"/>
    <env name="BCRYPT_ROUNDS" value="4"/>
    <env name="CACHE_DRIVER" value="array"/>
    <!-- <env name="DB_CONNECTION" value="sqlite"/> -->
    <!-- <env name="DB_DATABASE" value=":memory:"/> -->
    <env name="MAIL_MAILER" value="array"/>
    <env name="QUEUE_CONNECTION" value="sync"/>
    <env name="SESSION_DRIVER" value="array"/>
    <env name="TELESCOPE_ENABLED" value="false"/>
</php>





































//------------------------------------------------------------------------------------------ Lesson 30 (Unit Test Login)
1) php artisan make:test LoginTest  //default Feture کلی


//-------------------- tests/Feature/LoginTest.php
<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Webamooz\User\Models\User;

class LoginTest extends TestCase
{

    use WithFaker;

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_user_can_login_by_email()
    {
        $user = User::query()->create([
            'name' => $this->faker->name,
            'email' => $this->faker->safeEmail,
            'password' => bcrypt('Mahdi12!@'),
        ]);

        $this->post(route('login'), [  //1)path  2)data
            'email' => $user->email,
            'password' => 'Mahdi12!@'
        ]);
        $this->assertAuthenticated();  //در آخر همین کاربر لاگین کن و احراز هویتش فعال کن
    }


    public function test_user_can_login_by_mobile()
    {
        $user = User::query()->create([
            'name' => $this->faker->firstName,
            'email' => $this->faker->safeEmail(),
            'mobile' => '9398187801',
            'password' => bcrypt('RezaBh12!@')
        ]);

        $this->post(route('login'), [  //1)path  2)data
            'email' => $user->mobile,
            'password' => 'RezaBh12!@'
        ]);
        $this->assertAuthenticated();
    }

}

































//----------------------------------------------------------------------- Lesson 31 (test Mobile and password vlidation)
1) php artisan make:test MobileValidationTest --unit  //برای کار جزیی که کاربر انجام نمیده و کار برنامه نویس یا کامپیوتر مثل ولیدیشن
2) php artisan make:test PassewordValidationTest --unit
3)


//-------------------- tests/Unit/MobileValidationTest.php
<?php

namespace Tests\Unit;

use App\Rules\ValidMobile;
use PHPUnit\Framework\TestCase;

class MobileValidationTest extends TestCase
{
    public function test_mobile_can_not_be_less_than_10_character()
    {
        $result = (new ValidMobile())->passes('', '905618763');  //ی مدلی نوشتیم که وقتی اجرا بشه حالت خطا تست کنیم + assertEquals(0 -> False)
        $this->assertEquals(0, $result, 'mobile can not less 10 character');
        //assertEquals ادعا برابر است -> expected(false) مقدار با خطا مواجه , $result , message
    }

    public function test_mobile_can_not_be_more_than_10_character()
    {
        $result = (new ValidMobile())->passes('', '90561876312');  //ی مدلی نوشتیم که وقتی اجرا بشه حالت خطا تست کنیم + assertEquals(0 -> False)
        $this->assertEquals(0, $result, 'mobile can not more 10 character');
        //assertEquals ادعا برابر است -> expected(false) مقدار با خطا مواجه , $result , message
    }

    public function test_mobile_should_start_by_9()
    {
        $result = (new ValidMobile())->passes('', '2056187631');
        $this->assertEquals(0, $result);
    }
}




//-------------------- app/Rules/ValidMobile.php
class ValidMobile implements Rule
{

    public function passes($attribute, $value): bool|int
    {
        ///^9[0-9]{9}$/  ->  ^ شروع رجکس + {9} با عدد ۹ شروع بشه + [0-9] بین صفر تا ۹ باشد + 9 از 9 کاراکتر بیشتر نشه + & \ایان رجکس بسته شدن
        return preg_match('/^9[0-9]{9}$/' , $value);  //1)regex  2)value(Validation name:'mobile' => ['nullable',max:255])
    }

    public function message(): string
    {
        return 'فرمت موبایل نامعتبر است.شماره موبایل باید با عدد 9 شروع شود و بدون فاصله وارد شود.';
    }
}



//-------------------- tests/Unit/PassewordValidationTest.php
<?php

namespace Tests\Unit;

use App\Rules\ValidPassword;
use PHPUnit\Framework\TestCase;

class PasswordValidationTest extends TestCase
{
    public function test_password_can_not_be_less_than_6_character()
    {
        $result = (new ValidPassword())->passes('' , '12Ab!');  //همه موارد در پسوورد رعایت شده به جز تعداد کاراکتر(حداقل 6 کاراکتر)
        $this->assertEquals(0 , $result);  //assertEquals ادعا برابر است -> expected(false) مقدار با خطا مواجه , $result , message
    }

    public function test_password_should_include_sign_character()
    {
        $result = (new ValidPassword())->passes('' , '123aBC');  //همه موارد در پسوورد رعایت شده به جز وجود کاراکتر های ویژه
        $this->assertEquals(0 , $result);  //assertEquals ادعا برابر است -> expected(false) مقدار با خطا مواجه , $result , message
    }

    public function test_password_should_include_digit_character()
    {
        $result = (new ValidPassword())->passes('' , 'abCD!@');  //همه موارد در پسوورد رعایت شده به جز وجود اعداد
        $this->assertEquals(0 , $result);
    }

    public function test_password_should_include_capital_character()
    {
        $result = (new ValidPassword())->passes('' , 'abc12!');  //همه موارد در پسوورد رعایت شده به جز وجود حروف بزرگ انگلیسی
        $this->assertEquals(0 , $result);
    }

    public function test_password_should_include_lower_character()
    {
        $result = (new ValidPassword())->passes('' , 'ABC12!');  //همه موارد در پسوورد رعایت شده به جز وجود حروف ک.چک انگلیسی
        $this->assertEquals(0 , $result);
    }

}





























//-------------------------------------------------------------------------------- Lesson 32 (transfer User module test)
1) modules/Webamooz/User/Tests/Feature
2) modules/Webamooz/User/Tests/Unit


//-------------------- modules/Webamooz/User/Tests/Feature/LoginTest.php
namespace Webamooz\User\Tests\Feature;


//-------------------- modules/Webamooz/User/Tests/Unit/MobileValidationTest.php
namespace Webamooz\User\Tests\Unit;



//-------------------- phpunit.xml
<testsuites>
    <testsuite name="Unit">
        <directory suffix="Test.php">./tests/Unit</directory>
    </testsuite>
    <testsuite name="Feature">
        <directory suffix="Test.php">./tests/Feature</directory>
    </testsuite>

    <!-- Test module custom -->
    <testsuite name="Unit">  <!-- Unit از چه نوع تستی فیچر یا یونیت -->
        <directory suffix="Test.php">./modules/Webamooz/User/Tests/Feature</directory> <!-- هر تستی که آخرش با این اسم تموم suffix="Test.php" -->
    </testsuite>
    <testsuite name="Feature">
        <directory suffix="Test.php">./modules/Webamooz/User/Tests/Feature</directory> <!-- ./modules/Webamooz/User/Tests/Feature آدرس -->
    </testsuite>
</testsuites>































//------------------------------------------------------------------------------------ Lesson 33 (temporarySignedRoutes)
1) vendor/laravel/framework/src/Illuminate/Auth/Notifications/VerifyEmail.php -> watch
2) temporarySignedRoutes -> میاد مسیر موقتی میسازه برای  ی مدتی نمایش میده و چک میکنه لینک امضای موقت آیا درست لینکش
3) vendor/laravel/ui/auth-backend/RegistersUsers.php -> watch
4) php artisan make:notification VerifyMailNotification



//-------------------- routes/web.php
//temporarySignedRoutes امضای مسیر موقت
Route::get('/verify-link/{user}', function () {

    if (request()->hasValidSignature()) {
        return "ok";
    } else {
        return "Failed";
    }

})->name('verify-link');


Route::get('/test', function () {
    //name(route برای کدوم روت)  2)expire  3)data(parameters exist)
    $url = URL::temporarySignedRoute('verify-link', now()->addSecond(25), ['user' => 1]);
    dd($url);

});



//-------------------- Models/User.php
vendor/laravel/framework/src/Illuminate/Contracts/Auth/MustVerifyEmail.php
vendor/laravel/framework/src/Illuminate/Auth/Listeners/SendEmailVerificationNotification.php

//-------------------- SendEmailVerificationNotification.php
public function handle(Registered $event)
{
    //اگر در دیتابیس ایمیل وریفای نشده بود + در مادل کاربر MustVerifyEmail بودش
    if ($event->user instanceof MustVerifyEmail && ! $event->user->hasVerifiedEmail()) {
        $event->user->sendEmailVerificationNotification();
    }
}


//-------------------- modules/Webamooz/User/Notifications/VerifyMail.php
namespace Webamooz\User\Notifications;


//-------------------- modules/Webamooz/User/Models/User.php
public function sendEmailVerificationNotification()
{
//  dd('test verify me');
    $this->notify(new VerifyMail());
}



























//---------------------------------------------------------------------- Lesson 34  (intervening in the mailing process)
1) .\vendor\bin\phpunit.bat --filter test_user_can_register


//-------------------- modules/Webamooz/User/Notifications/VerifyMail.php
class VerifyMail extends Notification
{
    use Queueable;

    public function __construct()
    {
        //
    }


    public function via($notifiable)
    {
//      return ['mail' , 'sms' , 'telegram
        return ['mail'];  //از چه طریقی نوتیفیکیشن یا اطلاع رسانی صورت بگیرد
    }

    public function toMail($notifiable)
    {
        $code = random_int(100000, 999999);//random integer
        //1)Key(اسم دیتا چی باش)  +  2)Value(چه مقداری بگیره)  +  3)Data(چه دیتایی ست کنه)  +  4)now()->addDay() پیش فرض یک روز
        cache()->set(
            'verify_code_', $notifiable,
            $code,
            now()->addDay());
//      cache()->get('verify_code_' . $notifiable);  //for show data -> در کش برای نمایش دیتا هم کلید ئ هم مقدار لازم مثل آرایه

        return (new MailMessage)
            ->line('The introduction to the notification.')
            ->line('Your code is : ' . $code)  //show code
            ->action('Notification Action', url('/'))
            ->line('Thank you for using our application!');
    }

    /*
    public function toSms()  //هم نام via که میسازیم نحوه اطلاع رسانی باید متود ساخته بشه to+name
    {

    }

    public function toTelegram()
    {

    }*/


    public function toArray($notifiable)
    {
        return [
            //
        ];
    }
}































//-------------------------------------------------------------------------- Lesson 35,36,37  (verifyEmail notification)
1) .\vendor\bin\phpunit.bat --filter test_user_can_register
2) php artisan make:mail VerifyCodeMail --markdown mails.verify-34-mail  //mails.verify-mail اسم پوشه ویو
3) app/Mail/VerifyCodeMail.php  ->  CUT  ->   modules/Webamooz/User/Mail/VerifyCodeMail.php
4) resources/views/mails/verify-mail.blade.php  ->  CUT  ->  modules/Webamooz/User/Resources/Views/mails/verify-mail.blade.php
*) php artisan vendor:publish -> laravel-mail(14)
 Copying directory [C:\Users\mahdi\Desktop\2023\laravel\laravelModule\vendor\laravel\framework\src\Illuminate\Mail\resources\views] to [C:\Users\mahdi\Desktop\2023\laravel\laravelModule\resources\views\vendor\mail]  DONE
*) تغییرات در خود vendor میدیم چون در گیت vendor نداریم و کسی که دانلود کنه متوجه تغییرات ما نمیشه باید publish کنیم
*) resources/views/vendor/mail/html/themes/default.css -> این تغییرات کلی که میخواهیم تو کل پروژه باش در ماژول نمیزاریم






//-------------------- modules/Webamooz/User/Models/User.php
public function sendEmailVerificationNotification()
{
    $this->notify(new VerifyMailNotification());  //بیا نوتیفیکیشن ارسال کن
}



//-------------------- modules/Webamooz/User/Mail/VerifyCodeMail.php
namespace Webamooz\User\Mail;

public $code, $firstName;

public function __construct($firstName, $code)
{
    $this->code = $code;
    $this->firstName = $firstName;  //firstName
}

public function envelope()
{
    return new Envelope(subject: 'وب آموز | کد فعال سازی',);
}

public function content()
{
    return new Content(markdown: 'User::mails.verify-mail',);
}

public function attachments()
{
    return [];
}



//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
public function boot()
{
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views' , 'User');  //1)path view  2)namespace User::Front/register.blade.php
}



//-------------------- modules/Webamooz/User/Notifications/VerifyMailNotifiable.php
public function via($notifiable)
{
//  return ['mail' , 'sms' , 'telegram'];
    return ['mail'];
}

public function toMail($notifiable)  //$notifiable -> auth()->user();
{
    $code = VerifyCodeService::generateRandomCode();
    VerifyCodeService::setCache($notifiable->id, $code);  //$notifiable -> auth()->user();
    return (new VerifyCodeMail($notifiable->name, $code))->to($notifiable->email);
}




//-------------------- modules/Webamooz/User/Services/VerifyCodeServices.php
public static function generateRandomCode()
{
    return random_int(100000, 999999);
}

public static function setCache($user_id, $code)
{
    //1)Key(اسم دیتا چی باش) + 2)Value(چه مقداری بگیره) + 3)Data(چه دیتایی ست کنه)  +  4)now()->addDay() پیش فرض یک روز
    cache()->set(
        'verify_code_' . $user_id,
        $code,
        now()->addHours(5));
}



//-------------------- routes/web.php
Route::get('/testMail', function () {
    return (new \Webamooz\User\Mail\VerifyCodeMail(auth()->user()->name,random_int(100000 , 999999)));  //داخل کلاس VerifyCodeMail ویو پاس دادیم
});





//-------------------- modules/Webamooz/User/Resources/Views/mails/verify-mail.blade.php
<x-mail::message>
# کد فعال سازی حساب {{ $firstName }} در وب آموز

کد از طرف سایت وب آموز برای شما ارسال شده. **در صورتی که در سایت ثبت نام نکرده اید** این ایمیل را نادیده بگیرید

<x-mail::panel>
کد فعال سازی شما : {{ $code }}
</x-mail::panel>

با تشکر از,<br>
{{ config('app.name') }}
</x-mail::message>




//-------------------- vendor/laravel/framework/src/Illuminate/Mail/resources/views/html/panel.blade.php  ->  ظاهر x-mail::panel
<table class="panel" width="100%" cellpadding="0" cellspacing="0" role="presentation">
<tr>
<td class="panel-content">
<table width="100%" cellpadding="0" cellspacing="0" role="presentation">
<tr>
<td class="panel-item">
{{ Illuminate\Mail\Markdown::parse($slot) }}
</td>
</tr>
</table>
</td>
</tr>
</table>



//-------------------- resources/views/vendor/mail/html/themes/default.css  ->  تغییرات صفحه نمایش ایمیل
body {
    direction: rtl;
    -webkit-text-size-adjust: none;
    background-color: #ffffff;
    color: #718096;
    height: 100%;
    line-height: 1.4;
    margin: 0;
    padding: 0;
    width: 100% !important;
}

text-align: center;  //هرجا بود تغییر میدیم به سمت راست

.panel {
    border-right-color: #2d3748;
    border-right-style: solid;
    border-right-width: 4px;
    /*border-right: #2d3748 solid 4px;*/
    margin: 21px 0;
}





































//---------------------------------------------------------------------------------- Lesson 38  (verifyCodeServiceTests)
1) php artisan make:request VerifyCodeRequest



//-------------------- modules/Webamooz/User/Tests/Unit/VerifyCodeServiceTest.php
<?php
namespace Webamooz\User\Tests\Unit;
use Tests\TestCase;
use Webamooz\User\Services\VerifyCodeServices;

class VerifyCodeServiceTest extends TestCase
{
    public function test_generate_code_is_6_digit()
    {
        $code = VerifyCodeService::generateRandomCode();
        //انتظار می رود حتما عدد باشسد  2)متن خطا سفارشی باشه
        $this->assertIsNumeric($code, "Generated Code Is Not Numeric");
        //انتظار می رود کوچیکتر یا مساوی باشد + 1)عدد برای تست ما  2)عددی که رکوست میش و ساخته میش  3)کد خطا سفارشی سازی شده
        $this->assertLessThanOrEqual(999999, $code, 'Generated Code Is Less Than 99999');
        //انتظار می رود بزرگتر یا مساوی باشد + 1)عدد برای تست ما  2)عددی که رکوست میش و ساخته میش  3)کد خطا سفارشی سازی شده
        $this->assertGreaterThanOrEqual(100000, $code, 'Generated Code Is Greater Than 100000');
    }

    public function test_verify_code_can_set_cache()
    {
        $code = VerifyCodeService::generateRandomCode();
        VerifyCodeService::setCache(1,$code);
        $this->assertEquals($code , cache()->get('verify_code_1'));  //مقدار کد جنیرت شده با مقدار ولیو درون کش که با کلیدش بدست میاریم باید یکی باشد
    }
}





//-------------------- resources/views/auth/verify.blade.php
@extends('auth.master')

@section('title' , 'تایید ایمیل')

@section('content')
    <div class="account">
        <form action="{{ route('verification.verify') }}" class="form" method="post">
            <a class="account-logo" href="{{ route('home') }}">
                <img src="img/weblogo.png" alt="">
            </a>
            <div class="card-header">
                <p class="activation-code-title">کد فرستاده شده به ایمیل  <span>Mohammadniko3@gmail.com</span> را وارد کنید</p>
            </div>
            <div class="form-content form-content1">
                <input name="verify_code" required class="activation-code-input" placeholder="فعال سازی">
                @error('verify_code')
                <span class="invalid-feedback" role="alert">
                    <strong>{{ $message }}</strong>
                </span>
                @enderror
                <br>
                <button class="btn i-t">تایید</button>

            </div>
            <div class="form-footer">
                <a href="{{ route('register') }}">صفحه ثبت نام</a>
            </div>
        </form>
    </div>
@endsection

@section('js')
    <script src="/js/jquery-3.4.1.min.js"></script>
    <script src="/js/activation-code.js"></script>
@endsection





//-------------------- resources/views/auth/master.blade.php
@yield('js')
</body>
</html>



//-------------------- modules/Webamooz/User/Routes/user_routes.php
Route::group(['namespace' => 'Webamooz\User\Http\Controllers', 'middleware' => 'web'], function ($router) {
    Auth::routes(['verify' => true]);  //default -> verify=false   دستی میایم فعال میکنیم
    Route::post('/email/verify', [VerificationController::class, 'verify'])->name('verification.verify');
});




//-------------------- modules/Webamooz/User/Http/Controllers/Auth/VerificationController.php
    public function verify(Request $request)
    {
        if (!VerifyCodeServices::check(auth()->id() , $request->verify_code)) {
            //چون یک خط برای قسمت اشتباه مینویسیم اینجا که قسمت صحیح بعدا خواستیم اضافه کنیم مشکلی پیش نیاد
            return back()->withErrors(['verify_code' => 'کد وارد دشده معتبر نمی باشد!']);
        }
        auth()->user()->markEmailAsVerified();  //بیا ایمیل این کاربر verify کن
        return redirect()->route('home');
    }
    /*$this->validate($request , [
   'verify_code' => 'required|numeric|min:6'  //|between:100000,999999
    ]);
    $code = VerifyCodeServices::get(auth()->id());  //auth()->id() -> id user

    if ($code == $request->verify_code) {  //verify_code -> input
        auth()->user()->markEmailAsVerified();  //email active
        VerifyCodeServices::delete(auth()->id());  //auth()->id() -> id user
        return redirect()->route('home');
    }*/



//-------------------- modules/Webamooz/User/Services/VerifyCodeServices.php
class VerifyCodeServices
{
    private static $min = 100000;
    private static $max = 999999;

    public static function generate()
    {
//      return 'test string';  //test is numeric
        return random_int(self::$min, self::$max);
    }

    public static function store($id, $code)
    {
        //1)Key(اسم دیتا چی باش)  +  2)Value(چه مقداری بگیره)  +  3)Data(چه دیتایی ست کنه)  +  4)now()->addDay() پیش فرض یک روز
        cache()->set(
            'verify_code_' . $id,  //user id
            $code,
            now()->addDay());
//      cache()->get('verify_code_' . $notifiable);  //for show data -> در کش برای نمایش دیتا هم کلید ئ هم مقدار لازم مثل آرایه
    }

    public static function get($id)
    {
        return cache()->get('verify_code_' . $id);
    }

    public static function delete($id)  //code expired -> بیا پاک کن کد که حالت یک بار مصرف باش نتونه باز استفاده کنه
    {
        return cache()->delete('verify_code_' . $id);
    }

    public static function getRule()
    {
        return 'required|numeric|between:' . self::$min . ',' . self::$max;  //min:6 -> حروف اول میگه کمتر از 6 نباش
    }


    public static function check($id, $code)
    {
        if (self::get($id) != $code) return false;  //Equal -> اگر کد برابر آیدی نبود یا برای آیدی نبود غلط برگردون

        self::delete($id);  //اگر برای کاربر بود کد یا برابر بود بیا پاک کن کد که حالت یک بار مصرف باش نتونه باز استفاده کنه
        return true;
    }
}




//-------------------- modules/Webamooz/User/Http/Requests/VerifyCodeRequest.php
    public function rules()
    {
        return [
            'verify_code' => VerifyCodeServices::getRule()
        ];
    }

    /*
     public function messages()
    {
        return [
            'verify_code.between' => 'اعداد باید بین 1000000 تا 999999 باشد'
        ];
    }
    */




//-------------------- lang/fa/validation.php
/*
|--------------------------------------------------------------------------
| Custom Validation Language Lines
|--------------------------------------------------------------------------
|
| Here you may specify custom validation messages for attributes using the
| convention "attribute.rule" to name the lines. This makes it quick to
| specify a specific custom language line for a given attribute rule.
|
*/

'custom' => [
    'verify_code' => [
        'between' => 'کد وارد شده معتبر نیست، لطفا دقت بفرمایید!'
    ]
],




































//------------------------------------------------------------------------------------------ Lesson 39,43  (verify user)
//-------------------- resources/views/auth/verify.blade.php
<br>
<button class="btn i-t">تایید</button>
<a href="#" onclick="
event.preventDefault();
document.getElementById('resend-code').onsubmit">ارسال مجدد کد فعال سازی</a>
</div>

<form id="resend-code" action="{{ route('verification.verify') }}" method="post">
    @csrf
</form>



//-------------------- modules/Webamooz/User/Http/Controllers/Auth/VerificationController.php
public function resend()
{
    dd('test resend');
}



//-------------------- modules/Webamooz/User/Tests/Feature/RegistrationTest.php
public function test_user_can_verify_account()
{
    $user = User::create([
       'name' => 'mahdi',
       'email' => 'mahdi@gmail.com',
       'password' => 'a!12ABC'
    ]);
    $code = VerifyCodeService::generateRandomCode();
    VerifyCodeService::setCache($user->id , $code);
    $getCodeCache = VerifyCodeService::getCache($user->id);

    auth()->loginUsingId($user->id);
    $this->assertAuthenticated();  //authentication user

    $this->post(route('verification.verify') , [
        'verify_code' => $getCodeCache,  //تایید کد برابر کد اسرالی بود در درون کش
    ]);

    $this->assertEquals(true , $user->fresh()->hasVerifiedEmail());
    //بیا ببین کاربر ایمیلش verify شده + fresh آخرین اطلاعات از دیتابیس میگیره میخونه و تازه سازی میکنه
}



















//-------------------------------------------------------------------------------------- Lesson 43 (Refactor User Route)
//-------------------- modules/Webamooz/User/Routes/user_routes.php
Route::group(['namespace' => 'Webamooz\User\Http\Controllers', 'middleware' => 'web'], function ($router) {
    //---------- Email verify
    Route::get('/email/verify', [VerificationController::class, 'show'])->name('verification.notice');  //نمایش صفحه اسال کد
    Route::post('/email/resend', [VerificationController::class, 'resend'])->name('verification.resend');  //ارسال کد به ایمیل
    Route::post('/email/verify', [VerificationController::class, 'verify'])->name('verification.verify');  //تایید شدن ایمیل

    //---------- Register
    Route::get('/register', [RegisterController::class, 'showRegistrationForm'])->name('register');
    Route::post('/register', [RegisterController::class, 'create'])->name('register');

    //---------- Login
    Route::get('/login', [LoginController::class, 'showLoginForm'])->name('login');
    Route::post('/login', [LoginController::class, 'login'])->name('login');

    //---------- Logout
    Route::post('/logout', [LoginController::class, 'logout'])->name('logout');

    //---------- reset password
    Route::get('/password/reset' , [ForgotPasswordController::class , 'showVerifyCodeForm'])->name('password.request');  //show form + send email
    Route::get('/password/email' , [ForgotPasswordController::class , 'sendResetLinkEmail'])->name('password.email');
    Route::post('/password/reset' , [ResetPasswordController::class , 'reset'])->name('password.update');
    Route::post('/password/reset' , [ResetPasswordController::class , 'showResetForm'])->name('password.reset');
});




//-------------------- modules/Webamooz/User/Http/Controllers/Auth/ForgotPasswordController.php
public function showVerifyCodeForm()
{
    return view('User::Front.passwords.email');
}


//-------------------- modules/Webamooz/User/Resources/Views/Front/login.blade.php
<button class="btn btn--login">ورود</button>

<label class="ui-checkbox">
    مرا بخاطر داشته باش
    <input type="checkbox" name="remember" id="remember" {{ old('remember') ? 'checked' : '' }}>
    <span class="checkmark"></span>
</label>

<div class="recover-password">
    <a href="{{ route('password.request') }}">بازیابی رمز عبور</a>
</div>






























//--------------------------------------------------------------------- Lesson 44,48 (Reset password part 1,2 ,refactor)
1) php artisan make:request SendResetPasswordVerifyCodeRequest




//-------------------- modules/Webamooz/User/Routes/user_routes.php
Route::get('/password/reset' , [ForgotPasswordController::class , 'showVerifyCodeForm'])->name('password.request');  //show form + send email
Route::get('/password/reset/send' , [ForgotPasswordController::class , 'sendVerifyCodeEmail'])->name('password.sendVerifyCodeEmail');
Route::post('/password/reset/check_verify_code' , [ForgotPasswordController::class , 'checkVerifyCode'])
    ->name('password.checkVerifyCode')->middleware('throttle:5,1');  //middleware('throttle:(numberRequest چند بار درخواست میتونه بده),(minutes محاسبه درخواست ها در دقیقه)')

Route::get('/password/change' , [ResetPasswordController::class , 'showResetForm'])
    ->name('password.showResetForm')->middleware('auth');
Route::post('/password/change' , [ResetPasswordController::class , 'reset'])->name('password.update');




//-------------------- modules/Webamooz/User/Http/Requests/SendResetPasswordVerifyCodeRequest.php
'email' => 'required|email'



//-------------------- modules/Webamooz/User/Notifications/ResetPasswordRequestNotification.php
public function via($notifiable)
{
    return ['mail'];
}

public function toMail($notifiable)  //$notifiable -> auth()->user();
{
    $code = VerifyCodeService::generateRandomCode();
    VerifyCodeService::setCache($notifiable->id, $code , 120);  //$notifiable -> auth()->user();
    return (new ResetPasswordRequestMail($notifiable->name, $code))->to($notifiable->email);
}




//-------------------- modules/Webamooz/User/Mail/ResetPasswordRequestMail.php
public $code, $firstName;

public function __construct($firstName, $code)
{
    $this->code = $code;
    $this->firstName = $firstName;  //firstName
}

public function envelope()
{
    return new Envelope(subject: 'وب آموز | بازیابی رمز عبور',);
}

public function content()
{
    return new Content(markdown: 'User::mails.reset-password-verify-code',);
}




//-------------------- modules/Webamooz/User/Resources/Views/mails/reset-password-verify-code.blade.php
<x-mail::message>
# کد بازیابی رمز عبور حساب{{ $firstName }} در وب آموز

این ایمیل به درخواست شما جهت بازیابی رمز عبور در سایت وب آموز برای شما ارسال شده. **در صورتی که این درخواست توسط شما انجام نشده** این ایمیل را نادیده بگیرید

<x-mail::panel>
کد بازیابی رمز عبور شما : {{ $code }}
</x-mail::panel>

با تشکر از,<br>
{{ config('app.name') }}
</x-mail::message>





//-------------------- modules/Webamooz/User/Models/User.php
public function sendResetPasswordRequestNotification()
{
    $this->notify(new ResetPasswordRequestNotification());
}





//-------------------- modules/Webamooz/User/Http/Controllers/Auth/ForgotPasswordController.php
public function sendVerifyCodeEmail(Request $request)
{
    $user = (new UserRepository())->getByEmail($request->email);

    if ($user && !VerifyCodeService::hasCodeCache($user->id)) {  //اگر ایمیل کاربر وجود دات + کد درخواست بازیابی رمز عبور اگر وجود نداشت و نفرستاده بود
        $user->sendResetPasswordRequestNotification();  //send notification for verify code reset password
        return view('User::Front.passwords.enter-verify-code-form');

    }else {
        return back()->withErrors(['not_exit_email' => 'این ایمیل در دیتابیس وجود ندارد!']);
    }
}

public function checkVerifyCode(ResetPasswordVerifyCodeRequest $request)
{
    $user = resolve(UserRepository::class)->getByEmail($request->input('email'));  //resolve(name::class) === (new object())

    if ($user == null || !VerifyCodeService::checkVerifyCode($user->id, $request->verify_code)) {
        return back()->withErrors(['verify_code' => 'کد وارد شده معتبر نمی باشد!']);
    }

    auth()->loginUsingId($user->id);
    return redirect()->route('password.showResetForm');
}



//-------------------- modules/Webamooz/User/Repositories/UserRepository.php
public function getByEmail($email)
{
    return User::query()->whereEmail($email)->first();
}




//-------------------- modules/Webamooz/User/Services/VerifyCodeService.php
private static $min = 100000;
private static $max = 999999;
private static $prefix = 'verify_code_';

public static function generateRandomCode()
{
    return random_int(self::$min, self::$max);  //get number code dynamic
}

public static function setCache($user_id, $code, $time)
{
    //1)Key(اسم دیتا چی باش) + 2)Value(چه مقداری بگیره) + 3)Data(چه دیتایی ست کنه)  +  4)now()->addDay() پیش فرض یک روز
    cache()->set(self::$prefix . $user_id, $code, $time);
}

public static function getCache($user_id)
{
    return cache()->get(self::$prefix . $user_id);
}

public static function hasCodeCache($user_id)
{
    return cache()->has(self::$prefix . $user_id);  //check has ,cache by key
}




//-------------------- modules/Webamooz/User/Notifications/VerifyMailNotification.php
VerifyCodeService::setCache($notifiable->id, $code , now()->addDay());



//-------------------- modules/Webamooz/User/Notifications/ResetPasswordRequestNotification.php
return [
    'verify_code' => VerifyCodeService::getRule(),
    'email' => 'required|email'
];







//-------------------- modules/Webamooz/User/Resources/Views/Front/passwords/reset.blade.php
<form method="POST" action="{{ route('password.update') }}" class="form">
    <a class="account-logo" href="/">
        <img src="/img/weblogo.png" alt="">
    </a>
    @csrf
    {{--<input type="hidden" name="token" value="{{ $token }}">--}}
    <span> نام : {{ auth()->user()->name }}</span>

    <input id="password" type="password" class="txt txt-l @error('password') is-invalid @enderror"
           placeholder="رمز عبور جدید *" name="password" required autocomplete="new-password">

    <input id="password-confirm" type="password" class="txt txt-l @error('password') is-invalid @enderror"
           placeholder="تایید رمز عبور جدید *" name="password_confirmation" required autocomplete="new-password">
    @error('password')
    <span class="invalid-feedback" role="alert">
        <strong>{{ $message }}</strong>
    </span>
    @enderror




//-------------------- modules/Webamooz/User/Http/Controllers/Auth/ResetPasswordController.php
public function reset(ChangePasswordRequest $request)
{
    UserService::changePassword(auth()->user(), $request->input('password'));
    return to_route('home');
}




//-------------------- modules/Webamooz/User/Services/UserService.php
public static function changePassword($user, $newPassword)
{
    $user->password = bcrypt($newPassword);
    $user->save();
}




//-------------------- modules/Webamooz/User/Http/Requests/ChangePasswordRequest.php
public function authorize()
{
    return auth()->check() == true; //اگر کسی لاگین کرده میتونه دسترسی داشته باش وگرنه نمیتونه کاری بکنه + وگرنه فالس
}

public function rules()
{
    return [
        'password' => ['required', 'confirmed', new ValidPassword()],
    ];
}

































//----------------------------------------------------------------------------------- Lesson 49 (Reset password testing)
//-------------------- modules/Webamooz/User/Tests/Feature/ResetPasswordTest.php
public function test_user_can_see_reset_password_request_form()
{
    $response = $this->get(route('password.request'))->assertOk();
//  $response->assertOk();
}

public function test_user_can_see_enter_verify_code_form_by_correct_email()
{
    $user = User::create([
        'name' => 'mahdi',
        'email' => 'mahdi@gmail.com',
        'password' => '1Aas@31',
    ]);
    $this->call('get', route('password.sendVerifyCodeEmail'), ['email' => $user->email])
        ->assertOk();
}

public function test_user_can_not_see_enter_verify_code_form_by_wrong_email()
{
    $user = User::create([
        'name' => 'mahdi',
        'email' => 'mahdi@gmail.com',
        'password' => '1Aas@31',
    ]);
    $this->call('get', route('password.sendVerifyCodeEmail'), ['email' => 'testNotExist@gmail.com']) //email faild -> redirect
      ->assertRedirect();
//    ->assertStatus(302);
}

public function test_user_banned_after_6_attempt_to_reset_password()  //بیشتر از پنج بار نوشت در یک دقیقه باید بن بشه
{
    for ($i =0; $i < 5; $i++){
        //['verify_code' , 'email' => 'mahdi@gmail.com'] -> input(name) -> text(verify_code) + hidden(email->request()->email)
        $this->post(route('password.checkVerifyCode') , ['verify_code' , 'email' => 'mahdi@gmail.com'])
        ->assertStatus(302);
    }
    $this->post(route('password.checkVerifyCode') , ['verify_code' , 'email' => 'mahdi@gmail.com'])
        ->assertStatus(429);  //status 429 -> بیش از حد تلاش کردیم
}




























//--------------------------------------------------------------------------------------------- Lesson 50,51 (Dashboard)
1) composer du + composer dump-autoload
2) php artisan make:controller DashboardController
3) Route::group(['namespace' => 'Webamooz\Dashboard\Http\Controllers', 'middleware' => ['web', 'auth', 'verified']], function ($router) {




//-------------------- composer.json
"Webamooz\\Dashboard\\": "modules/Webamooz/Dashboard/",



//-------------------- modules/Webamooz/Dashboard/Providers/DashboardServiceProvider.php
public function boot()
{
    $this->loadRoutesFrom(__DIR__ . '/../Routes/dashboard_route.php');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Dashboard');
}



//-------------------- config/app.php
\Webamooz\User\Providers\UserServiceProvider::class,
\Webamooz\Dashboard\Providers\DashboardServiceProvider::class,




//-------------------- modules/Webamooz/Dashboard/Routes/dashboard_route.php
Route::group(['namespace' => 'Webamooz\Dashboard\Http\Controllers', 'middleware' => ['web', 'auth', 'verified']], function ($router) {
    $router->get('/home', [DashboardController::class, 'home'])->name('home');
});




//-------------------- modules/Webamooz/Dashboard/Http/Controllers/DashboardController.php
public function __construct()
{
    $this->middleware(['auth', 'verified']);
}

public function home()
{
    $title = 'پنل مدیریت';
    return view('Dashboard::index', ['title' => $title]);
}




//-------------------- modules/Webamooz/Dashboard/Resources/Views/master.blade.php
<!DOCTYPE html>
<html lang="en">
@includeIf('Dashboard::layouts.head')
<body>
@include('Dashboard::layouts.sidebar')

<div class="content">
    @includeIf('Dashboard::layouts.header')
    @includeIf('Dashboard::layouts.breadcrumb')

    {{----- Dynamic Content page -----}}
    <div class="main-content">
        @yield('content')
    </div>

</div>
</body>
@include('Dashboard::layouts.footer')
</html>




//-------------------- modules/Webamooz/Dashboard/Resources/Views/index.blade.php
@extends('Dashboard::master')
@section('title' , 'پنل ادمین')

@section('content')
    <div class="row no-gutters font-size-13 margin-bottom-10"></div>
    <div class="row no-gutters font-size-13 margin-bottom-10"></div>
    <div class="row no-gutters font-size-13 margin-bottom-10"></div>
    <div class="row bg-white no-gutters font-size-13"></div>
@endsection





//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/head.blade.php
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0;">
    <title>@yield('title')</title>
    <link rel="stylesheet" href="{{ asset('panel/css/style.css') }}">
    <link rel="stylesheet" href="{{ asset('panel/css/responsive_991.css') }}" media="(max-width:991px)">
    <link rel="stylesheet" href="{{ asset('panel/css/responsive_768.css') }}" media="(max-width:768px)">
    <link rel="stylesheet" href="{{ asset('panel/css/font.css') }}">
    @yield('css')
</head>





//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/sidebar.blade.php
<div class="sidebar__nav border-top border-left  ">
    <span class="bars d-none padding-0-18"></span>
    <a class="header__logo  d-none" href="https://webamooz.net"></a>
    <div class="profile__info border cursor-pointer text-center">
        <div class="avatar__img"><img src="{{ asset('panel/img/pro.jpg') }}" class="avatar___img">
            <input type="file" accept="image/*" class="hidden avatar-img__input">
            <div class="v-dialog__container" style="display: block;"></div>
            <div class="box__camera default__avatar"></div>
        </div>
        <span class="profile__name">کاربر : محمد نیکو</span>
    </div>

    <ul>
        <li class="item-li i-dashboard is-active"><a href="index.html">پیشخوان</a></li>
        <li class="item-li i-courses "><a href="courses.html">دوره ها</a></li>
        <li class="item-li i-users"><a href="users.html"> کاربران</a></li>
        <li class="item-li i-categories"><a href="categories.html">دسته بندی ها</a></li>
        <li class="item-li i-slideshow"><a href="slideshow.html">اسلایدشو</a></li>
        <li class="item-li i-banners"><a href="banners.html">بنر ها</a></li>
        <li class="item-li i-articles"><a href="articles.html">مقالات</a></li>
        <li class="item-li i-ads"><a href="ads.html">تبلیغات</a></li>
        <li class="item-li i-comments"><a href="comments.html"> نظرات</a></li>
        <li class="item-li i-tickets"><a href="tickets.html"> تیکت ها</a></li>
        <li class="item-li i-discounts"><a href="discounts.html">تخفیف ها</a></li>
        <li class="item-li i-transactions"><a href="transactions.html">تراکنش ها</a></li>
        <li class="item-li i-checkouts"><a href="checkouts.html">تسویه حساب ها</a></li>
        <li class="item-li i-checkout__request "><a href="checkout-request.html">درخواست تسویه </a></li>
        <li class="item-li i-my__purchases"><a href="mypurchases.html">خرید های من</a></li>
        <li class="item-li i-my__peyments"><a href="mypeyments.html">پرداخت های من</a></li>
        <li class="item-li i-notification__management"><a href="notification-management.html">مدیریت اطلاع رسانی</a>
        </li>
        <li class="item-li i-user__inforamtion"><a href="user-information.html">اطلاعات کاربری</a></li>
    </ul>

</div>




//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/header.blade.php
<div class="header d-flex item-center bg-white width-100 border-bottom padding-12-30">
    <div class="header__right d-flex flex-grow-1 item-center">
        <span class="bars"></span>
        <a class="header__logo" href="https://webamooz.net"></a>
    </div>
    <div class="header__left d-flex flex-end item-center margin-top-2">
        <span class="account-balance font-size-12">موجودی : 2500,000 تومان</span>
        <div class="notification margin-15">
            <a class="notification__icon"></a>
            <div class="dropdown__notification">
                <div class="content__notification">
                    <span class="font-size-13">موردی برای نمایش وجود ندارد</span>
                </div>
            </div>
        </div>
        <a href="{{ route('logout') }}" class="logout" title="خروج"
           onclick="event.preventDefault();document.getElementById('logout-form').submit();"></a>
        <form id="logout-form" action="{{ route('logout') }}" method="POST" class="d-none">
            @csrf
        </form>
    </div>
</div>



//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/breadcrumb.blade.php
<div class="breadcrumb">
    <ul>
        <li><a href="" title="{{ $title }}">{{ $title }}</a></li>
    </ul>
</div>



//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/footer.blade.php
<script src="{{ asset('panel/js/jquery-3.4.1.min.js') }}"></script>
<script src="{{ asset('panel/js/js.js') }}"></script>
<script src="{{ asset('panel/js/tagsInput.js') }}"></script>
@yield('js')

































//--------------------------------------------------------------------------------- Lesson 52,56 (Category, create,edit)
*) //onDelete('SET NULL') -> هر وقت دسته پدر مثل موبایل حذف شد، بیاد دسته سامسونگ که آیدی پدر داره که الان حذف شده بکنه نال که به مشکلی بر نخوره
*) $table->foreign('parent_id')->references('id')->on('categories')->onDelete('SET NULL')->onUpdate('cascade');
1) composer du + composer dump-autoload
2) php artisan make:controller CategoryController
3) php artisan make:migration create_categoies_table --create=categories
4) php artisan make:request CategoryRequest
5) CategoryRepositories(Database)  +  CategoryResponses(response()->json())




//-------------------- composer.json
"Webamooz\\Category\\": "modules/Webamooz/Category/",


//-------------------- config/app.php
\Webamooz\Category\Providers\CategoryServiceProvider::class,



//-------------------- modules/Webamooz/Category/Providers/CategoryServiceProvider.php
public function boot()
{
    $this->loadRoutesFrom(__DIR__ . '/../Routes/category_route.php');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Category');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
}


//-------------------- modules/Webamooz/Category/Routes/category_route.php
Route::group(['namespace' => 'Webamooz\Category\Http\Controllers', 'middleware' => ['web', 'auth', 'verified']], function ($router) {
    $router->resource('/categories', CategoryController::class);
});



//-------------------- modules/Webamooz/Category/Database/Migrations/2024_05_18_200046_create_categoies_table.php
public function up()
{
    Schema::create('categories', function (Blueprint $table) {
        $table->id();
        $table->string('title', 150);
        $table->string('slug')->unique();
        $table->unsignedBigInteger('parent_id')->nullable();  //->unsigned() -> عدد منفی نباید باشد
        //onDelete('SET NULL') -> هر وقت دسته پدر مثل موبایل حذف شد، بیاد دسته سامسونگ که آیدی پدر داره که الان حذف شده بکنه نال که به مشکلی بر نخوره
        $table->foreign('parent_id')->references('id')->on('categories')->onDelete('SET NULL')->onUpdate('cascade');
        $table->timestamps();
    });
}




//-------------------- modules/Webamooz/Category/Models/Category.php
class Category extends Model
{
    use HasFactory;

    protected $fillable = [
        'title',
        'slug',
        'parent_id',
    ];

    //---------- Relationship
    public function getParentAttribute()  //get + Name + Attribute -> با صدا زدن نام که میدیم دسترسی داریم به عملیاتی که مینویسیم
    {
        //اگر دسته پدر نالب بود بنویس ندارد اگر نبود بیا عنوان دسته پدرش نمایش بده
        return (is_null($this->parent_id)) ? 'ندارد' : $this->parentCategory->title;
    }

    public function parentCategory()
    {
        return $this->belongsTo(Category::class, 'parent_id');
    }

    public function subCategories()
    {
        return $this->hasMany(Category::class, 'parent_id');
    }

}






//-------------------- modules/Webamooz/Category/Http/Controllers/CategoryController.php
public $categoryRepository;

public function __construct(CategoryRepository $categoryRepository)
{
    $this->categoryRepository = $categoryRepository;  //چون قرار درون تمامی متود ها استفاده بشه برای جلوگیری از تگرار و کد نویسی تمیز درون کانستاکتور مینویسیم که صدا بزنه تو کل پرويه
}

public function index()
{
    $title = "لیست دسته بندی ها";
    $categories = $this->categoryRepository->all();  //use call with laravel
    return view('Category::index', compact('categories', 'title'));
}

public function create()
{

}

public function store(CategoryRequest $request)
{
    $this->categoryRepository->store($request);
    return back()/*->with(['message' => 'دسته بندی با موفقیت ایجاد شد'])*/ ;
}


public function edit($category_id)
{
    $title = 'ویرایش دسته بندی';
    $category = $this->categoryRepository->getById($category_id);
    $categories = $this->categoryRepository->EditedExceptById($category_id);
    return view('Category::edit', compact('category', 'categories', 'title'));
}

public function update(CategoryUpdateRequest $request, $category_id)
{
    $this->categoryRepository->update($category_id, $request);;
    return to_route('categories.index');
}

public function destroy($category_d)
{
    $this->categoryRepository->delete($category_d);
    return AjaxResponses::successResponse();
}








//-------------------- modules/Webamooz/Category/Resources/Views/index.blade.php
@extends('Dashboard::master')
@section('title' , 'لیست دسته بندی ها')

@section('content')

<div class="row no-gutters">
    <div class="col-8 margin-left-10 margin-bottom-15 border-radius-3">
        <p class="box__title">دسته بندی ها</p>
        <div class="table__box">
            <table class="table">
                <thead role="rowgroup">
                <tr role="row" class="title-row">
                    <th>شناسه</th>
                    <th>نام دسته بندی</th>
                    <th>نام انگلیسی دسته بندی</th>
                    <th>دسته پدر</th>
                    <th>عملیات</th>
                </tr>
                </thead>
                <tbody>
                @foreach ($categories as $category)
                    <tr role="row" class="">
                        <td><a href="">{{ $category->id }}</a></td>
                        <td><a href="">{{ $category->title }}</a></td>
                        <td>{{ $category->slug }}</td>
                        <td>{{ $category->parent }}</td>  {{-- use Model -> getParentAttribute --}}
                        <td>
                            <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
                            onclick="event.preventDefault();deleteItem(event, '{{ route('categories.destroy' ,$category->id) }}')"></a>
                            <a href="" target="_blank" class="item-eye mlg-15 btn_warning_customize" title="مشاهده"></a>
                            <a href="{{ route('categories.edit' , $category->id) }}" class="item-edit btn_info_customize" title="ویرایش"></a>
                        </td>
                    </tr>
                @endforeach
                </tbody>
            </table>
        </div>
    </div>
    <div class="col-4 bg-white">
        @includeIf('Category::create')
    </div>
</div>

@endsection

@section('css')
    <link rel="stylesheet" href="{{ asset('/css/jquery.toast.min.css') }}">
@endsection


@section('js')
    <script src="{{ asset('/js/jquery.toast.min.js') }}"></script>
    <script>
        function deleteItem(event, route){
            if (confirm('آیا از حذف دسته بندی مطعن هستید!')){  //confirm ok or true -> condition
                //1)url , 2)parameters(@ method('delete') , @ csrf)
                $.post(route, {_token: "{{ csrf_token() }}", _method: "delete"})
                    .done(function (response) {  //اگر درست بود این اجرا میکنه + خود جی کوری شرط ایف درونش داره + response get jquery
                        //event.target(tag a) + closest('tr' اگر تگ لینک بزاریک فقط دکمه حذف) نزدیک ترین تی آر بگیر + remove() حذف بکن
                        event.target.closest('tr').remove();
                        $.toast({
                            heading: response.status,
                            text: response.message,
                            showHideTransition: 'slide',
                            icon: 'success'
                        })
                    })

                    .fail(function (response){  //اگر غلط باش این مقدار اجرا میکنه + خود جی کوری شرط ایف درونش داره + response get jquery

                    })
            }
        }
    </script>
@endsection





//-------------------- modules/Webamooz/Category/Resources/Views/create.blade.php
<form action="{{ route('categories.store') }}" method="post" class="padding-30">
    @csrf
    <input type="text" name="title" placeholder="نام دسته بندی" class="text" required>
    @error('title')
        <p class="text-danger_custom">{{ $message }}</p>
    @enderror
    <input type="text" name="slug" placeholder="نام انگلیسی دسته بندی" class="text" required>
    @error('slug')
    <p class="text-danger_custom">{{ $message }}</p>
    @enderror
    <p class="box__title margin-bottom-15">انتخاب دسته پدر</p>
        <select name="parent_id" id="parent_id">
                <option value="">ندارد</option>  {{-- value="" -> Null --}}
            @foreach ($categories as $category)
                <option value="{{ $category->id }}">{{ $category->title }}</option>
            @endforeach
        </select>
    <button type="submit" class="btn btn-webamooz_net">اضافه کردن</button>
</form>






//-------------------- modules/Webamooz/Category/Resources/Views/edit.blade.php
<form action="{{ route('categories.update' , $category->id) }}" method="post" class="padding-30">
    @csrf
    @method('PATCH')

    <input type="text" name="title" placeholder="نام دسته بندی" class="text" value="{{ $category->title }}" required>
    @error('title')
    <p class="text-danger_custom">{{ $message }}</p>
    @enderror
    <input type="text" name="slug" placeholder="نام انگلیسی دسته بندی" class="text" value="{{ $category->slug }}" required>
    @error('slug')
    <p class="text-danger_custom">{{ $message }}</p>
    @enderror
    <p class="box__title margin-bottom-15">انتخاب دسته پدر</p>
    <select name="parent_id" id="parent_id">
        <option value="">ندارد</option>  {{-- value="" -> Null --}}
        @foreach ($categories as $categoryItem)
            <option value="{{ $categoryItem->id }}"
                    @if($categoryItem->id == $category->parent_id) selected @endif>{{ $categoryItem->title }}</option>
        @endforeach
    </select>
    <button type="submit" class="btn btn-webamooz_net">به روزرسانی</button>
</form>





//-------------------- modules/Webamooz/Category/Repositories/CategoryRepository.php
public function all()
{
    return Category::all();
}

public function store($values)
{
    Category::create([
        'title' => $values->title,
        'slug' => $values->slug,
        'parent_id' => $values->parent_id,
    ]);
}

public function getById($category_id)
{
    return Category::query()->findOrFail($category_id);
}

public function EditedExceptById($category_id)
{
    return $this->all()->filter(function ($item) use ($category_id) {  //use -> مقدار پاس میدیم درون این فانکشن که دسترسی داشته باشیم
        return $item->id != $category_id;  //با استفاده از متودی که کل دیتا گرفتیم فیلتر میزنیم اون آیدی ک ههست نمایش نده
    });
//  return Category::where('id', '!=', $category_id)->get();  //این عنوان دسته بندی که ویرایش میکنیم نمایش نده
}

public function update($category_id, $values)
{
    Category::query()->where('id', $category_id)->update([
        'title' => $values->input('title'),
        'slug' => $values->input('slug'),
        'parent_id' => $values->input('parent_id')
    ]);
}

public function delete($category_id)
{
    return Category::where('id' , $category_id)->delete();
}






//-------------------- modules/Webamooz/Category/Responses/AjaxResponses.php
public static function successResponse()
{
    return response()->json([
        'status' => 'موفقیت آمیز',
        'message' => 'دسته بندی با موفقیت حذف شد'
    ], Response::HTTP_OK);  //use ajax
}


//-------------------- modules/Webamooz/Category/Http/Requests/CategoryRequest.php
public function authorize()
{
    return auth()->check() == true; //اگر کسی لاگین کرده میتونه دسترسی داشته باش وگرنه نمیتونه کاری بکنه + وگرنه فالس
}

public function rules()
{
    return [
        'title' => ['required', 'string', 'max:150'],
        'slug' => ['required', 'string', 'unique:categories,slug'],
        'parent_id' => ['nullable', 'numeric', 'exists:categories,id']
    ];
}



//-------------------- modules/Webamooz/Category/Http/Requests/CategoryUpdateRequest.php
return [
    'id' => ['required', 'numeric', 'exists:categories,id'],   //page edit -> input hidden value="{{ $category->id }}"
    'title' => ['required', 'string', 'max:150'],
    'slug' => ['required', 'string', 'unique:categories,slug,' . request()->id],
    'parent_id' => ['nullable', 'numeric', 'exists:categories,id']
];













































//----------------------------------------------------------------------------------------- Lesson 57 (category Testing)
1) $this->actingAs(User::factory()->create());
2) $this->actingAs($user);




//-------------------- phpunit.xml
<testsuite name="Feature">  <!-- Unit از چه نوع تستی فیچر یا یونیت -->
    <directory suffix="Test.php">./modules/Webamooz/Category/Tests/Feature</directory> <!-- ./modules/Webamooz/User/Tests/Feature آدرس -->
</testsuite>




//-------------------- modules/Webamooz/Category/Tests/Feature/CategoryTest.php
<?php
namespace Webamooz\Category\Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Str;
use Tests\TestCase;
use Webamooz\Category\Models\Category;
use Webamooz\User\Models\User;

class CategoryTest extends TestCase
{
    use WithFaker, RefreshDatabase;

    public function test_permitted_user_can_see_categories_panel()
    {
        $this->actingAsAdminCreate();  //create user auth
        $this->seed(RolePermissionTableSeeder::class);  //create permission + role
        auth()->user()->givePermissionTo('manage categories');
        $this->get(route('categories.index'))->assertOk();
    }

    public function test_normal_user_can_not_see_categories_panel()
    {
        $this->actingAsAdminCreate();
        $this->get(route('categories.index'))->assertStatus(403);
    }

    public function test_permitted_user_can_create_category()
    {
        $this->withoutExceptionHandling();  //show all exception
        $this->actingAsAdminCreate();  //user auth
        $this->seed(RolePermissionTableSeeder::class);
        auth()->user()->givePermissionTo('manage categories');
        $this->createCategory();
        $this->assertEquals(1, Category::all()->count());
    }

    public function test_permitted_user_can_update_category()
    {
        $newTitle = 'titleUpdated';
        $this->actingAsAdminCreate();
        $this->seed(RolePermissionTableSeeder::class);
        auth()->user()->givePermissionTo('manage categories');
        $this->createCategory();
        $this->assertEquals(1, Category::all()->count());
        $this->patch(route('categories.update', 1), ['title' => $newTitle, 'slug' => $this->faker->word]);
        $this->assertEquals(1, Category::whereTitle($newTitle)->count());
    }

    public function test_permitted_user_can_delete_category()
    {
        $this->actingAsAdminCreate();
        $this->seed(RolePermissionTableSeeder::class);
        auth()->user()->givePermissionTo('manage categories');

        $this->createCategory();
        $this->assertEquals(1, Category::all()->count());
        $this->delete(route('categories.destroy', 1))->assertOk();
    }

    private function actingAsAdminCreate()
    {
        $user = User::create([
            'name' => 'mahdi',
            'email' => 'mahdi@gmail.com',
            'mobile' => '9398187800',
            'email_verified_at' => now(),
            'password' => \Hash::make('12aBC!@'),
            'remember_token' => Str::random(10),
        ]);
        $this->actingAs($user);  //actingAs -> authentication + factory(User::class))->create() -> create user
    }

    private function createCategory()
    {
        $this->post(route('categories.store'), ['title' => $this->faker->title(), 'slug' => $this->faker->unique()->word()]);
    }


}
























//----------------------------------------------------------------------------------------- Lesson 58 (Sidebar Refactor)
1) $this->mergeConfigFrom(__DIR__ . '/../Config/sidebar.php', 'sidebar');  //config('sidebar'); دسترسی به کانفیگ با صدا زدن کلید
2) @foreach(config('sidebar.items') as $sidebarItem)
3) $this->app->booted(function () {  //بعد از این که بوت اجرا شد و تموم شد بیا این قسمت اجرا کن





//-------------------- modules/Webamooz/Dashboard/Config/sidebar.php
return [
    'items' => [
        'dashboard' => [],  //sort customize -> خودمون ترتبی لیست سایدبار مشخص کنیم
        'categories' => [],
    ]
];



//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/sidebar.blade.php
<ul>
    @foreach(config('sidebar.items') as $sidebarItem)
            <li class="item-li {{ $sidebarItem['icon'] }} @if($sidebarItem['url'] == request()->url()) is-active @endif ">
                <a href="{{ $sidebarItem['url'] }}">{{ $sidebarItem['title'] }}</a></li>
    @endforeach
</ul>



//-------------------- modules/Webamooz/Dashboard/Providers/DashboardServiceProvider.php
public function register()
{
    $this->loadRoutesFrom(__DIR__ . '/../Routes/dashboard_route.php');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Dashboard');
    $this->mergeConfigFrom(__DIR__ . '/../Config/sidebar.php', 'sidebar');  //config('sidebar'); دسترسی به کانفیگ با صدا زدن کلید
}

public function boot()
{
    $this->app->booted(function () {
        config()->set('sidebar.items.dashboard', [
            "icon" => "i-dashboard",
            "title" => "پیشخوان",
            "url" => route('home')
        ]);
    });
}



//-------------------- modules/Webamooz/Category/Providers/CategoryServiceProvider.php
public function register()
{
    $this->loadRoutesFrom(__DIR__ . '/../Routes/category_route.php');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Category');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
}

public function boot()
{
    config()->set('sidebar.items.categories', [
        "icon" => "i-categories",
        "title" => "دسته بندی ها",
        "url" => route('categories.index'),
    ]);
}






























//------------------------------------------------------------------------------------------------ Lesson 59 (breadcrum)
//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/breadcrumb.blade.php
<div class="breadcrumb">
    <ul>
        <li><a href="{{ route('home') }}" title="پیشخوان">پیشخوان</a></li>
        @yield('breadcrumb')  //مقدار پیشخوان همراه لینک و ثابت و صفحات دیگر بعد آن مقدار دهی می شود
    </ul>
</div>



//-------------------- modules/Webamooz/Category/Resources/Views/index.blade.php
@section('breadcrumb')
    <li><a href="#" title="دسته بندی ها">دسته بندی ها</a></li>
@endsection



//-------------------- modules/Webamooz/Category/Resources/Views/edit.blade.php
@section('breadcrumb')
    <li><a href="#" title="ویرایش دسته بندی">ویرایش دسته بندی</a></li>
@endsection






























//------------------------------------------------------------------------------ Lesson 60 (Introduction to permissions)
1) composer require spatie/laravel-permission
2) publish migration -> php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
3) php artisan optimize:clear + php artisan config:clear
4) php artisan migrate
5) auth()->user()->givePermissionTo('manage categories');  //tables -> model_has_permissions
6) can -> exit permission
7) $router->resource('/categories', CategoryController::class)->middleware('permission:manage categories');




//-------------------- routes/web.php
Route::get('/testPermission', function () {
    /*
     \Spatie\Permission\Models\Permission::create([  //table -> permissions
        'name' => 'manage categories'
    ]);
    */

//  auth()->user()->givePermissionTo('manage categories');  //tables -> model_has_permissions
//  return auth()->user()->permissions;  //show all permissions user
});




//-------------------- modules/Webamooz/User/Models/User.php
use HasRoles;  //user has role(Permission Spatie) + all supports relations(user+permissions)




//-------------------- app/Http/Kernel.php
protected $routeMiddleware = [
    'auth' => \App\Http\Middleware\Authenticate::class,
    ...
    'role' => \Spatie\Permission\Middleware\RoleMiddleware::class,
    'permission' => \Spatie\Permission\Middleware\PermissionMiddleware::class,
    'role_or_permission' => \Spatie\Permission\Middleware\RoleOrPermissionMiddleware::class,
];




//-------------------- modules/Webamooz/Category/Routes/category_route.php
Route::group(['namespace' => 'Webamooz\Category\Http\Controllers', 'middleware' => ['web', 'auth', 'verified']], function ($router) {
    $router->resource('/categories', CategoryController::class)->middleware('permission:manage categories');
});



//-------------------- modules/Webamooz/Category/Http/Controllers/CategoryController.php
public function index()
{
    if (!auth()->user()->can('manage categories')) {  //can -> exit permission
        dd('User can not permission manage categories');
    }
    $categories = $this->categoryRepository->all();  //use call with laravel
    return view('Category::index', compact('categories'));
}





























//------------------------------------------------------------------------------- Lesson 61,66 (RolePermissions modules)
1) php artisan make:controller RolePermissionController -r
2) $this->loadJsonTranslationsFrom(__DIR__ . '/../lang/fa.json');  //translation lang
3) php artisan make:request RoleRequest


//-------------------- composer.json
"Webamooz\\RolePermissions\\": "modules/Webamooz/RolePermissions/",




//-------------------- config/app.php
\Webamooz\RolePermissions\Providers\RolePermissionServiceProvider::class,




//-------------------- modules/Webamooz/RolePermissions/Routes/role_permissions_route.php
use Webamooz\RolePermissions\Http\Controllers\RolePermissionController;

Route::group(['namespace' => 'Webamooz\RolePermissions\Http\Controllers', 'middleware' => ['web', 'auth', 'verified']] , function ($router) {
    $router->resource('/role-permissions' , RolePermissionController::class)->middleware('permission:manage role_permissions');
});




//-------------------- modules/Webamooz/RolePermissions/Providers/RolePermissionServiceProvider.php
public function register()
{
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views', 'RolePermissions');
    $this->loadRoutesFrom(__DIR__ . '/../Routes/role_permissions_route.php');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang');  //translation lang
}

public function boot()
{
    $this->app->booted(function () {
        config()->set('sidebar.items.role-permissions', [
            "icon" => "i-role-permissions",
            "title" => "نقش های کاربر",
            "url" => route('role-permissions.index'),
        ]);
    });
}






//-------------------- modules/Webamooz/RolePermissions/Http/Controllers/RolePermissionController.php
private $roleRepository;
private $permissionRepository;

public function __construct(RoleRepository $roleRepository, PermissionRepository $permissionRepository)
{
    $this->roleRepository = $roleRepository;
    $this->permissionRepository = $permissionRepository;
}

public function index()
{
    $roles = $this->roleRepository->all();
    $permissions = $this->permissionRepository->all();
    return view('RolePermissions::index', compact('roles', 'permissions'));
}

public function create()
{
    //
}

public function store(RoleRequest $request)
{
    return $this->roleRepository->store($request);
}

public function edit($role_id)
{
    $role = $this->roleRepository->getById($role_id);
    $permissions = $this->permissionRepository->all();
    return view('RolePermissions::edit', compact('role', 'permissions'));
}

public function update(RoleUpdateRequest $request, $role_id)
{
    $this->roleRepository->update($role_id, $request);
    return to_route('role-permissions.index');
}

public function destroy($role_id)
{
    $this->roleRepository->destroy($role_id);
    return AjaxResponses::successResponse();
}





//-------------------- modules/Webamooz/RolePermissions/Resources/Views/index.blade.php
@extends('Dashboard::master')

@section('title' , 'لیست نقش کاربران')
@section('breadcrumb')
    <li><a href="#" title="نقش های کاربر">نقش های کاربر</a></li>
@endsection

@section('content')

<div class="row no-gutters">
    <div class="col-8 margin-left-10 margin-bottom-15 border-radius-3">
        <p class="box__title">نقش کاربران</p>
        <div class="table__box">
            <table class="table">
                <thead role="rowgroup">
                <tr role="row" class="title-row">
                    <th>شناسه</th>
                    <th>نقش کاربر</th>
                    <th>مجوز ها</th>
                    <th>عملیات</th>
                </tr>
                </thead>
                <tbody>
                @foreach ($roles as $role)
                    <tr role="row" class="">
                        <td><a href="">{{ $role->id }}</a></td>
                        <td><a href="">{{ $role->name }}</a></td>
                        <td>
                            <ul>
                                @foreach ($role->permissions as $permission)
                                    <li>@lang($permission->name)</li>
                                @endforeach
                            </ul>
                        </td>
                        <td>
                            <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
                            onclick="deleteItem(event, '{{ route('role-permissions.destroy' ,$role->id) }}')"></a>
                            <a href="{{ route('role-permissions.edit' , $role->id) }}" class="item-edit btn_info_customize" title="ویرایش"></a>
                        </td>
                    </tr>
                @endforeach
                </tbody>
            </table>
        </div>
    </div>
    <div class="col-4 bg-white">
        @includeIf('RolePermissions::create')
    </div>
</div>





//-------------------- modules/Webamooz/RolePermissions/Resources/Views/create.blade.php
<form action="{{ route('role-permissions.store') }}" method="post" class="padding-30">
    @csrf
    <input type="text" name="name" placeholder="نام نقش" class="text" value="{{ old('name') }}" required>
    @error('name')
    <p class="text-danger_custom">{{ $message }}</p>
    @enderror
    <p class="box__title margin-bottom-15">انتخاب مجوز ها</p>
    @foreach($permissions as $permission)
        <label class="ui-checkbox pt-4">
            {{-- key(inputName) => value(inputValue) --}}
            <input type="checkbox" name="permissions[{{ $permission->name }}]" data-id="{{ $permission->id }}" value="{{ $permission->name }}"
                   @if(is_array(old('permissions')) && array_key_exists($permission->name , old('permissions'))) checked @endif>
            <span class="checkmark"></span>
            @lang($permission->name)  {{--  @lang($permission->name) === {{ __($permission->name) }}  --}}
        </label>
    @endforeach




//-------------------- modules/Webamooz/RolePermissions/Resources/Views/edit.blade.php
@extends('Dashboard::master')

@section('title' , 'ویرایش نقش کاربری')
@section('breadcrumb')
    <li><a href="{{ route('role-permissions.index') }}" title="نقش کاربری">نقش کاربری</a></li>
    <li><a href="#" title="ویرایش نقش کاربر">ویرایش نقش کاربر</a></li>
@endsection

@section('content')
    <div class="row no-gutters">
        <div class="col-4 bg-white">
            <p class="box__title">ویرایش نقش کاربری</p>

            <form action="{{ route('role-permissions.update', $role->id) }}" method="post" class="padding-30">
                @csrf
                @method('PATCH')

                <input type="hidden" name="id" value="{{ $role->id }}">  //Validation updateRole


                <input type="text" name="name" placeholder="نام نقش" class="text" value="{{ $role->name }}" required>
                @error('name')
                <p class="text-danger_custom">{{ $message }}</p>
                @enderror
                <p class="box__title margin-bottom-15">انتخاب مجوز ها</p>
                @foreach($permissions as $permission)
                    <label class="ui-checkbox pt-4">
                        {{-- key(inputName) => value(inputValue) --}}
                        <input type="checkbox" name="permissions[{{ $permission->name }}]" data-id="{{ $permission->id }}"
                               value="{{ $permission->name }}" @if($role->hasPermissionTo($permission->name)) checked @endif>
                        <span class="checkmark"></span>
                        @lang($permission->name)  {{--  @lang($permission->name) === {{ __($permission->name) }}  --}}
                    </label>
                @endforeach
                @error('permissions')
                <p class="text-danger_custom">{{ $message }}</p>
                @enderror

                <button type="submit" class="btn btn-webamooz_net mt-10">به روزرسانی</button>
            </form>

        </div>
    </div>
@endsection





//-------------------- modules/Webamooz/RolePermissions/Lang/fa.json
{
    "manage categories" : "میدیریت دسته بندی ها",
    "manage role_permissions" : "مدیریت نقش های کاربری"
}




//-------------------- modules/Webamooz/RolePermissions/Http/Requests/RoleRequest.php
'name' => ['required', 'string', 'min:3', 'max:200', 'unique:roles,name'],
'permissions' => ['required', 'array', 'min:1']




//-------------------- modules/Webamooz/RolePermissions/Http/Requests/RoleUpdateRequest.php
return [
    "id" => ['required', 'numeric','exists:roles,id'],  //page edit -> input hidden value="{{ $role->id }}"
    'name' => ['required', 'string', 'min:3', 'max:200', 'unique:roles,name,' . request()->id],
    'permissions' => ['required', 'array', 'min:1']
];




//-------------------- modules/Webamooz/RolePermissions/Repositories/RoleRepository.php
public function all()
{
    return Role::all();
}

public function store($request)
{
    return Role::create([
        'name' => $request->name,
    ])->syncPermissions($request->permissions);
}

public function getById($role_id)
{
    return Role::findOrFail($role_id);
}

public function update($role_id, $request)
{
    $role = $this->getById($role_id);
    $role->update([
        'name' => $request->name
    ]);
    return $role->syncPermissions($request->permissions);
}

public function destroy($role_id)
{
    return Role::where('id', $role_id)->delete();
}


//-------------------- modules/Webamooz/RolePermissions/Repositories/PermissionRepository.php
public function all()
{
    return Permission::all();
}




//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/footer.blade.php
<script src="{{ asset('/js/jquery.toast.min.js') }}"></script>
<script src="/panel/js/js.js?v={{ uniqid() }}"></script>


//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/head.blade.php
<meta name="_token" content="{{ csrf_token() }}">
<link rel="stylesheet" href="{{ asset('/css/jquery.toast.min.css') }}">



//-------------------- public/panel/js/js.js
function deleteItem(event, route) {
    event.preventDefault()

    if (confirm("آیا از حذف این آیتم مطعن هستید!")) {  //confirm ok or true -> condition
        //1)url , 2)parameters(@ method('delete') , @ csrf)
        $.post(route, {_token: $('meta[name="_token"]').attr('content'), _method: "delete"})
            .done(function (response) {  //اگر درست بود این اجرا میکنه + خود جی کوری شرط ایف درونش داره + response get jquery
                //event.target(tag a) + closest('tr' اگر تگ لینک بزاریک فقط دکمه حذف) نزدیک ترین تی آر بگیر + remove() حذف بکن
                event.target.closest('tr').remove();
                $.toast({
                    heading: response.status,
                    text: response.message,
                    showHideTransition: 'slide',
                    icon: 'success'
                })
            })

            .fail(function (response) {  //اگر غلط باش این مقدار اجرا میکنه + خود جی کوری شرط ایف درونش داره + response get jquery
                $.toast({
                    heading: 'عملیات نا موفق',
                    text: 'عملیات با خطا مواجه شد!',
                    showHideTransition: 'slide',
                    icon: 'error'
                })
            })
    }
}



//-------------------- modules/Webamooz/RolePermissions/Resources/Views/index.blade.php
<a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
    onclick="deleteItem(event, '{{ route('role-permissions.destroy' ,$role->id) }}')"></a>




//-------------------- modules/Webamooz/RolePermissions/Responses/AjaxResponses.php
public static function successResponse()
{
    return response()->json([
        'status' => 'موفقیت آمیز',
        'message' => 'نقش کاربری با موفقیت حذف شد'
    ], Response::HTTP_OK);  //use ajax
}














































//------------------------------------------------------------------------------------- Lesson 67,75 (Create course module)
1) composer du
2) php artisan make:model Course -mcr
3) php artisan make:seeder RolePErmissionTableSeeder
4) php artisan migrate --seed
5)




//-------------------- composer.json
"Webamooz\\Course\\": "modules/Webamooz/Course/",



//-------------------- config/app.php
\Webamooz\Course\Providers\CourseServiceProvider::class,




//-------------------- modules/Webamooz/Course/Routes/course_route.php
<?php
use Webamooz\Course\Http\Controllers\CourseController;

Route::group(['namespace' => 'Webamooz\Course\Http\Controllers', 'middleware' => ['web', 'auth', 'verified']], function ($router) {
    $router->resource('/courses', CourseController::class);
    $router->patch('/courses/{course}/accept', [CourseController::class, 'accept'])->name('courses.accept');
    $router->patch('/courses/{course}/reject', [CourseController::class, 'reject'])->name('courses.reject');
    $router->patch('/courses/{course}/lock', [CourseController::class, 'lock'])->name('courses.lock');
});




//-------------------- modules/Webamooz/Course/Providers/CourseServiceProvider.php
public function register()
{
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');
    $this->loadRoutesFrom(__DIR__ . '/../Routes/course_route.php');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views', 'Course');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang/');  //file ترجمه کلممات به صورت جیسون
    $this->loadTranslationsFrom(__DIR__ . '/../Lang/', 'Course');  //lang فایل ترجمه ولیدیشن زبان های محتلف
    DatabaseSeeder::$seeders[] = RolePermissionTableSeeder::class;  //سیدری که ساتختیم میریزه درون آرایه و درون دیتابیس سیدر کال میکنه
//  array_push(DatabaseSeeder::$seeders , RolePermissionTableSeeder::class);
}


public function boot()
{
    config()->set('sidebar.items.courses', [
        'icon' => 'i-courses',
        'title' => 'دوره ها',
        'url' => route('courses.index'),
    ]);
}





//-------------------- Database/Migrations/2024_05_23_203129_create_courses_table.php
public function up()
{
    Schema::create('courses', function (Blueprint $table) {
        $table->id();
        $table->unsignedBigInteger('teacher_id');  //اگر مدرس دوره حذف شد بیا دوره هم پاک کن به صورت آبشاری
        $table->unsignedBigInteger('category_id')->nullable();  //اگر دسته بندی حذف شد دوره ها بشن نال نه پاک بشن
        $table->unsignedBigInteger('banner_id')->nullable();  //اگر مدیا حذف شد دوره ها بشن نال نه پاک بشن
        $table->string('title');
        $table->string('slug')->unique();
        $table->float('priority')->nullable();  //تربیت اعداد برای مرتب سازی دوره + فلوت چون بشه بین دو دوره گذاشت مثل 1.3
        $table->string('price', 10);
        $table->string('percent', 5);  //درصد مدرس از دوره که تا پنح حرف
        $table->enum('type', [\Webamooz\Course\Models\Course::$types]);  //allow(پارامتر دوم این مقدار مجازی بفرستی) + $types -> ['free','cash]
        $table->enum('status', [\Webamooz\Course\Models\Course::$statuses]);  //$statuses -> ['completed','not_completed','locked]
        $table->enum('confirmation_status', [\Webamooz\Course\Models\Course::$confirmationStatuses]);
        $table->longText('body')->nullable();

        $table->foreign('teacher_id')->references('id')->on('users')->onDelete('CASCADE');
        $table->foreign('category_id')->references('id')->on('categories')->onDelete('SET NULL');
        $table->foreign('banner_id')->references('id')->on('media')->onDelete('SET NULL');  //image id
        $table->timestamps();
    });
}







//-------------------- modules/Webamooz/Course/Models/Course.php
use HasFactory;

const TYPE_FREE = 'free';
const TYPE_CASH = 'cash';
public static array $types = [self::TYPE_FREE, self::TYPE_CASH];

const STATUS_COMPLETED = 'completed';
const STATUS_NOT_COMPLETED = 'not_completed';
const STATUS_LOCKED = 'locked';
public static array $statuses = [self::STATUS_COMPLETED, self::STATUS_NOT_COMPLETED, self::STATUS_LOCKED];

const CONFIRMATION_STATUS_ACCEPTED = 'accepted';
const CONFIRMATION_STATUS_REJECTED = 'rejected';
const CONFIRMATION_STATUS_PENDING = 'pending';
public static array $confirmationStatuses = [self::CONFIRMATION_STATUS_ACCEPTED, self::CONFIRMATION_STATUS_REJECTED, self::CONFIRMATION_STATUS_PENDING];

protected $fillable = [
    'teacher_id',
    'category_id',
    'banner_id',
    'title',
    'slug',
    'priority',
    'price',
    'percent',
    'type',
    'status',
    'confirmation_status',
    'body',
    'image',
];

public function teacher()
{
    return $this->belongsTo(User::class, 'teacher_id');
}

public function category()
{
    $this->belongsTo(Category::class);
}

public function media()
{
    return $this->belongsTo(Media::class, 'banner_id');
}








//-------------------- modules/Webamooz/Course/Enum/CourseType.php
enum CourseType: string
{
    case Free = "free";
    case Cash = 'cash';
}




//-------------------- modules/Webamooz/Course/Enum/CourseStatus.php
enum CourseStatus: string
{
    case Completed = 'completed';
    case NotCompleted = 'not_completed';
    case Lock = 'lock';
}



//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php




//-------------------- modules/Webamooz/Course/Repositories/CourseRepository.php
public function store($values)
{
    return Course::create([
        'teacher_id' => $values->teacher_id,
        'category_id' => $values->category_id,
        'title' => $values->title,
        'slug' => \Str::slug($values->slug), //word concat _ -> course_php_basic_2024
        'priority' => $values->priority,
        'price' => $values->price,
        'percent' => $values->percent,
        'type' => $values->type,
        'status' => $values->status,
        'image' => $values->image,
        'body' => $values->body,
    ]);
}



//-------------------- modules/Webamooz/User/Repositories/UserRepository.php
public function getTeacher()
{
    //return auth()->user()->permissions -> Get all permissions
    return User::permission('teach')->get();    //get all users has permission teach
}

public function findById($user_id)
{
    return User::findOrFail($user_id);
}



//-------------------- modules/Webamooz/Category/Repositories/CategoryRepository.php
public function pluck()
{
    return Category::pluck('title', 'id');
}





//-------------------- modules/Webamooz/Course/Lang/fa.json
{
    "free": "رایگان",
    "cash": "نقدی",
    "completed": "تکمیل شده",
    "not_completed": "درحال برگزاری",
    "locked": "قفل شده"
}






//-------------------- modules/Webamooz/Course/Http/Requests/CourseRequest.php
public function authorize()
{
    return auth()->check() == true;
}

public function rules()
{
    return [
        'teacher_id' => ['required', 'exists:users,id', new ValidTeacher()],
        'category_id' => 'required|numeric|exists:categories,id',
        'title' => 'required|min:3|max:200',
        'slug' => 'required|min:3|max:200|unique:courses,slug',
        'priority' => 'required|numeric',
        'price' => 'required|numeric|min:0|max:10000000',
        'percent' => 'required|numeric|min:0|max:100',
        'type' => ['required', Rule::in(Course::$types)],  //Rule::in(array) -> مقدار آرایه میگیره و فقط این مقدار ها باید بگیره
        'status' => ['required', Rule::in(Course::$statuses)],  //Rule::in(array) -> مقدار آرایه میگیره و فقط این مقدار ها باید بگیره
        'image' => 'required|image|min:2|max:1024|mimes:png,jpg,jpeg',
        'body' => 'nullable|string',
    ];
}


public function attributes()
{
    return [
        'slug' => 'اسلاگ',
        'permissions' => 'مجوز ها',
        'image' => 'تصویر',
        'type' => 'نوع',
        'status' => 'وضعیت',
        'teacher_id' => 'مدرس دوره',
        'category_id' => 'دسته بندی',
        'percent' => 'در صد',
        'price' => 'قیمت',
        'priority' => 'ردیف',
        'body' => 'توضیحات'
    ];
}


public function messages()
{
    return [];
    /*
     return [
        'price.required' => trans('Course::validation.price_required'),  //Course(namespace) + validation + key
        'price.min' => trans('Course::validation.price_min'),
        'price.max' => trans('Course::validation.price_max')
    ];
    */
}





//-------------------- modules/Webamooz/Category/Rules/ValidTeacher.php
public function passes($attribute, $value)  //$value -> user_id
{
    $user = resolve(UserRepository::class)->findById($value);
    return $user->hasPermissionTo('teach');  //true ->next  +  false -> show error message
}

public function message()
{
    return "کاربر انتخاب شده یک مدرس معتبر نیست!";
}





//-------------------- modules/Webamooz/Course/Lang/fa/validation.php
<?php
return [
    'price_required' => 'قیمت دوره باید وارد شود.',
    'price_min' => 'قیمت دوره نباید کمتر از :min باشد',
    'price_max' => 'قیمت دوره نباید بیشتر از :max باشد',
];








//-------------------- modules/Webamooz/Course/Resources/Views/index.blade.php

//-------------------- modules/Webamooz/Course/Resources/Views/create.blade.php

//-------------------- modules/Webamooz/Course/Resources/Views/edit.blade.php



//-------------------- database/seeders/DatabaseSeeder.php
//به صورت استیتک و عمومی در هر سرویس پروایدری استفاده کنیم میاد صدا میزنه درون آرایه میریزه و میاد درون سییدر کال میکنه و صدا میزنه
public static $seeders = [];

public function run()
{
    foreach (self::$seeders as $seeder) {
        $this->call($seeder);
    }

    // \App\Models\User::factory(10)->create();
}





//-------------------- modules/Webamooz/Course/Database/Seeders/RolePermissionTableSeeder.php
public function run()
{
    //findOrCreate -> بیا پیدا کن اگر وجود داشت کاری نکن ولی اگر وجود نداشت بیا بساز + یک دیتا میگیره به صورت استرینگ و اسم دیتا
    Permission::findOrCreate('manage categories');
    Permission::findOrCreate('manage role_permissions');
    Permission::findOrCreate('teach');

    Role::findOrCreate('مدیر دسته بندی')->givePermissionTo(['manage categories', 'manage role_permissions']);
    Role::findOrCreate('teacher')->givePermissionTo(['teach']);
}







//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/sidebar.blade.php
<ul>
    @foreach(config('sidebar.items') as $sidebarItem)
        {{-- str_starts_with(request()->url(localhost:8000/categories/1/edit) == localhost:8000/categories)  //مقدار اولشم یکی بود صحیح بر میگردونه برای صفحات ایجاد و ویرایش --}}
            <li class="item-li {{ $sidebarItem['icon'] }} @if(str_starts_with(request()->url() , $sidebarItem['url'])) is-active @endif ">
                <a href="{{ $sidebarItem['url'] }}">{{ $sidebarItem['title'] }}</a></li>
    @endforeach
</ul>




//--------------------



//--------------------



//-------------------- modules/Webamooz/Category/Responses/AjaxResponses.php
public static function successResponse($message)
{
    return response()->json([
        'status' => 'موفقیت آمیز',
        'message' => $message,
    ], Response::HTTP_OK);  //use ajax
}

public static function failedResponse($message)
{
    return response()->json([
        'status' => 'خطا',
        'message' => $message,
    ], Response::HTTP_INTERNAL_SERVER_ERROR);  //use ajax
}





//--------------------
111111111111111111111111111111111111111111111111111111



































































//-------------------------------------------------------------- Lesson 74,75 (Component input tag select file textarea)
1) php artisan make:component ValidationError
2) php artisan make:component Input
3) php artisan make:component Select
4) php artisan make:component File
5) php artisan make:component TextArea




//-------------------- app/View/Components/ValidationError.php
public $field;
public function __construct($field)
{
    return $this->field = $field;
}

public function render()
{
    return view('components.validation-error');
}



//-------------------- resources/views/components/validation-error.blade.php
@error($field)
<span class="invalid-feedback" role="alert">
    <strong>{{ $message }}</strong>
</span>
@enderror




//-------------------- app/View/Components/Input.php
public $type, $name, $placeholder;

public function __construct($name, $placeholder, $type)
{
    $this->name = $name;
    $this->placeholder = $placeholder;
    $this->type = $type;
}

public function render()
{
    return view('components.input');
}




//--------------------  resources/views/components/input.blade.php
<div class="w-100 mlg-15">
{{-- $attributes->merge(['class' => 'text']) هر مقداری تعریف کنیم مثل فوکوش یا اجباری میاد درون اتریبیوت + مرج کردیم کلاس پیش فرض تکست برای همه و هر چی بدیم میاد اضافه میکنه --}}
    <input type="{{ $type }}" name="{{ $name }}" placeholder="{{ $placeholder }}" {{ $attributes->merge(['class' => 'text w-100']) }} value="{{ old($name) }}" >
    <x-validation-error field="{{ $name }}" />  {{-- x- -> start is component --}}
</div>




//-------------------- app/View/Components/Select.php
public $name;
public function __construct($name)
{
    $this->name = $name;
}

public function render()
{
    return view('components.select');
}



//--------------------  resources/views/components/select.blade.php
<select name="{{ $name }}" {{ $attributes }}>
    {{ $slot }}  {{-- برای قرار دادن کد های بین تگ های باز و بسته سلکت --}}
</select>
<x-validation-error field="{{ $name }}" />




//-------------------- app/View/Components/TagSelect.php
public $name;
public function __construct($name)
{
    $this->name = $name;
}

public function render()
{
    return view('components.tag-select');
}



//--------------------  resources/views/components/tag-select.blade.php
<ul class="tags mt-2 mb-0">
    <li class="tagAdd taglist">
        <x-input type="text" name="{{ $name }}" placeholder="برچسب ها" id="search-field" />
    </li>
</ul>
<x-validation-error field="{{ $name }}" />




//-------------------- app/View/Components/File.php
public $name, $placeholder, $value;

public function __construct($name, $placeholder, $value = null)
{
    $this->name = $name;
    $this->placeholder = $placeholder;
    $this->value = $value;
}

public function render()
{
    return view('components.file');
}



//--------------------  resources/views/components/file.blade.php
<div class="file-upload">
    <div class="file-upload$at mt-5">
        <div class="i-file-upload cursor-pointer">
            <span>{{ $placeholder }}</span>
            <input type="file" class="file-upload" id="files" name="{{ $name }}"  {{ $attributes }} />
        </div>
        <span class="filesize"></span>
        @if (isset($value))
            <span class="selectedFiles">
                تصویر فعلی :
                <img src="{{ $value->thumb }}" width="150" alt="">  {{-- {{ '/storage/' . $value->files['300'] }} --}}
            </span>
        @else
            <span class="selectedFiles">فایلی انتخاب نشده است</span>
        @endif
    </div>
    <x-validation-error field="{{ $name }}" />
</div>




//-------------------- app/View/Components/TextAre.php
public $name, $placeholder, $value;

public function __construct($name , $placeholder , $value = null)
{
    $this->name = $name;
    $this->placeholder = $placeholder;
    $this->value = $value;
}

public function render()
{
    return view('components.text-area');
}





//--------------------  resources/views/components/text-area.blade.php
<textarea name="{{ $name }}" placeholder="{{ $placeholder }}" class="text h">{!! isset($value) ? $value : old($name) !!}</textarea>
<x-validation-error field="{{ $name }}" />












































//-------------------- Leeson 83    TIME(04:00)
//-------------------------------------------------------------------------- Lesson 78,79,80,81,82 (Create media module)
1) php artisan make:model Media -m
2) composer require intervention/image
3) php artisan vendor:publish --provider="Intervention\Image\Laravel\ServiceProvider"
4) url -> https://image.intervention.io/v3/basics/instantiation
5) php artisan storage:link




//-------------------- composer.json
"Webamooz\\Media\\" : "modules/Webamooz/Media/",




//-------------------- config/app.php
\Webamooz\Media\Providers\MediaServiceProvider::class,




//-------------------- modules/Webamooz/Media/Database/Migrations/2024_05_26_182843_create_media_table.php
Schema::create('media', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('user_id');
    $table->json('files');  //multiple files in column
    $table->enum('type', ['image', 'video', 'audio', 'zip', 'doc']);  //enums(columnName  , [allow access])
    $table->string('filename', 255);
    $table->timestamps();
});





//-------------------- modules/Webamooz/Media/Services/MediaUploadService.php



//-------------------- modules/Webamooz/Media/Services/ImageFileService.php


//-------------------- modules/Webamooz/Media/Models/Media.php



//--------------------


//--------------------



//--------------------


//--------------------

























//---------------------------------------------------------------------------- Lesson 86 (RolePermission const in model)
//-------------------- config/permission.php
'models' => [
    'permission' => \Webamooz\RolePermissions\Model\Permission::class,
    'role' => \Webamooz\RolePermissions\Model\Role::class,
],




//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
class Permission extends \Spatie\Permission\Models\Permission
{
    const PERMISSION_MANAGE_CATEGORIES = 'manage categories';
    const PERMISSION_MANAGE_ROLE_PERMISSION = 'manage role_permissions';
    const PERMISSION_TEACH = 'teach';

    public static array $permissions = [
        self::PERMISSION_MANAGE_CATEGORIES,
        self::PERMISSION_MANAGE_ROLE_PERMISSION,
        self::PERMISSION_TEACH,
    ];
}




//-------------------- modules/Webamooz/RolePermissions/Model/Role.php
class Role extends \Spatie\Permission\Models\Role
{
    const ROLE_TEACHER = 'teacher';
    public static array $roles = [
        self::ROLE_TEACHER => [
            Permission::PERMISSION_TEACH,  //has many-permission inside role
        ],
    ];
}





//-------------------- modules/Webamooz/Course/Database/Seeders/RolePermissionTableSeeder.php
class RolePermissionTableSeeder extends Seeder
{
    public function run()
    {
        //findOrCreate -> بیا پیدا کن اگر وجود داشت کاری نکن ولی اگر وجود نداشت بیا بساز + یک دیتا میگیره به صورت استرینگ و اسم دیتا
        foreach (\Webamooz\RolePermissions\Model\Permission::$permissions as $permission) {
            Permission::findOrCreate($permission);
        }

        foreach (\Webamooz\RolePermissions\Model\Role::$roles as $roleName => $permission) {
            Role::findOrCreate($roleName)->givePermissionTo($permission);  //$permission -> array
        }
    }
}




//-------------------- modules/Webamooz/Category/Tests/Feature/CategoryTest.php
public function test_permitted_user_can_see_categories_panel()
{
    $this->actingAsAdminCreate();  //create user auth
    $this->seed(RolePermissionTableSeeder::class);  //create permission + role
    auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_CATEGORIES);
    $this->get(route('categories.index'))->assertOk();
}

public function test_permitted_user_can_create_category()
{
    $this->withoutExceptionHandling();  //show all exception
    $this->actingAsAdminCreate();  //user auth
    $this->seed(RolePermissionTableSeeder::class);
    auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_CATEGORIES);
    $this->createCategory();
    $this->assertEquals(1, Category::all()->count());
}




//-------------------- modules/Webamooz/User/Repositories/UserRepository.php
public function getTeacher()
{
    //return auth()->user()->permissions -> Get all permissions
    return User::permission(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_CATEGORIES)->get();    //get all users has permission teach
}





























//----------------------------------------------------------------------------------------------- Lesson 87 (superAdmin)
1) php artisan db:seed
2) php artisan make:policy CoursePolicy
3) default project :
protected $policies -> AuthServiceProvider = [
     'App\Models\Model' => 'App\Policies\ModelPolicy',  //Model => policy -> connection model to policy
];

4) module project -> CourseServiceProvider :
\Gate::policy(Course::class, CoursePolicy::class);  //Model::class , ModelPolicy::class -> connection model to policy




//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
const PERMISSION_MANAGE_CATEGORIES = 'manage categories';
const PERMISSION_MANAGE_COURSES = 'manage courses';
const PERMISSION_MANAGE_ROLE_PERMISSION = 'manage role_permissions';
const PERMISSION_TEACH = 'teach';
const PERMISSION_SUPER_ADMIN = 'super admin';

public static array $permissions = [
    self::PERMISSION_MANAGE_CATEGORIES,
    self::PERMISSION_MANAGE_COURSES,
    self::PERMISSION_MANAGE_ROLE_PERMISSION,
    self::PERMISSION_TEACH,
    self::PERMISSION_SUPER_ADMIN,
];





//-------------------- modules/Webamooz/RolePermissions/Lang/fa.json
{
    "manage categories" : "میدیریت دسته بندی ها",
    "manage courses" : "میدیریت دوره ها",
    "manage role_permissions" : "مدیریت نقش های کاربری",
    "teach" : "تدریس",
    "super admin" : "مدیر کل"
}



//-------------------- modules/Webamooz/RolePermissions/Providers/RolePermissionServiceProvider.php
public function register()
{
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views', 'RolePermissions');
    $this->loadRoutesFrom(__DIR__ . '/../Routes/role_permissions_route.php');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang');  //translation lang
    //این قبل همه پالیسی اجرا میشه + اگر صحیح یا غلط باشد دیگه درون پالیسی های دیگه نمیره مگر حالت نال باش بره سراغ پالیسی + پون درون پرمیژن ی بار بنویسیم در تمامی ماژول اجرا
    Gate::before(function ($user) {
        return $user->hasPermissionTo(Permission::PERMISSION_SUPER_ADMIN) ? true : null;  //سوپر ادمین نبود برو درون پلیسی ببین دسترسی مدیریت دوره داره یا نه
    });
}




//-------------------- modules/Webamooz/Course/Providers/CourseServiceProvider.php
public function register()
{
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');
    $this->loadRoutesFrom(__DIR__ . '/../Routes/course_route.php');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views', 'Course');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang/');  //file ترجمه کلممات به صورت جیسون
    $this->loadTranslationsFrom(__DIR__ . '/../Lang/', 'Course');  //lang فایل ترجمه ولیدیشن زبان های محتلف
    DatabaseSeeder::$seeders[] = RolePermissionTableSeeder::class;  //سیدری که ساتختیم میریزه درون آرایه و درون دیتابیس سیدر کال میکنه
//  array_push(DatabaseSeeder::$seeders , RolePermissionTableSeeder::class);
    Gate::policy(Course::class, CoursePolicy::class);  //Model::class , ModelPolicy::class
}



//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function index(CourseRepository $courseRepository)
{
    $this->authorize('manage' , Course::class);  //اسم متود یا قابلیت + اسم مادل که وصل شده به پالیسی
    $courses = $courseRepository->paginate();
    return view('Course::index', compact('courses'));
}



//-------------------- modules/Webamooz/Course/Policies/CoursePolicy.php
use HandlesAuthorization;

public function manage(User $user)  //درون پالیسی با نوشن مادل کاربر دسترسی داریم به کاربر لاگین شده
{
    return $user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES);
}






//-------------------- modules/Webamooz/Category/Providers/CategoryServiceProvider.php
public function register()
{
    $this->loadRoutesFrom(__DIR__ . '/../Routes/category_route.php');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Category');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
    Gate::policy(Category::class, CategoryPolicy::class);
}




//-------------------- modules/Webamooz/Category/Http/Controllers/CategoryController.php
public $categoryRepository;

public function __construct(CategoryRepository $categoryRepository)
{
    //چون قرار درون تمامی متود ها استفاده بشه برای جلوگیری از تگرار و کد نویسی تمیز درون کانستاکتور مینویسیم که صدا بزنه تو کل پرويه
    $this->categoryRepository = $categoryRepository;
}

public function index()
{
    $this->authorize('manage', Category::class);
    if (!auth()->user()->can('manage categories')) {  //can -> exit permission
        dd('User can not permission manage categories');
    }
    $categories = $this->categoryRepository->all();  //use call with laravel
    return view('Category::index', compact('categories'));
}

public function store(CategoryRequest $request)
{
    $this->authorize('manage', Category::class);
    $this->categoryRepository->store($request);
    return back()/*->with(['message' => 'دسته بندی با موفقیت ایجاد شد'])*/ ;
}

public function edit($category_id)
{
    $this->authorize('manage', Category::class);
    $category = $this->categoryRepository->getById($category_id);
    $categories = $this->categoryRepository->EditedExceptById($category_id);
    return view('Category::edit', compact('category', 'categories'));
}

public function update(CategoryUpdateRequest $request, $category_id)
{
    $this->authorize('manage', Category::class);
    $this->categoryRepository->update($category_id, $request);;
    return to_route('categories.index');
}

public function destroy($category_d)
{
    $this->authorize('manage', Category::class);
    $this->categoryRepository->delete($category_d);
    return AjaxResponses::successResponse('دسته بندی با موفقیت حذف شد');
}






//-------------------- modules/Webamooz/Category/Policies/CategoryPolicy.php
use HandlesAuthorization;

public function manage(User $user)  //درون پالیسی با نوشن مادل کاربر دسترسی داریم به کاربر لاگین شده
{
    return $user->hasPermissionTo(Permission::PERMISSION_MANAGE_CATEGORIES);
}
































//------------------------------------------------------------------------------------------- Lesson 88,90 (Course Test)
1) "image" => UploadedFile::fake()->image('banner.jpg', 150, 200),   //send file in testing -> UploadedFile
2) "pdf" => UploadedFile::fake()->create('test.pdf' , 120 , 'pdf'),  //send other file(pdf,word,excel,powerPoint,video,music) in testing
3) $this->authorize('manage', Course::class);//اسم متود یا قابلیت + اسم مادل که وصل شده به پالیسی + Course::class برای تمامی دوره ها میتونه تغییر بده یا ببینه
4) $this->authorize('edit', $course);  //course -> دوره که ویرایش بشه فرستادیم + $course -> فقط برای این دوره محدودیت میتونیم بزاریم به جز مدیر دوره ها





//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
class Permission extends \Spatie\Permission\Models\Permission
{
    const PERMISSION_MANAGE_CATEGORIES = 'manage categories';
    const PERMISSION_MANAGE_COURSES = 'manage courses';
    const PERMISSION_MANAGE_OWN_COURSES = 'manage own courses';  //دوره های خودش مدیریت بکنه
    const PERMISSION_MANAGE_ROLE_PERMISSION = 'manage role_permissions';
    const PERMISSION_TEACH = 'teach';
    const PERMISSION_SUPER_ADMIN = 'super admin';

    public static array $permissions = [  //نمایش لیست بعد سیدر در ویو
        self::PERMISSION_SUPER_ADMIN,
        self::PERMISSION_TEACH,
        self::PERMISSION_MANAGE_CATEGORIES,
        self::PERMISSION_MANAGE_ROLE_PERMISSION,
        self::PERMISSION_MANAGE_COURSES,
        self::PERMISSION_MANAGE_OWN_COURSES,
    ];
}





//-------------------- phpunit.xml
<testsuite name="Feature">  <!-- Unit از چه نوع تستی فیچر یا یونیت -->
    <directory suffix="Test.php">./modules/Webamooz/Course/Tests/Feature</directory> <!-- ./modules/Webamooz/User/Tests/Feature آدرس -->
</testsuite>






//-------------------- modules/Webamooz/Course/Tests/Feature/CourseTest.php
use Tests\TestCase;
class CourseTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    //permitted user can se course index
    public function test_permitted_user_can_see_courses_index()
    {
        $this->actingAsAdminCourse();
        $this->get(route('courses.index'))->assertOk();

        $this->actingAsSuperAdmin();
        $this->get(route('courses.index'))->assertOk();
    }

    public function test_normal_user_can_not_see_courses_index()
    {
        $this->actingAsUser();
        $this->get(route('courses.index'))->assertStatus(403);
    }

    //permitted user can create course
    public function test_permitted_user_can_create_course()
    {
        $this->actingAsAdminCourse();
        $this->get(route('courses.create'))->assertOk();

        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->get(route('courses.create'))->assertOk();
    }

    public function test_normal_user_can_not_create_course()
    {
        $this->actingAsUser();
        $this->get(route('courses.create'))->assertStatus(403);
    }

    //permitted user can store course
    public function test_permitted_user_can_store_course()
    {
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES, Permission::PERMISSION_TEACH);
        \Storage::fake('local');

        $this->post(route('courses.store'), $this->courseData())->assertRedirect(route('courses.index'));
        $this->assertEquals(Course::count(), 1);;
    }


    //permitted user can edit course
    public function test_permitted_user_can_edit_course()
    {
        $this->withoutExceptionHandling();
        $this->actingAsAdminCourse();  //همه دوره ها میتونه بررسی کنه و تغییر بده
        $course = $this->createCourse();
        $this->get(route('courses.edit', $course->id))->assertOk();

        $this->actingAsUser();
        $course = $this->createCourse();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->get(route('courses.edit', $course->id))->assertOk();  //پرمیژن تغییرات دوره های من + دوره که خودش ساخته میاد ویرایش میکنه
    }

    public function test_permitted_user_can_not_edit_other_users_course()
    {
        $this->actingAsUser();
        $course = $this->createCourse();  //دوره کاربر دیگر

        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);  //سظح دسترسی صاحب دوره های من دارداما آیدی دوره فرد دیگری میخواد ویرایش کنه
        $this->get(route('courses.edit', $course))->assertStatus(403);
    }

    public function test_normal_user_can_not_edit_course()
    {
        $this->actingAsUser();
        $course = $this->createCourse();
        $this->get(route('courses.edit', $course->id))->assertStatus(403);
    }


    //permitted user can update course
    public function test_permitted_user_can_updated_course()
    {
        $this->withoutExceptionHandling();
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES, Permission::PERMISSION_TEACH);
        $course = $this->createCourse();
        $this->patch(route('courses.update', $course->id), [
            'teacher_id' => auth()->id(),
            'category_id' => $course->category->id,
            'title' => 'updated title',
            'slug' => 'updated slug',
            'priority' => 10,
            'price' => 1500000,
            'percent' => 50,
            'type' => Course::TYPE_CASH,
            'status' => Course::STATUS_LOCKED,
            "image" => UploadedFile::fake()->image('banner.jpg', 150, 200),  //send file in testing -> UploadedFile
//          "pdf" => UploadedFile::fake()->create('test.pdf' , 120 , 'pdf'),  //send other file(pdf,word,excel,powerPoint,video,music) in testing
            'body' => $this->faker->sentence(4),
        ])->assertRedirect(route('courses.index'));
        $course = $course->fresh();  //get end data -> بیا دوره که آپدیت کردیم بگیر آخرین دیتاهایی که تغییر دادیم نه دوره ای که ساتختیم
        $this->assertEquals('updated title', $course->title);
    }

    public function test_normal_user_can_not_update_course()
    {
        $this->actingAsUser();  //user 1
        $course = $this->createCourse();  //دوره برای کاربر شماره یک و کاربر دوم مجوز تدریس داره و این دوره برای ون نیست

        $this->actingAsUser();  //user 2
        auth()->user()->givePermissionTo(Permission::PERMISSION_TEACH);  //به کاربر دومی مجوز تدریس داد
        $this->patch(route('courses.update', $course->id), [
            'teacher_id' => auth()->id(),
            'category_id' => $course->category->id,
            'title' => 'updated title',
            'slug' => 'updated slug',
            'priority' => 10,
            'price' => 1500000,
            'percent' => 50,
            'type' => Course::TYPE_CASH,
            'status' => Course::STATUS_LOCKED,
            "image" => UploadedFile::fake()->image('banner.jpg', 150, 200),  //send file in testing -> UploadedFile
//          "pdf" => UploadedFile::fake()->create('test.pdf' , 120 , 'pdf'),  //send other file(pdf,word,excel,powerPoint,video,music) in testing
            'body' => $this->faker->sentence(4),
        ])->assertStatus(403);
    }


    //permitted user can delete course
    public function test_permitted_user_can_delete_course()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();

        $this->delete(route('courses.destroy', $course->id))->assertOk();
        $this->assertEquals(0, $course->count());  //deleted
    }

    public function test_normal_user_can_not_delete_course()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->actingAsUser();
        $this->delete(route('courses.destroy', $course->id))->assertStatus(403);
        $this->assertEquals(1, Course::count());
    }

    //permitted user can (accept,reject,lock) course
    public function test_permitted_user_can_change_confirmation_status_course()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();

        $this->patch(route('courses.accept', $course->id), [
            'confirmation_status' => Course::CONFIRMATION_STATUS_PENDING,
        ])->assertOk();

        $this->patch(route('courses.reject', $course->id), [
            'confirmation_status' => Course::CONFIRMATION_STATUS_PENDING,
        ])->assertOk();

        $this->patch(route('courses.lock', $course->id), [
            'confirmation_status' => Course::CONFIRMATION_STATUS_PENDING,
        ])->assertOk();
    }

    public function test_normal_user_can_not_change_confirmation_status_course()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();

        $this->actingAsUser();
        $this->patch(route('courses.accept', $course->id), [
            'confirmation_status' => Course::CONFIRMATION_STATUS_ACCEPTED,
        ])->assertStatus(403);

        $this->patch(route('courses.reject', $course->id), [
            'confirmation_status' => Course::CONFIRMATION_STATUS_ACCEPTED,
        ])->assertStatus(403);

        $this->patch(route('courses.lock', $course->id), [
            'confirmation_status' => Course::CONFIRMATION_STATUS_ACCEPTED,
        ])->assertStatus(403);
    }

    /*---------- Create User ----------*/
    public function createUser()
    {
        $user = User::create([
            'name' => 'mahdi',
            'email' => $this->faker->unique()->safeEmail(),
            'mobile' => '939818' . rand(1000, 9999),
            'email_verified_at' => now(),
            'password' => \Hash::make('12aBC!@'),
            'remember_token' => Str::random(10),
        ]);
        $this->actingAs($user);  //actingAs -> authentication + factory(User::class))->create() -> create user
        $this->seed(RolePermissionTableSeeder::class);
    }

    public function actingAsSuperAdmin()
    {
        $this->createUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_SUPER_ADMIN);
    }

    public function actingAsAdminCourse()
    {
        $this->createUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_COURSES);
    }

    public function actingAsUser()
    {
        $this->createUser();
    }

    /*---------- Create Data ----------*/
    public function createCategory()
    {
        return Category::create(['title' => $this->faker->title, 'slug' => $this->faker->slug]);
    }

    public function createCourse()
    {
        $data = $this->courseData() + ['confirmation_status' => Course::CONFIRMATION_STATUS_PENDING,];
        unset($data['image']);
        return Course::create($data);
    }

    public function courseData()
    {
        $category = $this->createCategory();
        return [
            'teacher_id' => auth()->id(),
            'category_id' => $category->id,
            'title' => $this->faker->sentence(2),
            'slug' => $this->faker->sentence(2),
            'priority' => 5,
            'price' => 1000000,
            'percent' => 45,
            'type' => Course::TYPE_FREE,
            'status' => Course::STATUS_NOT_COMPLETED,
            "image" => UploadedFile::fake()->image('banner.jpg', 150, 200),  //send file in testing -> UploadedFile
//          "pdf" => UploadedFile::fake()->create('test.pdf' , 120 , 'pdf'),  //send other file(pdf,word,excel,powerPoint,video,music) in testing
            'body' => $this->faker->word,
        ];
    }

}










//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
class CourseController extends Controller
{
    public function index(CourseRepository $courseRepository)
    {
        $this->authorize('manage', Course::class);  //اسم متود یا قابلیت + اسم مادل که وصل شده به پالیسی + Course::class برای تمامی دوره ها میتونه استفاده کنه
        $courses = $courseRepository->paginate();
        return view('Course::index', compact('courses'));
    }

    public function create(UserRepository $userRepository, CategoryRepository $categoryRepository)
    {
        $this->authorize('create', Course::class);
        $categories = $categoryRepository->pluck();
        $teachers = $userRepository->getTeacher();
        return view('Course::create', compact('teachers', 'categories'));
    }

    public function store(CourseRequest $request)
    {
        //بیا از طریق رکوست بیا بگیر مقدار عکس و آیدی تصویر و بریز درون بنر آیدی و برای ساختنش اسم banner_id صدا میزنیم در store
        $request->request->add([
            'banner_id' => MediaFileService::upload($request->file('image'))->id
        ]);
        (new CourseRepository())->store($request);
        return to_route('courses.index');
    }

    public function show(Course $course)
    {
        //
    }

    public function edit($id, CourseRepository $courseRepository, CategoryRepository $categoryRepository, UserRepository $userRepository)
    {
        $course = $courseRepository->findById($id);
        $this->authorize('edit', $course);  //need course -> اون دوره ای که ویرایش قرار بشه فرستادیم + $course -> فقط برای این دوره محدودیت میتونیم بزاریم به جز مدیر دوره ها
        $categories = $categoryRepository->pluck();
        $teachers = $userRepository->getTeacher();
        return view('Course::edit', compact('course', 'categories', 'teachers'));
    }

    public function update(CourseRequest $request, $course_id, CourseRepository $courseRepository)
    {
        $course = $courseRepository->findById($course_id);
        $this->authorize('edit', $course);

        if ($request->hasFile('image')) {
            $request->request->add(['banner_id' => MediaFileService::upload($request->file('image'))->id]);
            if ($course->media)
                $course->media->delete();  //call in Model -> protected static function booted() ->  static::deleting(func)
        } else {
            $request->request->add(['banner_id' => $course->banner_id]);  //اگر تصویری وجود نداشت بیا همون عکس قبلی بگیر
        }
        $courseRepository->update($course_id, $request);
        return redirect(route('courses.index'));
    }


    public function destroy($course_id, CourseRepository $courseRepository)
    {
        $course = $courseRepository->findById($course_id);
        $this->authorize('delete', $course);
        if ($course->media) {
            $course->media->delete();  //call in Model -> protected static function booted() ->  static::deleting(func)
        }
        $course->delete();
        return AjaxResponses::successResponse('دوره شما با موفقیت حذف شد');
    }


    public function accept($course_id, CourseRepository $courseRepository)
    {
        $this->authorize('change_confirmation_status', Course::class);  //just chanage manage course
        if ($courseRepository->updateConfirmationStatus($course_id, Course::CONFIRMATION_STATUS_ACCEPTED)) {
            return AjaxResponses::successResponse("دوره با موفقیت تایید شد");
        }
        return AjaxResponses::failedResponse("تایید دوره با خطا مواجه شد!");
    }

    public function reject($course_id, CourseRepository $courseRepository)
    {
        $this->authorize('change_confirmation_status', Course::class);  //Course::class -> بر روی تمام دوره ها اعمال بشه بتونه تغییر بده
        if ($courseRepository->updateConfirmationStatus($course_id, Course::CONFIRMATION_STATUS_REJECTED)) {
            return AjaxResponses::successResponse("دوره با موفقیت رد شد");
        }
        return AjaxResponses::failedResponse("رد دوره با خطا مواجه شد!");
    }

    public function lock($course_id, CourseRepository $courseRepository)
    {
        $this->authorize('change_confirmation_status', Course::class);
        if ($courseRepository->updateStatus($course_id, Course::STATUS_LOCKED)) {
            return AjaxResponses::successResponse("دوره با موفقیت قفل شد");
        }
        return AjaxResponses::failedResponse("قفل دوره با خطا مواجه شد!");
    }
}










//-------------------- modules/Webamooz/Course/Policies/CoursePolicy.php
class CoursePolicy
{
    use HandlesAuthorization;

    public function __construct()
    {
        //
    }

    public function manage(User $user)  //درون پالیسی با نوشن مادل کاربر دسترسی داریم به کاربر لاگین شده
    {
        return $user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES);
    }

    public function create(User $user)  //یا مدیریت دسته بندی یا مدیریت دسته های من
    {
        return $user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) ||
            $user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
    }

    public function edit($user, $course)
    {
        if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;

        return $user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES) && $course->teacher_id == $user->id;
    }

    public function delete($user)
    {
        if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;  //فقط مدیر دوره ها بتونه حذف بکنه نه (مدرس دوره یا صاحب دوره)
        return null;
    }

    public function change_confirmation_status($user)
    {
        if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;
        return null;
    }

}



































//-------------------------------------------------------------------------------------- Lesson 91 (RolePermission Test)
//-------------------- phpunit.xml
<testsuite name="Feature">  <!-- Unit از چه نوع تستی فیچر یا یونیت -->
    <directory suffix="Test.php">./modules/Webamooz/RolePermissions/Tests/Feature</directory> <!-- ./modules/Webamooz/User/Tests/Feature آدرس -->
</testsuite>




//-------------------- modules/Webamooz/RolePermissions/Providers/RolePermissionServiceProvider.php
public function register()
{
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views', 'RolePermissions');
    $this->loadRoutesFrom(__DIR__ . '/../Routes/role_permissions_route.php');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang');  //translation lang
    //این قبل همه پالیسی اجرا میشه + اگر صحیح یا غلط باشد دیگه درون پالیسی های دیگه نمیره مگر حالت نال باش بره سراغ پالیسی + چون درون پرمیژن ی بار بنویسیم در تمامی ماژول اجرا
    Gate::policy(Role::class, RolePermissionPolicy::class);  //Model::class , ModelPolicy::class
    Gate::before(function ($user) {
        return $user->hasPermissionTo(Permission::PERMISSION_SUPER_ADMIN) ? true : null;  //سوپر ادمین نبود برو درون پلیسی ببین دسترسی مدیریت دوره داره یا نه
    });
}




//-------------------- modules/Webamooz/RolePermissions/Http/Controllers/RolePermissionController.php
class RolePermissionController extends Controller
{

    private $roleRepository;
    private $permissionRepository;

    public function __construct(RoleRepository $roleRepository, PermissionRepository $permissionRepository)
    {
        $this->roleRepository = $roleRepository;
        $this->permissionRepository = $permissionRepository;
    }

    public function index()
    {
        $this->authorize('index', Role::class);
        $roles = $this->roleRepository->all();
        $permissions = $this->permissionRepository->all();
        return view('RolePermissions::index', compact('roles', 'permissions'));
    }

    public function store(RoleRequest $request)
    {
        $this->authorize('create', Role::class);
        $this->roleRepository->store($request);
        return redirect(route('role-permissions.index'));
    }

    public function edit($role_id)
    {
        $this->authorize('edit', Role::class);
        $role = $this->roleRepository->getById($role_id);
        $permissions = $this->permissionRepository->all();
        return view('RolePermissions::edit', compact('role', 'permissions'));
    }

    public function update(RoleUpdateRequest $request, $role_id)
    {
        $this->authorize('edit', Role::class);
        $this->roleRepository->update($role_id, $request);
        return to_route('role-permissions.index');
    }

    public function destroy($role_id)
    {
        $this->authorize('delete', Role::class);
        $this->roleRepository->destroy($role_id);
        return AjaxResponses::successResponse('نقش کاربری با موفقیت حذف شد');
    }

}





//-------------------- modules/Webamooz/RolePermissions/Policies/RolePermissionPolicy.php
class RolePermissionPolicy
{
    use HandlesAuthorization;

    public function index($user)
    {
        if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_ROLE_PERMISSION)) return true;
        return null;
    }

    public function create($user)
    {
        if ($user->givePermissionTo(Permission::PERMISSION_MANAGE_ROLE_PERMISSION)) return true;
        return null;
    }

    public function edit($user)
    {
        if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_ROLE_PERMISSION)) return true;
        return null;
    }

    public function delete($user)
    {
        if ($user->givePermissionTo(Permission::PERMISSION_MANAGE_ROLE_PERMISSION)) return true;
        return null;
    }
}




//-------------------- modules/Webamooz/RolePermissions/Tests/Feature/RolesTest.php
class RolesTest extends TestCase
{

    use RefreshDatabase, WithFaker;

    public function test_permitted_user_can_see_index()
    {
        $this->actingAsAdminRole();
        $this->get(route('role-permissions.index'))->assertOk();
    }

    public function test_normal_user_can_not_see_index()
    {
        $this->actingAsUser();
        $this->get(route('role-permissions.index'))->assertStatus(403);
    }

    public function test_permitted_user_can_store_roles()
    {
        $this->actingAsAdminRole();
        $this->post(route('role-permissions.store'), [
            'name' => 'super admin',
            'permissions' => [
                Permission::PERMISSION_MANAGE_COURSES,
                Permission::PERMISSION_MANAGE_CATEGORIES,
                Permission::PERMISSION_TEACH,
            ]
        ])->assertRedirect(route('role-permissions.index'));
        $this->assertEquals(count(Role::$roles) + 1, Role::count());  //migration seed -> default exit role teacher
    }

    public function test_normal_user_can_not_store_roles()
    {
        $this->actingAsUser();
        $this->post(route('role-permissions.store'), [
            'name' => 'super admin',
            'permissions' => [
                Permission::PERMISSION_MANAGE_COURSES,
                Permission::PERMISSION_MANAGE_CATEGORIES,
                Permission::PERMISSION_TEACH,
            ]
        ])->assertStatus(403);
        $this->assertEquals(count(Role::$roles), Role::count());  //1(role default teach) == 1
    }

    public function test_permitted_user_can_see_edit()
    {
        $this->actingAsAdminRole();
        $role = $this->createRole();
        $this->get(route('role-permissions.edit', $role->id))->assertOk();
    }

    public function test_normal_user_can_not_see_edit()
    {
        $this->actingAsAdminRole();
        $role = $this->createRole();
        $this->actingAsUser();
        $this->get(route('role-permissions.edit', $role->id))->assertStatus(403);
    }


    public function test_permitted_user_can_update_roles()
    {
        $this->actingAsAdminRole();
        $role = $this->createRole();
        $this->patch(route('role-permissions.update', $role->id), [
            'name' => 'Role updated',
            "permissions" => [
                Permission::PERMISSION_MANAGE_COURSES,
                Permission::PERMISSION_MANAGE_CATEGORIES,
                Permission::PERMISSION_TEACH,]
        ])->assertRedirect(route('role-permissions.index'));
        $this->assertEquals('Role updated', $role->fresh()->name);
    }

    public function test_normal_user_can_not_update_roles()
    {
        $this->actingAsUser();
        $role = $this->createRole();
        $this->patch(route('role-permissions.update', $role->id), [
            'name' => 'Role updated',
            "permissions" => [
                Permission::PERMISSION_MANAGE_COURSES,
                Permission::PERMISSION_MANAGE_CATEGORIES,
                Permission::PERMISSION_TEACH,]
        ])->assertStatus(403);
        $this->assertEquals($role->name, $role->fresh()->name);
    }

    public function test_permitted_user_can_delete_roles()
    {
        $this->actingAsAdminRole();
        $role = $this->createRole();
        $this->delete(route('role-permissions.destroy', $role->id))->assertOk();
        $this->assertEquals(count(Role::$roles) , Role::count());
    }

    public function test_normal_user_can_not_delete_roles()
    {
        $this->actingAsUser();
        $role = $this->createRole();
        $this->delete(route('role-permissions.destroy', $role->id))->assertStatus(403);
        $this->assertEquals(count(Role::$roles) + 1 , Role::count());
    }


    /*----- Create User -----*/
    public function actingAsUser()
    {
        $user = User::create([
            'name' => 'mahdi',
            'email' => $this->faker->unique()->safeEmail(),
            'mobile' => '939818' . rand(1000, 9999),
            'email_verified_at' => now(),
            'password' => \Hash::make('12aBC!@'),
            'remember_token' => Str::random(10),
        ]);
        $this->actingAs($user);
        $this->seed(RolePermissionTableSeeder::class);
    }

    public function actingAsSuperAdmin()
    {
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_SUPER_ADMIN);
    }

    public function actingAsAdminRole()
    {
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_ROLE_PERMISSION);
    }

    public function createRole()
    {
        return Role::create(['name' => 'Role test'])->syncPermissions
        ([
            Permission::PERMISSION_MANAGE_COURSES,
            Permission::PERMISSION_MANAGE_CATEGORIES,
            Permission::PERMISSION_TEACH,
        ]);
    }

}

































//------------------------------------------------------------------------------------ Lesson 92 (Common دیتا های مشترک)
1) composer dump-autoload



//-------------------- composer.json
"Webamooz\\Common\\": "modules/Webamooz/Common/",



//-------------------- modules/Webamooz/Common/Responses/AjaxResponses.php
<?php
namespace Webamooz\Common\Responses;
use Illuminate\Http\Response;

class AjaxResponses
{
    public static function successResponse($message)
    {
        return response()->json([
            'status' => 'موفقیت آمیز',
            'message' => $message,
        ], Response::HTTP_OK);  //use ajax
    }

    public static function failedResponse($message)
    {
        return response()->json([
            'status' => 'خطا',
            'message' => $message,
        ], Response::HTTP_INTERNAL_SERVER_ERROR);  //use ajax
    }
}



//-------------------- Controllers = Category + Course + RolePermissions
use Webamooz\Common\Responses\AjaxResponses;




























* -> user has hasMany Role -> one to many
//-------------------------------------------------------------------------------------- Lesson 93...97,100 (Module users)
1) Route::get('test' , function({ auth()->user()->assignRole('teacher');  //insert role }))
2) php artisan db:seed
3) php artisan make:middleware StoreUserIp




//-------------------- modules/Webamooz/User/Routes/user_routes.php
Route::group(['namespace' => 'Webamooz\User\Http\Controllers', 'middleware' => 'web'], function ($router) {

    //---------- dashboard users
    Route::resource('users', UserController::class);
    Route::post('/users/{user}/add/role', [UserController::class, 'addRole'])->name('users.add.role');+
    Route::delete('/users/{user}/remove/role/{role}' , [UserController::class , 'removeRole'])->name('users.remove.role');
    Route::patch('/users/{user}/manualVerify', [UserController::class, 'manualVerify'])->name('users.manualVerify');





//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
public function register()
{
    $this->loadRoutesFrom(__DIR__ . '/../Routes/user_routes.php');
    $this->loadMigrationsFrom(__DIR__ . '/../database/migrations/');
    $this->loadFactoriesFrom(__DIR__ . '/../database/factories/');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'User');  //1)path view  2)namespace User::Front/register.blade.php
    $this->loadJsonTranslationsFrom(__DIR__ . "/../Lang/");

    config()->set('auth.providers.users.model', User::class);  //1)key(path inside config)  2)value
    Gate::policy(User::class, UserPolicy::class);
    DatabaseSeeder::$seeders[] = UsersTableSeeder::class;  //سیدری که ساتختیم میریزه درون آرایه و درون دیتابیس سیدر کال میکنه
//  array_push(DatabaseSeeder::$seeders , RolePermissionTableSeeder::class);
}

public function boot()
{
    $this->app['router']->pushMiddlewareToGroup('web', StoreUserIp::class);  //حالت عادی -> app/kernel -> $middlewareGroups -> web
    config()->set('sidebar.items.users', [
        "icon" => "i-users",
        "title" => "کاربران",
        "url" => route('users.index')
    ]);
}







//-------------------- modules/Webamooz/Dashboard/Config/sidebar.php
<?php
return [
    'items' => [
        'dashboard' => [],  //sort customize -> خودمون ترتبی لیست سایدبار مشخص کنیم
        'categories' => [],
        'role-permissions' => [],
        'users' => [],
    ]
];




//-------------------- modules/Webamooz/User/Http/Requests/AddRoleRequest.php
'role' => ['required', 'exists:roles,name'],




//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
const PERMISSION_MANAGE_CATEGORIES = 'manage categories';
const PERMISSION_MANAGE_COURSES = 'manage courses';
const PERMISSION_MANAGE_USERS = 'manage users';
const PERMISSION_MANAGE_OWN_COURSES = 'manage own courses';  //دوره های خودش مدیریت بکنه
const PERMISSION_MANAGE_ROLE_PERMISSION = 'manage role_permissions';
const PERMISSION_TEACH = 'teach';
const PERMISSION_SUPER_ADMIN = 'super admin';

public static array $permissions = [  //نمایش لیست بعد سیدر در ویو
    self::PERMISSION_SUPER_ADMIN,
    self::PERMISSION_TEACH,
    self::PERMISSION_MANAGE_CATEGORIES,
    self::PERMISSION_MANAGE_ROLE_PERMISSION,
    self::PERMISSION_MANAGE_COURSES,
    self::PERMISSION_MANAGE_OWN_COURSES,
    self::PERMISSION_MANAGE_USERS,
];



//-------------------- modules/Webamooz/User/Policies/UserPolicy.php
public function index($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_USERS)) return true;
    return null;

}
public function addRole($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_USERS)) return true;
    return null;
}






//-------------------- modules/Webamooz/User/Http/Controllers/UserController.php
class UserController extends controller
{
    private $userRepository;

    public function __construct(UserRepository $userRepository)
    {
        $this->userRepository = $userRepository;
    }

    public function index(RoleRepository $roleRepository)
    {
        $this->authorize('index', User::class);
        $users = $this->userRepository->paginate(10);
        $roles = $roleRepository->all();
        return view('User::Admin.index', compact('users', 'roles'));
    }

    public function edit($user_id)
    {
        $this->authorize('edit', User::class);
        $user = $this->userRepository->findById($user_id);
        return view('User::Admin.edit', compact('user'));
    }

    public function update(UpdateUserRequest $request, $user_id)
    {
        $this->authorize('edit', User::class);
        $user = $this->userRepository->findById($user_id);

        if ($request->hasFile('image')) {
            $request->request->add(['image_id' => MediaFileService::upload($request->file('image'))->id]);
            if ($user->image) {  //if image exist -> delete
                $user->image->delete();
            }
        } else {
            $request->request->add(['image_id' => $user->image_id]);
        }

        $this->userRepository->update($user_id, $request);
        $this->newFeedback();
        return redirect()->back();
    }

    public function destroy($user_id)
    {
        $user = $this->userRepository->findById($user_id);
        $user->delete();
        return AjaxResponses::successResponse("کاربر با موفقیت حذف شد");
    }

    /*----- Method manualVerify + assignRole + removeRole -----*/

    public function manualVerify($user_id)
    {
        $this->authorize('manualVerify', User::class);
        $user = $this->userRepository->findById($user_id);
        $user->markEmailAsVerified();  //email verify_at -> now()
        return AjaxResponses::successResponse("ایمیل کاربر با موفقیت تایید شد");
    }

    public function addRole(AddRoleRequest $request, User $user)
    {
        $this->authorize('addRole', User::class);
        $user->assignRole($request->role);  //saved $request->role(name role)
        $this->newFeedback("موفقیت آمیز", "نقش کاربری {$request->role} برای کاربر {$user->name} با موفقیت ثیت شد", "success");
        return back();
    }

    public function removeRole($user_id, $role_name)
    {
        $this->authorize('removeRole', User::class);
        $user = $this->userRepository->findById($user_id);
        $user->removeRole($role_name);  //role name
        return AjaxResponses::successResponse("نقش کاربر با موفقیت حذف شد");
    }

    function newFeedback($heading = 'موفقیت آمیر', $text = 'عملیات با موفقیت انجام شد', $type = 'success')
    {
        $session = session()->has('feedbacks') ? session()->get('feedbacks') : [];  //هر چند تا که بسازیم سشن به اسم فیدبکز میاد صدا میزنه فراخوانی میکنه
        $session[] = ["heading" => $heading, "text" => $text, "type" => $type];  //session is array
        session()->flash('feedbacks', $session);
    }
}





//-------------------- modules/Webamooz/User/Models/User.php
protected $fillable = [
    'name',
    'email',
    'username',
    'mobile',
    'head_line',
    'bio',
    'ip',
    'telegram',
    'image_id',
    'image_id',
    'password',
    'email_verified_at',
    'status',
];

const STATUS_ACTIVE = 'active';
const STATUS_DEACTIVE = 'deactive';
const STATUS_BAN = 'ban';
public static array $statuses = [self::STATUS_ACTIVE, self::STATUS_DEACTIVE, self::STATUS_BAN];

public static array $defaultUsers = [
    [
        'name' => 'Admin',
        'email' => 'admin@gmail.com',
        'password' => 'admin',
        'role' => Role::ROLE_SUPER_ADMIN,
//      'email_verified_at' => '2024-05-10 12:25:58'
    ],
    [
        'name' => 'NormalUser',
        'email' => 'normaluser@gmail.com',
        'password' => 'normaluser',
        'role' => Role::ROLE_STUDENT,

    ]
];

public function image()
{
    return $this->belongsTo(Media::class, 'image_id');
}







//-------------------- modules/Webamooz/User/Resources/Views/Admin/index.blade.php
@extends('Dashboard::master')

@section('title' , 'لیست کاربران')
@section('breadcrumb')
    <li><a href="#" title="کاربران">کاربران</a></li>
@endsection

@section('content')

    <div class="row no-gutters">
        <div class="col-12 margin-left-10 margin-bottom-15 border-radius-3">
            <p class="box__title">کاربران</p>
            <div class="table__box">
                <table class="table">
                    <thead role="rowgroup">
                    <tr role="row" class="title-row">
                        <th>ردیف</th>
                        <th>شناسه</th>
                        <th>نام و نام خانوادگی</th>
                        <th>ایمیل</th>
                        <th>شماره موبایل</th>
                        <th>سطح کاربری</th>
                        <th>تاریخ عضویت</th>
                        <th>آی پی</th>
                        <th>وضعیت حساب</th>
                        <th>عملیات</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($users as $index => $user)
                        <tr role="row" class="">
                            <td>{{ $users->firstItem() + $index }}</td>
                            <td>{{ $user->id }}</td>
                            <td>{{ $user->name }}</td>
                            <td>{{ $user->email }}</td>
                            <td>{{ $user->mobile }}</td>
                            <td>
                                <a href="">
                                    <ul>
                                        @foreach($user->roles as $userRole)
                                            <li>{{ $userRole->name }}
                                                <a href="" class="item-delete mr-10 btn_red_customize" title="حذف"
                                                onclick="deleteItem(event, '{{ route('users.remove.role' , [$user->id , $userRole->name]) }}' , 'li')"></a>
                                            </li>
                                        @endforeach
                                        <li><a href="#select-role" rel="modal:open"
                                               onclick="setFormAction( {{ $user->id }} )" class="text-info">افزودن نقش کاربری</a></li>
                                    </ul>
                                </a>
                            </td>
                            <td>{{ $user->created_at }}</td>
                            <td>{{ $user->ip }}</td>
                            <td class="confirmation_status">{!! $user->hasVerifiedEmail()
                            ? "<span class='text-success fw-bold'>تایید شده</span>"  : "<span class='text-error fw-bold'>تایید نشده</span>" !!}</td>
                            <td>
                                <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
                                   onclick="deleteItem(event, '{{ route('users.destroy' ,$user->id) }}')"></a>
                                <a href="{{ route('users.edit' , $user->id) }}"
                                   class="item-edit btn_info_customize mlg-15" title="ویرایش"></a>
                                <a href="" onclick="updateConfirmationStatus(event , '{{ route('users.manualVerify' , $user->id) }}' ,
                                    'آیا از تایید ایمیل کاربر مطمعن هستید؟' , 'تایید شده' , 'confirmation_status')"
                                   class="item-confirm mlg-15 btn_success_customize" title="تایید ایمیل کاربر"></a>
                            </td>
                        </tr>
                    @endforeach
                    {{ $users->links() }}
                    </tbody>
                </table>

                <div id="select-role" class="modal">
                    <form action="{{ route('users.add.role', 0) }}" method="POST" id="select-role-form">
                        @csrf
                        <select name="role" id="">
                            <option value="">یک نقش را انتخاب کنید</option>
                            @foreach($roles as $role)
                                <option
                                    value="{{ $role->name }}">{{ $role->name }}</option>  {{-- value='name role saved' --}}
                            @endforeach
                        </select>
                        <button class="btn btn-webamooz_net mt-4">ایجاد</button>
                    </form>
                </div>

            </div>
        </div>
    </div>
@endsection


@section('css')
    <link rel="stylesheet" href="{{ asset('panel/css/jquery.modal.min.css') }}">
@endsection


@section('js')
    <script src="{{ asset('panel/js/jquery.modal.min.js') }}"></script>
    <script>
        function setFormAction(userId) {
            // console.log(userId)
            $("#select-role-form").attr('action', '{{ route('users.add.role' , 0) }}'.replace('/0/', '/' + userId + '/'))
        }
        @includeIf('Common::layouts.feedbacks')  {{-- show session flash --}}
    </script>
@endsection







//-------------------- modules/Webamooz/User/Resources/Views/Admin/edit.blade.php
@extends('Dashboard::master')

@section('title' , 'ویرایش کاربر')
@section('breadcrumb')
    <li><a href="{{ route('users.index') }}" title="کاربر ها">کاربر ها</a></li>
    <li><a href="#" title="ویرایش کاربر">ویرایش کاربر</a></li>
@endsection


@section('content')
    <div class="row no-gutters bg-white">
        <div class="col-12">
            <p class="box__title">ویرایش کاربر</p>

            <form action="{{ route('users.update' , $user->id) }}" method="post" class="padding-30" enctype="multipart/form-data">
                @csrf
                @method('PATCH')

                <x-input type="text" name="name" placeholder="عنوان کاربر"  required value="{{ $user->name }}"/>
                <x-input type="text" name="email" placeholder="ایمیل کاربر" required value="{{ $user->email }}"/>
                <x-input type="text" name="username" placeholder="نام کاربری" value="{{ $user->username }}"/>
                <x-input type="text" name="mobile" placeholder="موبایل کاربر" value="{{ $user->mobile }}"/>
                <x-input type="text" name="head_line" placeholder="عنوان" value="{{ $user->head_line }}"/>
                <x-input type="text" name="website" placeholder="وب سایت" value="{{ $user->website }}"/>
                <x-input type="text" name="linkedin" placeholder="لینکدین" value="{{ $user->linkedin }}"/>
                <x-input type="text" name="facebook" placeholder="فیس بوک" value="{{ $user->facebook }}"/>
                <x-input type="text" name="twitter" placeholder="توییتر" value="{{ $user->twitter }}"/>
                <x-input type="text" name="youtube" placeholder="یوتوب" value="{{ $user->youtube }}"/>
                <x-input type="text" name="instagram" placeholder="اینستاگرام" value="{{ $user->instagram }}"/>
                <x-input type="text" name="telegram" placeholder="تلگرام" value="{{ $user->telegram }}"/>


                <x-select name="role">
                    <option value="">مشاهده نقش های کاربر</option>
                    @foreach($user->roles as $userRole)
                        <option value="{{ $userRole->name }}">{{ $userRole->name }}</option>
                    @endforeach
                </x-select>

                <x-select name="status" required>
                    <option value="">وضعیت حساب</option>
                    @foreach(\Webamooz\User\Models\User::$statuses as $status)
                        <option value="{{ $status }}" @if($status == $user->status) selected @endif>@lang($status)</option>
                    @endforeach
                </x-select>

                <x-file name="image" placeholder="آپلود پروفایل کاربر" :value="$user->image" />  {{-- value="{{ $user->media->files[300] }}" --}}
                <x-input type="password" name="password" placeholder="رمز عبور جدید" />

                <x-text-area name="bio" placeholder="بیوگرافی کاربر" value="{{ $user->bio }}" />

                <button type="submit" class="btn btn-webamooz_net mt-4">به روزرسانی</button>

            </form>
        </div>
    </div>

@endsection

@section('js')
    <script src="{{ asset('panel/js/tagsInput.js') }}"></script>
    <script>
        @include('Common::layouts.feedbacks')
    </script>
@endsection





//-------------------- modules/Webamooz/User/database/migrations/2014_10_12_000000_create_users_table.php
$table->unsignedBigInteger('image_id')->nullable();
$table->foreign('image_id')->references('id')->on('media')->onDelete('SET NULL');



//-------------------- modules/Webamooz/RolePermissions/Model/Role.php
const ROLE_TEACHER = 'teacher';
const ROLE_SUPER_ADMIN = 'super admin';
const ROLE_STUDENT = 'student';
public static array $roles = [
    self::ROLE_TEACHER => [
        Permission::PERMISSION_TEACH,  //has many-permission inside role
    ],
    self::ROLE_SUPER_ADMIN => [
        Permission::PERMISSION_SUPER_ADMIN,
    ],
    self::ROLE_STUDENT => [
    ]
];


//-------------------- modules/Webamooz/User/database/Seeders/UsersTableSeeder.php
public function run()
{
    //findOrCreate -> بیا پیدا کن اگر وجود داشت کاری نکن ولی اگر وجود نداشت بیا بساز + یک دیتا میگیره به صورت استرینگ و اسم دیتا
    foreach (User::$defaultUsers as $user) {
        User::firstOrCreate(
            ['email' => $user['email'], 'name' => $user['name']]  //شرطی که گذاشتی برای قسمت first بیا پیدا کنه مقدار کاربر وگرنه بسازش
            ,[
            'name' => $user['name'],
            'email' => $user['email'],
            'password' => bcrypt($user['password'])
        ])->assignRole($user['role']);
    }
}



//-------------------- config/app.php
\Webamooz\RolePermissions\Providers\RolePermissionServiceProvider::class,  //اول نقش و مجوز ساخته بشه بعد کاربر
\Webamooz\User\Providers\UserServiceProvider::class,






//-------------------- app/Http/Middleware/StoreUserIp.php
public function handle(Request $request, Closure $next)
{
    if (auth()->check() && auth()->user()->ip != $request->ip()) {  //auth()->user()->ip != $request->ip() -> اگر آی پی تغییر کرد بیا بساز براش + لاگین باشه
        auth()->user()->ip = $request->ip();
        auth()->user()->save();
    }
    return $next($request);
}





//-------------------- public/panel/js/js.js
function updateConfirmationStatus(event, route, message, status, field) {
    event.preventDefault()

    if (confirm(message)) {  //confirm ok or true -> condition
        //1)url , 2)parameters(@ method('delete') , @ csrf)
        $.post(route, {_token: $('meta[name="_token"]').attr('content'), _method: "PATCH"})
            .done(function (response) {  //اگر درست بود این اجرا میکنه + خود جی کوری شرط ایف درونش داره + response get jquery
                if (status = "تایید شده"){
                    $(event.target).closest('tr').find('td.' + field).html("<span class='text-success fw-bold'>" + status + "</span>");  //convert jquery
                }else {
                    $(event.target).closest('tr').find('td.' + field).html("<span class='text-error fw-bold'>" + status + "</span>");  //convert jquery
                }



function deleteItem(event, route, element = 'tr') {
    event.preventDefault()

    if (confirm("آیا از حذف این آیتم مطعن هستید!")) {  //confirm ok or true -> condition
        //1)url , 2)parameters(@ method('delete') , @ csrf)
        $.post(route, {_token: $('meta[name="_token"]').attr('content'), _method: "delete"})
            .done(function (response) {  //اگر درست بود این اجرا میکنه + خود جی کوری شرط ایف درونش داره + response get jquery
                //event.target(tag a) + closest('tr' اگر تگ لینک بزاریک فقط دکمه حذف) نزدیک ترین تی آر بگیر + remove() حذف بکن
                event.target.closest(element).remove();
                $.toast({
                    heading: response.status,
                    text: response.message,
                    showHideTransition: 'slide',
                    icon: 'success'
                })
            })

            .fail(function (response) {  //اگر غلط باش این مقدار اجرا میکنه + خود جی کوری شرط ایف درونش داره + response get jquery
                $.toast({
                    heading: 'عملیات نا موفق',
                    text: 'عملیات با خطا مواجه شد!',
                    showHideTransition: 'slide',
                    icon: 'error'
                })
            })
    }
}







































//------------------------------------------------------------------------ Leesson 100 (Updated User role in one to one)
//-------------------- modules/Webamooz/User/Http/Controllers/UserController.php
public function edit($user_id, RoleRepository $roleRepository)
{
    $this->authorize('edit', User::class);
    $user = $this->userRepository->findById($user_id);
    $roles = $roleRepository->all();
    return view('User::Admin.edit', compact('user', 'roles'));
}

public function update(UpdateUserRequest $request, $user_id)
{
    $this->authorize('edit', User::class);
    $user = $this->userRepository->findById($user_id);

    if ($request->hasFile('image')) {
        $request->request->add(['image_id' => MediaFileService::upload($request->file('image'))->id]);
        if ($user->image) {  //if image exist -> delete
            $user->image->delete();
        }
    } else {
        $request->request->add(['image_id' => $user->image_id]);
    }

    $this->userRepository->update($user_id, $request);
    $this->newFeedback();
    return redirect()->back();
}





//-------------------- modules/Webamooz/User/Resources/Views/Admin/index.blade.php
<div class="row no-gutters">
    <div class="col-12 margin-left-10 margin-bottom-15 border-radius-3">
        <p class="box__title">کاربران</p>
        <div class="table__box">
            <table class="table">
                <thead role="rowgroup">
                <tr role="row" class="title-row">
                    <th>ردیف</th>
                    <th>شناسه</th>
                    <th>نام و نام خانوادگی</th>
                    <th>ایمیل</th>
                    <th>شماره موبایل</th>
                    <th>سطح کاربری</th>
                    <th>تاریخ عضویت</th>
                    <th>آی پی</th>
                    <th>وضعیت حساب</th>
                    <th>عملیات</th>
                </tr>
                </thead>
                <tbody>
                @foreach ($users as $index => $user)
                    <tr role="row" class="">
                        <td>{{ $users->firstItem() + $index }}</td>
                        <td>{{ $user->id }}</td>
                        <td>{{ $user->name }}</td>
                        <td>{{ $user->email }}</td>
                        <td>{{ $user->mobile }}</td>
                        <td>
                            <ul>
                                @foreach($user->roles as $userRole)
                                    <li>@lang($userRole->name)</li>
                                @endforeach
                            </ul>
                        </td>
                        <td>{{ $user->created_at }}</td>
                        <td>{{ $user->ip }}</td>
                        <td class="confirmation_status">{!! $user->hasVerifiedEmail()
                        ? "<span class='text-success fw-bold'>تایید شده</span>"  : "<span class='text-error fw-bold'>تایید نشده</span>" !!}</td>
                        <td>
                            <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
                               onclick="deleteItem(event, '{{ route('users.destroy' ,$user->id) }}')"></a>
                            <a href="{{ route('users.edit' , $user->id) }}"
                               class="item-edit btn_info_customize mlg-15" title="ویرایش"></a>
                            <a href="" onclick="updateConfirmationStatus(event , '{{ route('users.manualVerify' , $user->id) }}' ,
                                'آیا از تایید ایمیل کاربر مطمعن هستید؟' , 'تایید شده' , 'confirmation_status')"
                               class="item-confirm mlg-15 btn_success_customize" title="تایید ایمیل کاربر"></a>
                        </td>
                    </tr>
                @endforeach
                {{ $users->links() }}
                </tbody>
            </table>
        </div>
    </div>
</div>




//-------------------- modules/Webamooz/User/Resources/Views/Admin/edit.blade.php
<div class="row no-gutters bg-white margin-bottom-20">
    <div class="col-12">
        <p class="box__title">ویرایش کاربر</p>

        <form action="{{ route('users.update' , $user->id) }}" method="post" class="padding-30" enctype="multipart/form-data">
            @csrf
            @method('PATCH')

            <x-input type="text" name="name" placeholder="عنوان کاربر"  required value="{{ $user->name }}"/>
            <x-input type="text" name="email" placeholder="ایمیل کاربر" required value="{{ $user->email }}"/>
            <x-input type="text" name="username" placeholder="نام کاربری" value="{{ $user->username }}"/>
            <x-input type="text" name="mobile" placeholder="موبایل کاربر" value="{{ $user->mobile }}"/>
            <x-input type="text" name="head_line" placeholder="عنوان" value="{{ $user->head_line }}"/>
            <x-input type="text" name="telegram" placeholder="تلگرام" value="{{ $user->telegram }}"/>

            <x-select name="status" required>
                <option value="">وضعیت حساب</option>
                @foreach(\Webamooz\User\Models\User::$statuses as $status)
                    <option value="{{ $status }}" @if($status == $user->status) selected @endif>@lang($status)</option>
                @endforeach
            </x-select>

            <x-select name="role">
                <option value="">یک نقش کاربری انتخاب کنید</option>
                @foreach($roles as $role)
                    <option value="{{ $role->name }}" {{ $user->hasRole($role->name) ? 'selected' : '' }}>@lang($role->name)</option>
                @endforeach
            </x-select>

            <x-file name="image" placeholder="آپلود پروفایل کاربر" :value="$user->image" />  {{-- value="{{ $user->media->files[300] }}" --}}
            <x-input type="password" name="password" placeholder="رمز عبور جدید" />

            <x-text-area name="bio" placeholder="بیوگرافی کاربر" value="{{ $user->bio }}" />

            <button type="submit" class="btn btn-webamooz_net mt-4">به روزرسانی</button>

        </form>
    </div>
</div>

<div class="row no-gutters">

    <div class="col-6 margin-bottom-20">
        <p class="box__title">دوره های مدرس</p>
        <div class="table__box">
            <table class="table">
                <thead role="rowgroup">
                <tr role="row" class="title-row">
                    <th>شناسه</th>
                    <th>نام دوره</th>
                    <th>نام مدرس</th>
                </tr>
                </thead>
                <tbody>
                @foreach($user->courses as $course)
                    <tr role="row" class="">
                        <td><a href="">{{ $course->id }}</a></td>
                        <td><a href="">{{ $course->title }}</a></td>
                        <td><a href="">{{ $course->teacher->name }}</a></td>
                    </tr>
                @endforeach
                </tbody>
            </table>
        </div>
    </div>
</div>



//-------------------- modules/Webamooz/User/Models/User.php
public function courses()
{
    return $this->hasMany(Course::class, 'teacher_id');  //هر کاربر با نقش مدرس تعداد زیادی دوره دارد
}
























//------------------------------------------------------------------------------------------- Lesson 98 (Common Session)
//-------------------- modules/Webamooz/Common/helpers.php
function newFeedback($heading, $text, $type)
{
    $session = session()->has('feedbacks') ? session()->get('feedbacks') : [];
    $session[] = ["heading" => $heading, "text" => $text, "type" => $type];
    session()->flash('feedbacks', $session);
}



//-------------------- config/app.php
\Webamooz\Common\Providers\CommonServiceProvider::class,




//-------------------- modules/Webamooz/Common/Providers/CommonServiceProvider.php
public function register()
{
    $this->loadViewsFrom(__DIR__ . "/../Resources/Views/", "Common");
}

public function boot()
{
    return __DIR__ . "/../helpers.php";  //better use composer.json inside module common
}



//-------------------- modules/Webamooz/Common/Resources/Views/layouts/feedbacks.blade.php
@if (session()->has('feedbacks'))
    @foreach(session()->get('feedbacks') as $message)
        $.toast({
        heading: "{{ $message['heading'] }}",
        text: "{{ $message['text'] }}",
        showHideTransition: 'slide',
        icon: "{{ $message['type'] }}"
        })
    @endforeach
@endif




































//--------------------------------------------------------------------------------- Lesson 99 (Composer.json in modules)
1) modules/Webamooz/Common/composer.json  //تا بیاد ماژول یا پکیج جدید ما معرفی کنه src هر چیزی غیر کامپوزر درون پوشه
2) composer require webamooz/common  //name composer.json



//-------------------- composer.json
"repositories" : [                //Add after -> require-dev
    {
        "type" : "path",
        "url" : "./modules/Webamooz/Common/"
    }
],

"Webamooz\\Common\\": "modules/Webamooz/Common/",    //DELETE in composer.json





//-------------------- modules/Webamooz/Common/Providers/CommonServiceProvider.php
public function boot()
{
    return __DIR__ . "/../helpers.php";    //DELETE
}




//-------------------- config/app.php
\Webamooz\Common\Providers\CommonServiceProvider::class,  //DELETE + move in composer.jsom inside folder Common




//-------------------- modules/Webamooz/Common/composer.json
{
    "name": "webamooz/common",
    "autoload": {
        "psr-4": {
            "Webamooz\\Common\\": "src"
        },
        "files": [
            "src/helpers.php"
        ]
    },
    "extra": {
        "laravel": {
            "providers": [
                "\\Webamooz\\Common\\Providers\\CommonServiceProvider"
            ]
        }
    }
}




























//----------------------------------------------------------------------------------------- Lesson 101 (Composer update)
1) composer update (every weeks)

















//---------------------------------------------------------------------------------- Lesson 102,104 (Image profile user)
1) php artisan make:component UserPhoto
2) 'sheba' => 'required|string|size:24',  //size:24 -> باید دقیقا برابر با 24 باشد نه کمتر نه بیشتر




//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/sidebar.blade.php
<x-user-photo  />

<ul>
    @foreach(config('sidebar.items') as $sidebarItem)
//مقدار اولشم یکی بود صحیح بر میگردونه برای صفحات ایجاد و ویرایش
// str_starts_with(request()->url(localhost:8000/categories/1/edit) == localhost:8000/categories)
            <li class="item-li {{ $sidebarItem['icon'] }} @if(str_starts_with(request()->url() , $sidebarItem['url'])) is-active @endif ">
                <a href="{{ $sidebarItem['url'] }}">{{ $sidebarItem['title'] }}</a></li>
    @endforeach
</ul>




//-------------------- resources/views/components/user-photo.blade.php
<form action="{{ route('users.photo') }}" method="POST" enctype="multipart/form-data">
    @csrf
    <div class="profile__info border cursor-pointer text-center">
            <div class="avatar__img">
                @if (auth()->user()->image)
                    <img src="{{ auth()->user()->image->thumb }}" class="avatar___img">
                @else
                    <img src="{{ asset('panel/img/pro.jpg') }}" class="avatar___img">
                @endif
                <input type="file" name="userPhoto" accept="image/*" class="hidden avatar-img__input"
                onchange="this.form.submit()">
                <div class="v-dialog__container" style="display: block;"></div>
                <div class="box__camera default__avatar"></div>
            </div>


        <span class="profile__name"> کاربر : {{ auth()->user()->name }} </span>
    </div>
</form>




//-------------------- modules/Webamooz/User/Routes/user_routes.php
Route::post('/users/photo', [UserController::class, 'updatePhoto'])->name('users.photo');
Route::get('/users/profile', [UserController::class, 'profile'])->name('users.profile');
Route::post('/users/profile', [UserController::class, 'updateProfile'])->name('users.profile.update');



//-------------------- modules/Webamooz/User/Http/Controllers/UserController.php
public function updatePhoto(UpdateUserPhotoRequest $request)  //route -> user photo
{
    $this->authorize('updateProfile', User::class);
    $media = MediaFileService::upload($request->file('userPhoto'));
    if (auth()->user()->image) auth()->user()->image->delete();  //image(relationship) -> if user has imaged -> go deleted
    auth()->user()->image_id = $media->id;
    auth()->user()->save();
    $this->newFeedback();
    return back();
}

public function profile()
{
    $this->authorize('updateProfile', User::class);
    return view('User::Admin.profile');
}

public function updateProfile(UpdateProfileInformationRequest $request)
{
    $this->authorize('updateProfile', User::class);
    $this->userRepository->updateProfile($request);
    $this->newFeedback();
    return back();
}

public function viewProfile()
{

}



//-------------------- modules/Webamooz/User/Http/Requests/UpdateUserPhotoRequest.php
'userPhoto' => ['required', 'image', 'mimes:png,jpg,jpeg', 'max:1024'],




//-------------------- modules/Webamooz/User/Models/User.php
public function profilePath()  //اگر کابر نام کابری داشت تو مسیر مشهده پروفایل قرار بده اگر نداشت دستی بنویس یوزرنیم
{
    //$this -> auth()->user()
    return $this->username ? route('users.view.profile', $this->username) : route('users.view.profile', 'username');
}



//-------------------- modules/Webamooz/User/Http/Requests/UpdateProfileInformationRequest.php
public function authorize()
{
    return true;
}

public function rules()
{
    $rules = [
        'name' => 'required|min:3|max:200',
        'email' => 'required|email|max:200|unique:users,email,' . auth()->user()->id,
        'username' => 'nullable|string|unique:users,username,' . auth()->user()->id,
        'mobile' => 'nullable|numeric|unique:users,mobile,' . auth()->user()->id,
        'password' => ['nullable', new ValidPassword()]
    ];

    if (auth()->user()->hasPermissionTo(Permission::PERMISSION_TEACH)) {
        $rules += [
            'card_number' => 'required|string|size:16',
            'sheba' => 'required|string|size:24',
            'head_line' => 'required|string|min:3|max:100',
            'telegram' => 'required|string',
            'bio' => 'required|string',
        ];
    }
    $rules['username'] = 'required|string|unique:users,username,' . auth()->user()->id;

    return $rules;
}

public function attributes()
{
    return [
        'name' => 'نام',
        'email' => 'ایمیلی',
        'username' => 'نام کابری',
        'mobile' => 'موبایل',
        'password' => 'رمز عبور جدید',
        'card_number' => 'شماره کارت بانکی',
        'sheba' => 'شماره شبای بانکی',
        'head_line' => 'عنوان',
        'telegram' => 'تلگرام',
        'bio' => 'بیوگرافی'
    ];
}


//-------------------- database/migrations/2014_10_12_000000_create_users_table.php
$table->string('card_number', 16)->nullable();
$table->string('sheba', 24)->nullable();



//-------------------- modules/Webamooz/User/Resources/Views/Front/verify.blade.php
<div class="card-header">
    <p class="activation-code-title">
        کد فرستاده شده به ایمیل.  <span>{{ auth()->user()->email }}</span> را وارد کنید
        ایمیلتان را اشتباه وارد کرده اید؟ <a href="{{ route('users.profile') }}">برای ویرایش ایمیل کلیک کنید</a>
    </p>
</div>



//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/header.blade.php
<form action="{{ route('logout') }}" method="POST" id="logout-form">
    @csrf
    <a href="{{ route('logout') }}" class="logout" title="خروج"
       onclick="event.preventDefault();document.getElementById('logout-form').submit();"></a>
</form>



//-------------------- modules/Webamooz/Dashboard/Config/sidebar.php
'items' => [
    'dashboard' => [],  //sort customize -> خودمون ترتبی لیست سایدبار مشخص کنیم
    'categories' => [],
    'role-permissions' => [],
    'users' => [],
    'userProfile' => []
]





































//-------------------------------------------------------------------------------- Lesson 105,108 (Session فصل های دوره)
1) php artisan make:model Season -mc



//-------------------- modules/Webamooz/RolePermissions/Providers/RolePermissionServiceProvider.php
public function boot()
{
    $this->app->booted(function () {
        config()->set('sidebar.items.role-permissions', [
            "icon" => "i-role-permissions",
            "title" => "نقش های کاربر",
            "url" => route('role-permissions.index'),
            "permission" => Permission::PERMISSION_MANAGE_USERS,
        ]);
    });
}



//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
config()->set('sidebar.items.users', [
    "icon" => "i-users",
    "title" => "کاربران",
    "url" => route('users.index'),
    "permission" => Permission::PERMISSION_MANAGE_USERS
]);


-------------------- modules/Webamooz/Course/Providers/CourseServiceProvider.php
public function boot()
{
    config()->set('sidebar.items.courses', [
        'icon' => 'i-courses',
        'title' => 'دوره ها',
        'url' => route('courses.index'),
        'permission' => Permission::PERMISSION_MANAGE_COURSES
    ]);
}


//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/sidebar.blade.php
<ul>
    @foreach(config('sidebar.items') as $sidebarItem)
//str_starts_with(request()->url(localhost:8000/categories/1/edit) == localhost:8000/categories) //مقدار اولشم یکی بود صحیح بر میگردونه برای صفحات ایجاد و ویرایش
//!array_key_exists('permission',$sidebarItem) ااگر سرویس پروایدر پرمیژن نداشت نمایش + یا کاربر مجوز سوپر ادمین داشت نمایش + یا دسترسی که تعیین کردین درون پروایدر
            @if (!array_key_exists('permission' , $sidebarItem) ||
                auth()->user()->hasPermissionTo($sidebarItem['permission']) ||
                auth()->user()->hasPermissionTo(\Webamooz\RolePermissions\Model\Permission::PERMISSION_SUPER_ADMIN))

            <li class="item-li {{ $sidebarItem['icon'] }} @if(str_starts_with(request()->url() , $sidebarItem['url'])) is-active @endif ">
                <a href="{{ $sidebarItem['url'] }}">{{ $sidebarItem['title'] }}</a></li>
            @endif
    @endforeach
</ul>



//-------------------- resources/views/components/user-photo.blade.php
<img src="{{ auth()->user()->thumb }}" class="avatar___img">



//-------------------- modules/Webamooz/User/Models/User.php
public function getThumbAttribute(): string  //کاربر اگر تصویری دااشت نمایش بده وگرنه بیا این تصویر پیش فرض قرار بده
{
    if ($this->image) {
        return '/storage/' . $this->image->files['300'];  //get image size 300(thumb بند انگشتی)
    }
    return '/panel/img/profile.jpg';
}









//-------------------- modules/Webamooz/Course/Resources/Views/details.blade.php
@includeIf('Course::seasons.index')



//-------------------- modules/Webamooz/Course/Routes/course_route.php
$router->get('/courses/{course}/details', [CourseController::class, 'details'])->name('courses.details');


//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function details($course_id, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    return view('Course::details', compact('course'));
}



//-------------------- modules/Webamooz/Course/Resources/Views/index.blade.php
<td><a href="{{ route('courses.details' , $course->id) }}" class="text-info">مشاهده</a></td>




//-------------------- modules/Webamooz/Course/Providers/CourseServiceProvider.php
public function register()
{
    $this->loadRoutesFrom(__DIR__ . '/../Routes/course_route.php');
    $this->loadRoutesFrom(__DIR__ . '/../Routes/season_route.php');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views', 'Course');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang/');  //file ترجمه کلممات به صورت جیسون
    $this->loadTranslationsFrom(__DIR__ . '/../Lang/', 'Course');  //lang فایل ترجمه ولیدیشن زبان های محتلف
    Gate::policy(Course::class, CoursePolicy::class);  //Model::class , ModelPolicy::class
    Gate::policy(Season::class, SeasonPolicy::class);
}



//-------------------- modules/Webamooz/Course/Routes/season_route.php
Route::group(['namespace' => 'Webamooz\Course\Http\Controllers', 'middleware' => ['web', 'auth', 'verified']], function ($router) {
    $router->patch('/seasons/{season}/accept', [SeasonController::class, 'accept'])->name('seasons.accept');
    $router->patch('/seasons/{season}/reject', [SeasonController::class, 'reject'])->name('seasons.reject');
    $router->post('/seasons/{course_id}', [SeasonController::class, 'store'])->name('seasons.store');
});




//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function details($course_id, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    $this->authorize('details', $course);
    return view('Course::details', compact('course'));
}




//-------------------- modules/Webamooz/Course/Policies/CoursePolicy.php
public function details($user, $course)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES) && $course->teacher_id == $user->id) return true;
    return null;
}

public function createSeason($user, $course)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES) && $course->teacher_id == $user->id) return true;
    return null;
}



//-------------------- modules/Webamooz/Course/Http/Controllers/SeasonController.php
private $seasonRepository;
public function __construct(SeasonRepository $seasonRepository)
{
    $this->seasonRepository = $seasonRepository;
}

public function store(SeasonRequest $request, $course_id, CourseRepository $courseRepository)
{
    $this->authorize('createSeason', $courseRepository->findById($course_id));
    $this->seasonRepository->store($request, $course_id);
    $this->newFeedback();
    return back();
}

public function edit($seasons_id)
{
    $season = $this->seasonRepository->findById($seasons_id);
    $this->authorize('edit', $season);
    return view('Course::seasons.edit', compact('season'));
}


public function update(SeasonRequest $request, $seasons_id)
{
    $season = $this->seasonRepository->findById($seasons_id);
    $this->authorize('edit', $season);
    $this->seasonRepository->update($seasons_id, $request);
    $this->newFeedback();
    return to_route('courses.details', $season->course_id);
}

public function destroy($season_id)
{
    $season = $this->seasonRepository->findById($season_id);
    $this->authorize('delete', $season);
    $season->delete();
    return AjaxResponses::successResponse('عملیات حذف سر فصل دوره با موفقیت انجام شد');
}


public function accept($season_id)
{
    $this->authorize('change_confirmation_status', Season::class);  //just chanage manage course
    if ($this->seasonRepository->updateConfirmationStatus($season_id, Season::CONFIRMATION_STATUS_ACCEPTED)) {
        return AjaxResponses::successResponse("دوره با موفقیت تایید شد");
    }
    return AjaxResponses::failedResponse("تایید دوره با خطا مواجه شد!");
}

public function reject($season_id)
{
    $this->authorize('change_confirmation_status', Season::class);  //Season::class -> بر روی تمام دوره ها اعمال بشه بتونه تغییر بده
    if ($this->seasonRepository->updateConfirmationStatus($season_id, Season::CONFIRMATION_STATUS_REJECTED)) {
        return AjaxResponses::successResponse("دوره با موفقیت رد شد");
    }
    return AjaxResponses::failedResponse("رد دوره با خطا مواجه شد!");
}

public function lock($season_id)
{
    $this->authorize('change_confirmation_status', Season::class);
    if ($this->seasonRepository->updateStatus($season_id, Season::STATUS_LOCKED)) {
        return AjaxResponses::successResponse("دوره با موفقیت قفل شد");
    }
    return AjaxResponses::failedResponse("قفل دوره با خطا مواجه شد!");
}

public function unlock($season_id)
{
    $this->authorize('change_confirmation_status', Season::class);
    if ($this->seasonRepository->updateStatus($season_id, Season::STATUS_OPENED)) {
        return AjaxResponses::successResponse('دوره با موفقیت باز شد');
    }
    return AjaxResponses::failedResponse('باز شدن دوره با خطا مواجه شد!');
}


function newFeedback($heading = 'موفقیت آمیر', $text = 'عملیات با موفقیت انجام شد', $type = 'success')
{
    $session = session()->has('feedbacks') ? session()->get('feedbacks') : [];  //هر چند تا که بسازیم سشن به اسم فیدبکز میاد صدا میزنه فراخوانی میکنه
    $session[] = ["heading" => $heading, "text" => $text, "type" => $type];  //session is array
    session()->flash('feedbacks', $session);
}






//-------------------- modules/Webamooz/Course/Policies/SeasonPolicy.php
public function edit($user, $season)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;

    return $user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES) && $season->course->teacher_id == $user->id;
}

public function delete($user, $season)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;  //فقط مدیر دوره ها بتونه حذف بکنه نه (مدرس دوره یا صاحب دوره)
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES) && $season->course->teacher_id == $user->id) return true;
    return null;
}

public function change_confirmation_status($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;
    return null;
}









//-------------------- modules/Webamooz/Course/Database/Migrations/2024_06_11_111332_create_seasons_table.php
Schema::create('seasons', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('course_id');
    $table->unsignedBigInteger('user_id');
    $table->string('title');
    $table->unsignedTinyInteger('number');  //if null -> autoincrement increase -> دستی میایم میگیم اضافه بشه خودکار اگر خالی بود
    $table->enum('confirmation_status', [\Webamooz\Course\Models\Season::$confirmationStatuses])
        ->default(\Webamooz\Course\Models\Season::CONFIRMATION_STATUS_PENDING);
    $table->enum('status', [\Webamooz\Course\Models\Season::$statuses])
        ->default(\Webamooz\Course\Models\Season::STATUS_OPENED);
    $table->timestamps();

    $table->foreign('course_id')->references('id')->on('courses')->onDelete('CASCADE');
    $table->foreign('user_id')->references('id')->on('users')->onDelete('CASCADE');
});



//-------------------- modules/Webamooz/Course/Models/season.php
const CONFIRMATION_STATUS_ACCEPTED = 'accepted';
const CONFIRMATION_STATUS_REJECTED = 'rejected';
const CONFIRMATION_STATUS_PENDING = 'pending';
public static array $confirmationStatuses = [self::CONFIRMATION_STATUS_ACCEPTED, self::CONFIRMATION_STATUS_REJECTED, self::CONFIRMATION_STATUS_PENDING];

const STATUS_OPENED = 'opened';
const STATUS_LOCKED = 'locked';
public static array $statuses = [self::STATUS_OPENED, self::STATUS_LOCKED];

protected $fillable = [
    'course_id',
    'user_id',
    'title',
    'number',
    'confirmation_status',
];

public function course()
{
    return $this->belongsTo(Course::class);
}

public function user()
{
    return $this->belongsTo(User::class);
}




//-------------------- modules/Webamooz/User/Models/User.php
public function seasons()
{
    return $this->hasMany(Season::class);
}





//-------------------- modules/Webamooz/Course/Models/Course.php
public function seasons()
{
    return $this->hasMany(Season::class);
}




//-------------------- modules/Webamooz/Course/Resources/Views/seasons/index.blade.php
<form action="{{ route('seasons.store' , $course->id) }}" method="post" class="padding-30">
    @csrf
    <x-input type="text" name="title" placeholder="عنوان سرفصل" class="text" />
    <x-input type="text" name="number" placeholder="شماره سرفصل" class="text" />
    <button type="submit" class="btn btn-webamooz_net mt-5">اضافه کردن</button>
</form>

<table class="table">
    <thead role="rowgroup">
    <tr role="row" class="title-row">
        <th class="p-r-90">شناسه</th>
        <th>عنوان فصل</th>
        <th>وضعیت</th>
        <th>وضعیت تایید</th>
        <th>عملیات</th>
    </tr>
    </thead>
    <tbody>
    @foreach($course->seasons/*->where('user_id' , auth()->user()->id)*/ as $season)
        <tr role="row" class="">
            <td><a href="">{{ $season->number }}</a></td>
            <td><a href="">{{ $season->title }}</a></td>
            <td class="status">@lang($season->status)</td>
            <td class="confirmation_status">@lang($season->confirmation_status)</td>
            <td>
                <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
                   onclick="deleteItem(event , '{{ route('seasons.destroy' , $season->id) }}')"></a>
                <a href="{{ route('seasons.edit' , $season->id) }}" class="item-edit btn_info_customize mlg-15" title="ویرایش"></a>


                {{-- role(teacher) -> فقط میتونه مدرس حذف یا ویرایش کنه دسترسی به تایید یا رد یا قفل یا باز ندارد --}}
                @can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_COURSES)

                    <a href="" onclick="updateConfirmationStatus(event , '{{ route('seasons.accept' , $season->id) }}' ,
                        'آیا از تایید سرفصل دوره مطمعن هستید؟' , 'تایید شده' , 'confirmation_status')"
                       class="item-confirm mlg-15 btn_success_customize" title="تایید شده"></a>

                    <a href="" onclick="updateConfirmationStatus(event , '{{ route('seasons.reject' , $season->id) }}' ,
                        'آیا از رد سرفصل دوره مطمعن هستید؟' , 'رد شده' , 'confirmation_status')"
                       class="item-reject mlg-15 btn_red_customize" title="رد شده"></a>

                    @if ($season->status == \Webamooz\Course\Models\Season::STATUS_OPENED)
                        <a href="" onclick="updateConfirmationStatus(event , '{{ route('seasons.lock' , $season->id) }}' ,
                            'آیا از قفل شدن دوره مطمعن هستید؟' , 'قفل شده' , 'status')"
                           class="item-lock mlg-15 btn_lock_customize" title="قفل شده"></a>
                    @else
                        <a href="" onclick="updateConfirmationStatus(event , '{{ route('seasons.unlock' , $season->id) }}' ,
                            'آیا از باز کردن دوره مطمعن هستید؟' , 'باز شده' , 'status')"
                           class="item-unlock mlg-15 btn_unlock_customize" title="باز شده"></a>
                    @endif
                @endcan

            </td>
        </tr>
    @endforeach

    </tbody>
</table>




//-------------------- modules/Webamooz/Course/Http/Requests/SeasonRequest.php
public function authorize()
{
    return auth()->check() == true;
}

public function rules()
{
    return [
        'title' => 'required|min:3|max:200',
        'number' => 'nullable|numeric|min:0|max:250',
    ];
}

public function attributes()
{
    return [
        'title' => 'عنوان سر فصل',
        'number' => 'شماره سر فصل',
    ];
}




//-------------------- modules/Webamooz/Dashboard/Config/sidebar.php
<?php

return [
    'items' => [
        'dashboard' => [],  //sort customize -> خودمون ترتبی لیست سایدبار مشخص کنیم
        'categories' => [],
        'courses' => [],
        'users' => [],
        'userInformation' => [],
        'role-permissions' => [],
    ]
];
































//------------------------------------------------------------------------------------------ Lesson 109 (Season Testing)
//-------------------- modules/Webamooz/Course/Tests/Feature/SeasonTest.php
class SeasonTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function test_permitted_user_can_see_course_details_page()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->get(route('courses.details', $course->id))->assertOk();

        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course->teacher_id = auth()->id();  //کاربر ساده مجوز صاحب دوره دادم و کردمش صاحب دوره
        $course->save();
        $this->get(route('courses.details', $course->id))->assertOk();

        $this->actingAsSuperAdmin();
        $this->get(route('courses.details', $course->id))->assertOk();
    }

    public function test_not_permitted_user_can_not_see_course_details_page()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();

        $this->actingAsUser();
        $this->get(route('courses.details', $course->id))->assertStatus(403);

        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->get(route('courses.details', $course->id))->assertStatus(403);
    }

    public function test_permitted_user_can_create_season()
    {
//      $this->withoutExceptionHandling();
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->assertEquals(1, Season::count());

        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course->teacher_id = auth()->id();  //کاربر ساده مجوز صاحب دوره دادم و کردمش صاحب دوره
        $course->save();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel 2', //number -> automatic 2
        ]);
        $this->assertEquals(2, Season::count());
        $this->assertEquals(2, Season::find(2)->number);
    }

    public function test_not_permitted_user_can_not_create_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();

        $this->actingAsUser();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel 1', //number -> automatic 2
        ])->assertStatus(403);

        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel 2', //number -> automatic 2
        ])->assertStatus(403);
    }

    public function test_permitted_user_can_edit_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->get(route('seasons.edit', 1))->assertOk();

        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course->teacher_id = auth()->user()->id;
        $course->save();
        $this->get(route('seasons.edit', 1))->assertOk();
    }

    public function test_not_permitted_user_can_not_see_edit_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->get(route('seasons.edit', 1))->assertOk();

        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->get(route('seasons.edit', 1))->assertStatus(403);
    }

    public function test_permitted_user_can_update_season()
    {
//      $this->withoutExceptionHandling();
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->assertEquals(1, Season::count());

        $this->patch(route('seasons.update', 1), [
            'title' => 'routing laravel'
        ]);
        $this->assertEquals('routing laravel', Season::find(1)->title);

        //----- owner course
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course->teacher_id = auth()->id();  //کاربر ساده مجوز صاحب دوره دادم و کردمش صاحب دوره
        $course->save();
        $this->patch(route('seasons.update', 1), [
            'title' => 'model laravel',
            'number' => 5
        ]);
        $this->assertEquals('5', Season::find(1)->number);
    }


    public function test_not_permitted_user_can_not_update_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->assertEquals(1, Season::count());

        //----- normalUser
        $this->actingAsUser();
        $this->patch(route('seasons.update', 1), [
            'title' => 'test laravel'
        ])->assertStatus(403);
        $this->assertEquals('introduction laravel', Season::find(1)->title);

        //----- owner course but course not for you اما دوره برای خودش نیست
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->patch(route('seasons.update', 1), [
            'title' => 'test laravel'
        ])->assertStatus(403);
        $this->assertEquals('introduction laravel', Season::find(1)->title);
    }

    public function test_permitted_user_can_delete_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->assertEquals(1, Season::count());
        $this->delete(route('seasons.destroy', 1))->assertOk();
        $this->assertEquals(0, Season::count());

        //----- owner course
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course->teacher_id = auth()->id();  //کاربر ساده مجوز صاحب دوره دادم و کردمش صاحب دوره
        $course->save();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '2'
        ]);
        $this->delete(route('seasons.destroy', 2))->assertOk();
        $this->assertEquals(0, Season::count());
    }

    public function test_not_permitted_user_can_not_delete_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->assertEquals(1, Season::count());

        //----- normalUser
        $this->actingAsUser();
        $this->delete(route('seasons.destroy', 1))->assertStatus(403);
        $this->assertEquals(1, Season::count());

        //----- permission ownerCourse + but not have -> اما صاحب دوره نیست
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->delete(route('seasons.destroy', 1))->assertStatus(403);
        $this->assertEquals(1, Season::count());
    }

    public function test_permitted_user_can_accept_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->assertEquals(1, Season::count());

        $this->assertEquals(Season::CONFIRMATION_STATUS_PENDING, Season::find(1)->confirmation_status);
        $this->patch(route('seasons.accept', 1))->assertOk();
        $this->assertEquals(Season::CONFIRMATION_STATUS_ACCEPTED, Season::find(1)->confirmation_status);

        //----- owner course + فقط مدیر دوره دسترسی دارد نه صاحب دوره
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course->teacher_id = auth()->id();  //کاربر ساده مجوز صاحب دوره دادم و کردمش صاحب دوره
        $course->save();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'Route laravel',
            'number' => '2'
        ]);

        $this->assertEquals(Season::CONFIRMATION_STATUS_PENDING, Season::find(2)->confirmation_status);
        $this->patch(route('seasons.accept', 2))->assertStatus(403);
        $this->assertEquals(Season::CONFIRMATION_STATUS_PENDING, Season::find(2)->confirmation_status);
    }


    public function test_permitted_user_can_reject_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->assertEquals(1, Season::count());

        $this->assertEquals(Season::CONFIRMATION_STATUS_PENDING, Season::find(1)->confirmation_status);
        $this->patch(route('seasons.reject', 1))->assertOk();
        $this->assertEquals(Season::CONFIRMATION_STATUS_REJECTED, Season::find(1)->confirmation_status);

        //----- owner course + فقط مدیر دوره دسترسی دارد نه صاحب دوره
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course->teacher_id = auth()->id();  //کاربر ساده مجوز صاحب دوره دادم و کردمش صاحب دوره
        $course->save();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'Route laravel',
            'number' => '2'
        ]);

        $this->assertEquals(Season::CONFIRMATION_STATUS_PENDING, Season::find(2)->confirmation_status);
        $this->patch(route('seasons.reject', 2))->assertStatus(403);
        $this->assertEquals(Season::CONFIRMATION_STATUS_PENDING, Season::find(2)->confirmation_status);
    }

    public function test_permitted_user_can_lock_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->assertEquals(1, Season::count());

        $this->assertEquals(Season::STATUS_OPENED, Season::find(1)->status);
        $this->patch(route('seasons.lock', 1))->assertOk();
        $this->assertEquals(Season::STATUS_LOCKED, Season::find(1)->status);

        $this->patch(route('seasons.unlock', 1))->assertOk();
        //----- owner course + فقط مدیر دوره دسترسی دارد نه صاحب دوره
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course->teacher_id = auth()->id();  //کاربر ساده مجوز صاحب دوره دادم و کردمش صاحب دوره
        $course->save();
        $this->assertEquals(Season::STATUS_OPENED, Season::find(1)->status);
        $this->patch(route('seasons.lock', 1))->assertStatus(403);
        $this->assertEquals(Season::STATUS_OPENED, Season::find(1)->status);
    }

    public function test_permitted_user_can_unlock_season()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->post(route('seasons.store', $course->id), [
            'title' => 'introduction laravel',
            'number' => '1'
        ]);
        $this->assertEquals(1, Season::count());
        $this->patch(route('seasons.lock', 1))->assertOk();


        $this->assertEquals(Season::STATUS_LOCKED, Season::find(1)->status);
        $this->patch(route('seasons.unlock', 1))->assertOk();
        $this->assertEquals(Season::STATUS_OPENED, Season::find(1)->status);


        $this->patch(route('seasons.lock', 1))->assertOk();
        //----- owner course + فقط مدیر دوره دسترسی دارد نه صاحب دوره
        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course->teacher_id = auth()->id();  //کاربر ساده مجوز صاحب دوره دادم و کردمش صاحب دوره
        $course->save();
        $this->assertEquals(Season::STATUS_LOCKED, Season::find(1)->status);
        $this->patch(route('seasons.unlock', 1))->assertStatus(403);
        $this->assertEquals(Season::STATUS_LOCKED, Season::find(1)->status);
    }

    /*---------- Create User ----------*/
    public function createUser()
    {
        $user = User::create([
            'name' => 'mahdi',
            'email' => $this->faker->unique()->safeEmail(),
            'mobile' => '939818' . rand(1000, 9999),
            'email_verified_at' => now(),
            'password' => \Hash::make('12aBC!@'),
            'remember_token' => Str::random(10),
        ]);
        $this->actingAs($user);  //actingAs -> authentication + factory(User::class))->create() -> create user
        $this->seed(RolePermissionTableSeeder::class);
    }

    public function actingAsSuperAdmin()
    {
        $this->createUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_SUPER_ADMIN);
    }

    public function actingAsAdminCourse()
    {
        $this->createUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_COURSES);
    }

    public function actingAsUser()
    {
        $this->createUser();
    }

    /*---------- Create Data ----------*/
    public function createCategory()
    {
        return Category::create(['title' => $this->faker->title, 'slug' => $this->faker->slug]);
    }

    public function createCourse()
    {
        $data = $this->courseData() + ['confirmation_status' => Course::CONFIRMATION_STATUS_PENDING,];
        unset($data['image']);
        return Course::create($data);
    }

    public function courseData()
    {
        $category = $this->createCategory();
        return [
            'teacher_id' => auth()->id(),
            'category_id' => $category->id,
            'title' => $this->faker->sentence(2),
            'slug' => $this->faker->sentence(2),
            'priority' => 5,
            'price' => 1000000,
            'percent' => 45,
            'type' => Course::TYPE_FREE,
            'status' => Course::STATUS_NOT_COMPLETED,
            "image" => UploadedFile::fake()->image('banner.jpg', 150, 200),  //send file in testing -> UploadedFile
//          "pdf" => UploadedFile::fake()->create('test.pdf' , 120 , 'pdf'),  //send other file(pdf,word,excel,powerPoint,video,music) in testing
            'body' => $this->faker->word,
        ];
    }

}






























//--------------------------------------------------------------------------------- Lesson 110,112 (Lesson create,store)
1) php artisan make:migration create_lessons_table --create


//-------------------- modules/Webamooz/Course/Providers/CourseServiceProvider.php
public function register()
{
    $this->loadRoutesFrom(__DIR__ . '/../Routes/course_route.php');
    $this->loadRoutesFrom(__DIR__ . '/../Routes/season_route.php');
    $this->loadRoutesFrom(__DIR__ . '/../Routes/lessons_route.php');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views', 'Course');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang/');  //file ترجمه کلممات به صورت جیسون
    $this->loadTranslationsFrom(__DIR__ . '/../Lang/', 'Course');  //lang فایل ترجمه ولیدیشن زبان های محتلف
    Gate::policy(Course::class, CoursePolicy::class);  //Model::class , ModelPolicy::class
    Gate::policy(Season::class, SeasonPolicy::class);
}


//-------------------- modules/Webamooz/Course/Routes/lessons_route.php
Route::group(['namespace' => 'Webamooz\Course\Http\Controllers', 'middleware' => ['web', 'auth', 'verified']], function ($router) {
    $router->get('/courses/{course}/lesson/create', [LessonController::class, 'create'])->name('lessons.create');
    $router->post('/courses/{course}/lesson', [LessonController::class, 'store'])->name('lessons.store');
});



//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
private $lessonRepository;

public function __construct(LessonRepository $lessonRepository)
{
    $this->lessonRepository = $lessonRepository;
}

public function create($course_id, SeasonRepository $seasonRepository, CourseRepository $courseRepository)
{
    $seasons = $seasonRepository->getCourseSeasons($course_id);
    $course = $courseRepository->findById($course_id);
    return view('Course::lessons.create', compact('seasons', 'course'));
}

public function store($course_id, LessonRequest $request)
{
    $request->request->add(['media_id' => MediaFileService::upload($request->file('lesson_file'))->id]);
    $this->lessonRepository->store($course_id, $request);
    $this->newFeedback();
    return to_route('courses.details', $course_id);
}

function newFeedback($heading = 'موفقیت آمیر', $text = 'عملیات با موفقیت انجام شد', $type = 'success')
{
    $session = session()->has('feedbacks') ? session()->get('feedbacks') : [];  //هر چند تا که بسازیم سشن به اسم فیدبکز میاد صدا میزنه فراخوانی میکنه
    $session[] = ["heading" => $heading, "text" => $text, "type" => $type];  //session is array
    session()->flash('feedbacks', $session);
}




//-------------------- modules/Webamooz/Course/Repositories/SeasonRepository.php
public function findByIdAndCourseId($season_id, $course_id)
{
    return Season::where('course_id', $course_id)->where('id', $season_id)->first();
}




//-------------------- modules/Webamooz/Course/Resources/Views/details.blade.php
@foreach($lessons as $lesson)
    <tr role="row" class="" data-row-id="{{ $lesson->id }}">
        <td>
            <label class="ui-checkbox">
                <input type="checkbox" class="sub-checkbox" data-id="{{ $lesson->id }}">
                <span class="checkmark"></span>
            </label>
        </td>
        <td><a href="">{{ $lesson->number }}</a></td>
        <td>{{ $lesson->season->title }}</td>
        <td>{{ $lesson->title }}</td>
        <td>{{ $lesson->time }}</td>
        <td>@lang($lesson->confirmation_status)</td>
        <td>{{ $lesson->free ? 'همه' : 'شرکت کنندگان' }}</td>

    </tr>
@endforeach




//-------------------- modules/Webamooz/Course/Resources/Views/lessons/create.blade.php
<form action="{{ route('lessons.store' , $course->id) }}" method="post" class="padding-30" enctype="multipart/form-data">
    @csrf

    <x-input type="text" name="title" placeholder="عنوان درس *" required/>
    <x-input type="text" name="slug" placeholder="نام انگلیسی درس اختیاری" class="text-left" />
    <x-input type="number" name="time" placeholder="مدت زمان جلسه *" class="text-left" required/>
    <x-input type="number" name="number" placeholder="شماره جلسه" class="text-left" />

    @if ($seasons)
        <x-select name="season_id" class="text" required>
            <option value="">انتخاب سر فصل *</option>
            @foreach ($seasons as $season)
                <option value="{{ $season->id }}"
                        @if ($season->id == old('season_id')) selected @endif>{{ $season->title }}</option>
            @endforeach
        </x-select>
    @endif

    <div class="w-50 mt-5">
        <p class="box__title">ایا این درس رایگان است ؟ * </p>
        <div class="notificationGroup">
            <input id="lesson-upload-field-1" name="free" value="0" type="radio" checked="">
            <label for="lesson-upload-field-1">خیر</label>
        </div>
        <div class="notificationGroup">
            <input id="lesson-upload-field-2" name="free" value="1" type="radio">
            <label for="lesson-upload-field-2">بله</label>
        </div>
    </div>

    <x-file name="lesson_file" placeholder="آپلود درس *" required/>

    <x-text-area name="body" placeholder="توضیحات درس"/>

    <button type="submit" class="btn btn-webamooz_net mt-4">ایجاد</button>
</form>



//-------------------- modules/Webamooz/Course/Database/Migrations/2024_06_14_114945_create_lessons_table.php
public function up()
{
    Schema::create('lessons', function (Blueprint $table) {
        $table->id();
        $table->unsignedBigInteger('course_id');
        $table->unsignedBigInteger('season_id')->nullable();
        $table->unsignedBigInteger('user_id');
        $table->unsignedBigInteger('media_id')->nullable();
        $table->string('title');
        $table->string('slug');  //اگر کاربر وارد نکرد خودمون خودکار میسازیم از طریق عنوان درس
        $table->boolean('free')->default(false);
        $table->longText('body')->nullable();
        $table->unsignedTinyInteger('time')->nullable();
        $table->unsignedInteger('priority')->nullable();
        $table->enum('confirmation_status', [\Webamooz\Course\Models\Lesson::$confirmationStatuses])
            ->default(\Webamooz\Course\Models\Lesson::CONFIRMATION_STATUS_PENDING);
        $table->enum('status', [\Webamooz\Course\Models\Lesson::$statuses])
            ->default(\Webamooz\Course\Models\Lesson::STATUS_OPENED);
        $table->timestamps();

        $table->foreign('course_id')->references('id')->on('courses')->onDelete('CASCADE');
        $table->foreign('season_id')->references('id')->on('seasons')->onDelete('SET NULL');
        $table->foreign('user_id')->references('id')->on('users')->onDelete('CASCADE');
        $table->foreign('media_id')->references('id')->on('media')->onDelete('SET NULL');
    });
}


//-------------------- modules/Webamooz/Course/Models/Lesson.php
const CONFIRMATION_STATUS_ACCEPTED = 'accepted';
const CONFIRMATION_STATUS_REJECTED = 'rejected';
const CONFIRMATION_STATUS_PENDING = 'pending';
public static array $confirmationStatuses = [self::CONFIRMATION_STATUS_ACCEPTED, self::CONFIRMATION_STATUS_REJECTED, self::CONFIRMATION_STATUS_PENDING];

const STATUS_OPENED = 'opened';
const STATUS_LOCKED = 'locked';
public static array $statuses = [self::STATUS_OPENED, self::STATUS_LOCKED];

protected $fillable = [
    'course_id',
    'season_id',
    'user_id',
    'media_id',
    'title',
    'slug',
    'free',
    'body',
    'time',
    'number',
    'confirmation_status',
    'status',
];

public function course()
{
    return $this->belongsTo(Course::class);
}

public function season()
{
    return $this->belongsTo(Season::class);
}

public function user()
{
    return $this->belongsTo(User::class);
}

public function media()
{
    return $this->belongsTo(Media::class);
}




//-------------------- modules/Webamooz/Course/Models/Season.php
public function lessons()
{
    return $this->hasMany(Lesson::class);
}


//-------------------- modules/Webamooz/Course/Models/Course.php
public function lessons()
{
    return $this->hasMany(Lesson::class);
}


//-------------------- modules/Webamooz/User/Models/User.php
public function lessons()
{
    return $this->hasMany(Lesson::class);
}



//-------------------- modules/Webamooz/Course/Repositories/LessonRepository.php
public function store($course_id, $values)
{
    return Lesson::create([
        'course_id' => $course_id,
        'user_id' => auth()->id(),
        'season_id' => $values->season_id,
        'title' => $values->title,
        'slug' => $values->slug ? Str::slug($values->slug) : Str::slug($values->title),
        'time' => $values->time,
        'number' => $this->generateNumber($values->number, $course_id),
        'free' => $values->free,
        'media_id' => $values->media_id,  //id set in media_id -> $request->request->add(['media_id'
        'status' => Lesson::STATUS_OPENED,
        'confirmation_status' => Lesson::CONFIRMATION_STATUS_PENDING,
        'body' => $values->body,
    ]);
}

public function paginate($course_id)
{
    return Lesson::where('course_id', $course_id)->orderBy('number')->paginate(20);
}

public function generateNumber($number, $course_id)
{
    $courseRepository = resolve(CourseRepository::class);

    if (is_null($number)) {
        $number = $courseRepository->findById($course_id)->lessons()->orderBy('number', 'desc')->firstOrNew([])->number ?: 0;
        $number++;  //اگر ععدی موجود نباش میاد صفر در نظر میگیره و یکی اضافه میکنه میش یک + اگر موجود باش به عدد یکی اضافه مکینه اگر وارد نکنیم دستی شماره فصل
    }
    return $number;
}




//-------------------- modules/Webamooz/Course/Http/Requests/LessonRequest.php
public function authorize()
{
    return auth()->check() == true;
}

public function rules()
{
    $rules = [
        'title' => 'required|min:3|max:200',
        'slug' => 'nullable|min:3|max:200|unique:lessons,slug',
        'number' => 'nullable|numeric',
        'time' => 'required|numeric|min:0|max:255',
        'season_id' => [new ValidSeason()],
        'free' => 'required|boolean',
        'lesson_file' => 'required|file|mimes:avi,mkv,mp4,zip,rar',
        'body' => 'nullable|string',
    ];
    /*if (request()->method == "PATCH") {  //request updated
        $rules['image'] = 'nullable|image|max:1024|mimes:png,jpg,jpeg';
        //request()->route('course') -> categories/{course} -> میاد میره درون روت و پارامتری که هست یا همون آیدی میگره میگه غیر این آیدی
        $rules['slug'] = 'required|min:3|max:200|unique:courses,slug,' . request()->route('course');
    }*/

    return $rules;
}


public function attributes()
{
    return [
        'course_id' => 'دوره',
        'season_id' => 'سرفصل',
        'user_id' => 'کاربر',
        'media_id' => 'فایل',
        'title' => 'عنوان درس',
        'slug' => 'عنوان انگلیسی درس',
        'number' => 'شماره درس',
        'time' => 'مدت زمان درس',
        'free' => 'رایگان',
        'lesson_file' => 'فایل درس',
        'body' => 'توضیحات درس',
        'confirmation_status' => 'تایید وضعیت',
        'status' => 'وضعیت'
    ];
}








































//---------------------------------------------------------------- Lesson 113,115 (Open close priciple for Media Module)
//-------------------- modules/Webamooz/Media/Providers/MediaServiceProvider.php
$this->mergeConfigFrom(__DIR__ . '/../Config/mediaFile.php', 'mediaFile');  //public function register()



//-------------------- modules/Webamooz/Media/Services/MediaFileService.php
class MediaFileService
{

    private static $file;
    private static $dir;

    public static function privateUpload($file)
    {
        self::$file = $file;
        self::$dir = "private/";
        return self::upload();
    }

    public static function publicUpload($file)
    {
        self::$file = $file;
        self::$dir = "public/";
        return self::upload();
    }

    private static function upload()
    {
        $extension = self::normalizeExtension(self::$file);  //jpg,png,mp4,mkv,mp3

        foreach (config('mediaFile.MediaTypeServices') as $key => $mediaFile) {
            if (in_array($extension, $mediaFile['extensions'])) {
                return self::uploadByHandler(new $mediaFile['handler'], $key);
            }
        }
    }

    public static function delete($media)
    {
        switch ($media->type) {
            case 'image':
                ImageFileService::delete($media);
                break;
        }
    }

    //----- method helper
    private static function uploadByHandler(FileServiceContract $mediaFile, $key): Media
    {
        $media = new Media();
        $media->user_id = auth()->id();  //auth()->user()->id;
        $media->files = $mediaFile::upload(self::$file, self::filenameGenerator(), self::$dir);
        $media->type = $key;
        $media->filename = self::$file->getClientOriginalName();  //slider1.jpg
        $media->save();
        return $media;
    }

    private static function normalizeExtension($file): string
    {
        return strtolower($file->getClientOriginalExtension());
    }

    private static function filenameGenerator(): string
    {
        return uniqid() . '_' . time() . rand(1, 1000);
    }
}




//-------------------- modules/Webamooz/Media/Contracts/FileServiceContract.php
interface FileServiceContract
{
    public static function upload(UploadedFile $file, string $filename, string $dir): array;

    public static function delete(Media $media);
}





//-------------------- modules/Webamooz/Media/Config/mediaFile.php
<?php
return [
    "MediaTypeServices" => [

        "image" => array(  //key(image) => [value]
            "extensions" => array(
                "png", "jpg", "jpeg", "svg"
            ),
            "handler" => \Webamooz\Media\Services\ImageFileService::class
        ),

        "video" => [
            "extensions" => [
                "avi", "mp4", "mkv"
            ],
            "handler" => \Webamooz\Media\Services\VideoFileService::class
        ],

        "zip" => [
            "extensions" => [
                "zip", "rar", "tar"
            ],
            "handler" => \Webamooz\Media\Services\ZipFileService::class
        ]

    ]
];




//-------------------- modules/Webamooz/Media/Services/ImageoFileService.php
private static array $sizes = ['300', '600'];
public static function upload(UploadedFile $file, $filename, $dir): array
{
    return self::resize($file, "app\\$dir", $filename, $file->getClientOriginalExtension());  //images list -> [original + 300 + 600]
}



//-------------------- modules/Webamooz/Media/Services/VideoFileService.php
public static function upload(UploadedFile $file, $filename, $dir) :array
{
    $extension = $file->getClientOriginalExtension();
    Storage::putFileAs($dir, $file, $filename . '.' . $extension);
    return ["video" => $dir . $filename . '.' . $extension];
}




//-------------------- modules/Webamooz/Media/Services/ZipFileService.php
public static function upload(UploadedFile $file, $filename, $dir): array
{
    $extension = $file->getClientOriginalExtension();
    Storage::putFileAs($dir, $file, $filename . '.' . $extension);
    return ["zip" => $dir . $filename . '.' . $extension];
}




//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
public function store($course_id, LessonRequest $request)
{
    $request->request->add(['media_id' => MediaFileService::privateUpload($request->file('lesson_file'))->id]);
    $this->lessonRepository->store($course_id, $request);
    $this->newFeedback();
    return to_route('courses.details', $course_id);
}



//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function store(CourseRequest $request)
{
    //بیا از طریق رکوست بیا بگیر مقدار عکس و آیدی تصویر و بریز درون بنر آیدی و برای ساختنش اسم banner_id صدا میزنیم در store
    $request->request->add([
        'banner_id' => MediaFileService::publicUpload($request->file('image'))->id
    ]);
    (new CourseRepository())->store($request);
    return to_route('courses.index');
}





































//--------------------------------------------------------------------------------------- Lesson 116 (Delete media file)
//-------------------- modules/Webamooz/Media/Database/Migrations/2024_05_26_182843_create_media_table.php
$table->boolean('is_private');



//-------------------- modules/Webamooz/Media/Services/MediaFileService.php
private static $file;
private static $dir;
private static $isPrivate;

public static function privateUpload($file)
{
    self::$file = $file;
    self::$dir = "private/";
    self::$isPrivate = true;
    return self::upload();
}

public static function publicUpload($file)
{
    self::$file = $file;
    self::$dir = "public/";
    self::$isPrivate = false;
    return self::upload();
}

private static function upload()
{
    $extension = self::normalizeExtension(self::$file);  //jpg,png,mp4,mkv,mp3

    foreach (config('mediaFile.MediaTypeServices') as $key => $mediaFile) {
        if (in_array($extension, $mediaFile['extensions'])) {
            return self::uploadByHandler(new $mediaFile['handler'], $key);
        }
    }
}

private static function uploadByHandler(FileServiceContract $mediaFile, $key): Media
{
    $media = new Media();
    $media->user_id = auth()->id();  //auth()->user()->id;
    $media->files = $mediaFile::upload(self::$file, self::filenameGenerator(), self::$dir);
    $media->type = $key;
    $media->filename = self::$file->getClientOriginalName();  //slider1.jpg
    $media->is_private = self::$isPrivate;
    $media->save();
    return $media;
}





//-------------------- modules/Webamooz/Media/Services/DefaultFileService.php
public static function delete(Media $media)
{
    foreach ($media->files as $file) {
        if ($media->is_private) {
            Storage::delete('private\\' . $file);  //Storage -> storage\app\
        }else {
            Storage::delete('public\\' . $file);  //Storage -> storage\app\
        }
    }
}




//-------------------- modules/Webamooz/Media/Services/ImageFileService.php
class ImageFileService extends DefaultFileService implements FileServiceContract
{
  //method delete in class DefaultFileService -> extends  +  remove class ImageFileService
}



//-------------------- modules/Webamooz/Media/Services/VideoFileService.php
class VideoFileService extends DefaultFileService implements FileServiceContract
{
  //method delete in class DefaultFileService -> extends  +  remove class ImageFileService
}



//-------------------- modules/Webamooz/Media/Services/ZipFileService.php
class ZipFileService extends DefaultFileService implements FileServiceContract
{
  //method delete in class DefaultFileService -> extends  +  remove class ImageFileService
}



























//------------------------------------------------------------------------------------------- Lesson 117 (Delete lesson)
//-------------------- modules/Webamooz/Course/Routes/lessons_route.php
$router->delete('/courses/{course}/lessons/{lesson}', [LessonController::class, 'destroy'])->name('lessons.destroy');


//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
public function destroy($course_id, $lesson_id)
{
    $lesson = $this->lessonRepository->findById($lesson_id);
    if ($lesson->media){
        $lesson->media->delete();  //protected static function booted() { static::deleting(function($media)) MediaFileService::delete($media)  }
    }
    $lesson->delete();
    return AjaxResponses::successResponse('درس شما با موفقیت حذف شد');
}


//-------------------- modules/Webamooz/Course/Resources/Views/details.blade.php
<a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
   onclick="deleteItem(event , '{{ route('lessons.destroy' , [$course->id ,$lesson->id]) }}' )"></a>



//-------------------- modules/Webamooz/Media/Services/MediaFileService.php
public static function delete(Media $media)
{
    foreach (config('mediaFile.MediaTypeServices') as $type => $mediaFile)
    {
        if ($media->type == $type) {
             return $mediaFile['handler']::delete($media);  //$mediaFile['handler'] === Services/ZipFileService.php
        }
    }
}



//-------------------- modules/Webamooz/Media/Services/ZipFileService.php
class ZipFileService extends DefaultFileService implements FileServiceContract
{
  //method delete extend DefaultFileService -> درون این کلاس متود دلیت هست
}



//-------------------- modules/Webamooz/Media/Services/DefaultFileService.php
ublic static function delete(Media $media)
{
    foreach ($media->files as $file) {
        if ($media->is_private) {
            Storage::delete('private\\' . $file);  //Storage -> storage\app\
        }else {
            Storage::delete('public\\' . $file);  //Storage -> storage\app\
        }
    }
}































//------------------------------------------------------------------------------------ Lesson 118 (Delete multi lessons)
//-------------------- modules/Webamooz/Course/Routes/lessons_route.php
$router->delete('/courses/{course}/lessons', [LessonController::class, 'destroyMultiple'])->name('lessons.destroyMultiple');



//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
public function destroyMultiple(Request $request)
{
    $lessonIds = explode(',' , $request->lesson_ids);  //string to array
    foreach ($lessonIds as $id){
        $lesson = $this->lessonRepository->findById($id);
        if ($lesson->media){
            $lesson->media->delete();  //protected static function booted() { static::deleting(function($media)) MediaFileService::delete($media)  }
        }
        $lesson->delete();
    }
    $this->newFeedback();
    return back();
}




//-------------------- modules/Webamooz/Course/Resources/Views/details.blade.php
<div class="d-flex item-center flex-wrap margin-bottom-15 operations__btns">
    <button class="btn all-confirm-btn">تایید همه جلسات</button>
    <button class="btn confirm-btn">تایید جلسات</button>
    <button class="btn reject-btn">رد جلسات</button>
    <button class="btn delete-btn" onclick="deleteMultiple('{{ route('lessons.destroyMultiple', $course->id)  }}')">حذف جلسات</button>
</div>

<div class="table__box">
    <table class="table">
        @foreach($lessons as $lesson)
            <tr role="row" class="" data-row-id="{{ $lesson->id }}">
                <td>
                    <label class="ui-checkbox">
                        <input type="checkbox" class="sub-checkbox" data-id="{{ $lesson->id }}">
                        <span class="checkmark"></span>
                    </label>
                </td>





//-------------------- public/panel/js/js.js
function deleteMultiple(route){
    var allVals = [];
    $(".sub-checkbox:checked").each(function () {
        allVals.push($(this).attr('data-id'));
    });
    //alert(allVals.length); return false;
    if (allVals.length <= 0) {
        alert("یک سطر انتخاب کنید");
    } else {
        //$("#loading").show();
        WRN_PROFILE_DELETE = "آیا مطمئن هستید که می خواهید این سطر را حذف کنید؟";
        var check = confirm(WRN_PROFILE_DELETE);
        if (check == true) {
            //for server side

            $("<form action='"+ route +"' method='post'> " +
                //----- _method=delete + csrf_token + ids[id]
                "<input type='hidden' name='_token' value='"+ $('meta[name="_token"]').attr('content') +"' >"+
                "<input type='hidden' name='_method' value='delete'>" +
                "<input type='hidden' name='lesson_ids' value='"+ allVals +"'>"+
                " </form>").appendTo('body').submit();

            // $.ajax({
            //     type: "POST",
            //     url: "delete.php",
            //     cache:false,
            //     data: {ids : allVals},
            //     success: function(response)
            //     {
            //         $("#loading").hide();
            //         $("#msgdiv").html(response);
            //         //referesh table
            //     }
            // });

            //for client side
            $.each(allVals, function (index, value) {
                $('table tr').filter("[data-row-id='" + value + "']").remove();
            });
        }
    }
}





























//------------------------------------------------------------------------------- Lesson 119 (Accept and reject lessons)
//-------------------- modules/Webamooz/Course/Routes/lessons_route.php
$router->patch('/lessons/{lesson}/accept', [LessonController::class, 'accept'])->name('lessons.accept');
$router->patch('/lessons/{lesson}/reject', [LessonController::class, 'reject'])->name('lessons.reject');



//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
public function accept($lesson_id)
{
    $this->lessonRepository->updateConfirmationStatus($lesson_id, Lesson::CONFIRMATION_STATUS_ACCEPTED);
    return AjaxResponses::successResponse("عملیات تایید درس با موفقیت انجام شد");
}

public function reject($lesson_id)
{
    $this->lessonRepository->updateConfirmationStatus($lesson_id, Lesson::CONFIRMATION_STATUS_REJECTED);
    return AjaxResponses::successResponse("عملیات رد شدن درس با موفقیت انجام شد");
}





//-------------------- modules/Webamooz/Course/Repositories/LessonRepository.php
public function updateConfirmationStatus($lesson_id, $confirm_status)
{
    return Lesson::where('id', $lesson_id)->update(['confirmation_status' => $confirm_status]);
}



//-------------------- modules/Webamooz/Course/Resources/Views/details.blade.php
<td class="confirmation_status">
    <span class="{{ $lesson->getConfirmationStatusCssClass() }}">@lang($lesson->confirmation_status)</span>
</td>

<td>
    <a href="" onclick="updateConfirmationStatus(event , '{{ route('lessons.accept' , $lesson->id) }}' ,
        'آیا از تایید درس دوره مطمعن هستید؟' , 'تایید شده' , 'confirmation_status')"
       class="item-confirm mlg-15 btn_success_customize" title="تایید شده"></a>

    <a href="" onclick="updateConfirmationStatus(event , '{{ route('lessons.reject' , $lesson->id) }}' ,
        'آیا از رد درس دوره مطمعن هستید؟' , 'رد شده' , 'confirmation_status')"
       class="item-reject mlg-15 btn_red_customize" title="رد شده"></a>
</td>



//-------------------- modules/Webamooz/Course/Models/Lesson.php
public function getConfirmationStatusCssClass()
{
    if ($this->confirmation_status == self::CONFIRMATION_STATUS_ACCEPTED) return "text-success_custom";
    elseif ($this->confirmation_status == self::CONFIRMATION_STATUS_REJECTED) return "text-danger_custom";
}

































//---------------------------------------------------------------------------------- Lesson 120 (Lock and unlock lesson)
//-------------------- modules/Webamooz/Course/Routes/lessons_route.php
$router->patch('/lessons/{lesson}/lock', [LessonController::class, 'lock'])->name('lessons.lock');
$router->patch('/lessons/{lesson}/unlock', [LessonController::class, 'unlock'])->name('lessons.unlock');



//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
public function lock($lesson_id)
{
    $this->lessonRepository->updateStatus($lesson_id, Lesson::STATUS_LOCKED);
    return AjaxResponses::successResponse("عملیات قفل کردن درس با موفقیت انجام شد");
}

public function unlock($lesson_id)
{
    $this->lessonRepository->updateStatus($lesson_id, Lesson::STATUS_OPENED);
    return AjaxResponses::successResponse("عملیات باز کردن درس با موفقیت انجام شد");
}



//-------------------- modules/Webamooz/Course/Repositories/LessonRepository.php
public function updateStatus($lesson_id, $status)
{
    return Lesson::where('id', $lesson_id)->update(['status' => $status]);
}



//-------------------- modules/Webamooz/Course/Resources/Views/details.blade.php
<td class="status">
    @if ($lesson->status == \Webamooz\Course\Models\Lesson::STATUS_OPENED)
        {{ $lesson->free ? 'همه' : 'شرکت کنندگان' }}
    @else
        <span>قفل شده</span>
    @endif
</td>
<td>
    @if ($lesson->status == \Webamooz\Course\Models\Lesson::STATUS_OPENED)
        <a href="" onclick="updateConfirmationStatus(event , '{{ route('lessons.lock' , $lesson->id) }}' ,
            'آیا از قفل شدن درس مطمعن هستید؟' , 'قفل شده' , 'status')"
           class="item-lock mlg-15 btn_lock_customize" title="قفل شده"></a>
    @else
        <a href="" onclick="updateConfirmationStatus(event , '{{ route('lessons.unlock' , $lesson->id) }}' ,
            'آیا از باز کردن درس مطمعن هستید؟' , 'باز شده' , 'status')"
           class="item-unlock mlg-15 btn_unlock_customize" title="باز شده"></a>
    @endif
</td>
























//--------------------------------------------------------------------------------------------- Lesson 121 (Edit lesson)
//-------------------- modules/Webamooz/Course/Routes/lessons_route.php
$router->get('/courses/{course}/lesson/{id}/edit', [LessonController::class, 'edit'])->name('lessons.edit');



//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
public function edit($course_id, $lesson_id, SeasonRepository $seasonRepository, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    $seasons = $seasonRepository->getCourseSeasons($course_id);
    $lesson = $this->lessonRepository->findById($lesson_id);
    return view('Course::lessons.edit', compact('lesson', 'seasons', 'course'));
}


//-------------------- modules/Webamooz/Course/Resources/Views/details.blade.php
<a href="{{ route('lessons.edit' , [$course->id, $lesson->id]) }}" class="item-edit btn_info_customize mlg-15" title="ویرایش"></a>



//-------------------- modules/Webamooz/Media/Models/Media.php
public function getThumbAttribute(): string
{
    return MediaFileService::thumb($this);  //$this === $media
}



//-------------------- modules/Webamooz/Media/Services/MediaFileService.php
public static function thumb(Media $media)
{
    foreach (config('mediaFile.MediaTypeServices') as $type => $mediaFile) {
        if ($media->type == $type) {
            return $mediaFile['handler']::thumb($media);
        }
    }
}



//-------------------- modules/Webamooz/Media/Contracts/FileServiceContract.php
interface FileServiceContract
{
    public static function upload(UploadedFile $file, string $filename, string $dir): array;

    public static function delete(Media $media);

    public static function thumb(Media $media);
}




//-------------------- modules/Webamooz/Media/Services/ImageFileService.php
public static function thumb(Media $media)
{
    return '/storage/' . $media->files['300'];  //get image size 300(thumb بند انگشتی)
}



//-------------------- modules/Webamooz/Media/Services/VideoFileService.php
public static function thumb(Media $media)
{
    return asset('/img/mx-player.jpg');
}



//-------------------- modules/Webamooz/Media/Services/ZipFileService.php
public static function thumb(Media $media)
{
    return url('/img/zip.png');
}



//-------------------- resources/views/components/file.blade.php
<div class="file-upload">
    <div class="file-upload$at mt-5">
        <div class="i-file-upload cursor-pointer">
            <span>{{ $placeholder }}</span>
            <input type="file" class="file-upload" id="files" name="{{ $name }}"  {{ $attributes }} />
        </div>
        <span class="filesize"></span>
        @if (isset($value))
            <span class="selectedFiles">
                <p> تصویر فعلی : <strong>{{ $value->filename }}</strong></p>
                <img src="{{ $value->thumb }}" width="120px" alt="" class="mt-3">  {{-- {{ '/storage/' . $value->files['300'] }} --}}
            </span>
        @else
            <span class="selectedFiles">فایلی انتخاب نشده است</span>
        @endif
    </div>
    <x-validation-error field="{{ $name }}" />
</div>
































//------------------------------------------------------------------------------------------- Lesson 122 (Update lesson)
//-------------------- modules/Webamooz/Course/Routes/lessons_route.php
$router->patch('/courses/{course}/lesson/{id}', [LessonController::class, 'update'])->name('lessons.update');



//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
public function update(LessonRequest $request, $course_id, $lesson_id)
{
    $lesson = $this->lessonRepository->findById($lesson_id);

    if ($request->hasFile('lesson_file')) {  //اگر فایلی کلیک کرد + اگر اون درس فایل ویدیویی یا زیپ دارد
        if ($lesson->media) {
            $lesson->media->delete();
        }
        $request->request->add(['media_id' => MediaFileService::privateUpload($request->file('lesson_file'))->id]);
    } else {
        $request->request->add(['media_id' => $lesson->lesson_file]);  //اگر ویدیویی وجود نداشت بیا همون ویدیو قبلی بگیر
    }

    $this->lessonRepository->update($course_id, $lesson_id, $request);
    $this->newFeedback();
    return to_route('courses.details', $course_id);
}




//-------------------- modules/Webamooz/Course/Http/Requests/LessonRequest.php
public function rules()
{
    $rules = [
        'title' => 'required|min:3|max:200',
        'slug' => 'nullable|min:3|max:200',
        'number' => 'nullable|numeric',
        'time' => 'required|numeric|min:0|max:255',
        'season_id' => [new ValidSeason()],
        'is_free' => 'required|boolean',
        'lesson_file' => 'required|file|mimes:' . MediaFileService::getExtensions(),  //"png,jpg,jpeg,svg,avi,mp4,mkv,zip,rar,tar"
        'body' => 'nullable|string',
    ];
    if (request()->method == "PATCH") {  //request updated
        $rules['lesson_file'] = 'nullable|file|mimes:' . MediaFileService::getExtensions();  //"png,jpg,jpeg,svg,avi,mp4,mkv,zip,rar,tar"
    }

    return $rules;
}




//-------------------- modules/Webamooz/Media/Services/MediaFileService.php
public static function getExtensions()
{
    $extensions = [];
    foreach (config('mediaFile.MediaTypeServices') as $mediaFile) {
        foreach ($mediaFile['extensions'] as $extension) {
            $extensions[] = $extension;
        }
    }
    return implode(',' , $extensions);  //array convert to string -> "png,jpg,jpeg,svg,avi,mp4,mkv,zip,rar,tar"
}




//-------------------- modules/Webamooz/Course/Repositories/LessonRepository.php
public function update($course_id , $lesson_id, $request)
{
    Lesson::where('id', $lesson_id)->update([
        'season_id' => $request->season_id,
        'title' => $request->title,
        'slug' => $request->slug ? Str::slug($request->slug) : Str::slug($request->title),
        'time' => $request->time,
        'number' => $this->generateNumber($request->number, $course_id),
        'is_free' => $request->is_free,
        'media_id' => $request->media_id,  //id set in media_id -> $request->request->add(['media_id'
        'body' => $request->body,
    ]);
}































//------------------------------------------------------------------------ Lesson 123 (Multiple actions against lessons)
//-------------------- modules/Webamooz/Course/Routes/lessons_route.php
$router->patch('/courses/{course}/lessons/accept-all', [LessonController::class, 'acceptAll'])->name('lessons.acceptAll');
$router->patch('/courses/{course}/lessons/accept-multiple', [LessonController::class, 'acceptMultiple'])->name('lessons.acceptMultiple');
$router->patch('/courses/{course}/lessons/reject-multiple', [LessonController::class, 'rejectMultiple'])->name('lessons.rejectMultiple');




//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
public function acceptAll($course_id)
{
    $this->lessonRepository->acceptAll($course_id);
    $this->newFeedback();
    return back();
}

public function acceptMultiple(Request $request, $course_id)
{
    $lessonIds = explode(',', $request->lesson_ids);
    $this->lessonRepository->updateConfirmationStatus($lessonIds, Lesson::CONFIRMATION_STATUS_ACCEPTED);
    $this->newFeedback();
    return back();
}

public function rejectMultiple(Request $request, $course_id)
{
    $lessonIds = explode(',', $request->lesson_ids);
    $this->lessonRepository->updateConfirmationStatus($lessonIds, Lesson::CONFIRMATION_STATUS_REJECTED);
    $this->newFeedback();
    return back();
}





//-------------------- modules/Webamooz/Course/Repositories/LessonRepository.php
public function updateConfirmationStatus($lesson_id, $confirm_status)
{
    if (is_array($lesson_id)) {
        return Lesson::query()->whereIn('id', $lesson_id)->update([
            'confirmation_status' => $confirm_status
        ]);
    }
    return Lesson::where('id', $lesson_id)->update(['confirmation_status' => $confirm_status]);
}

public function acceptAll($course_id)
{
    return Lesson::where('course_id', $course_id)->update([
        'confirmation_status' => Lesson::CONFIRMATION_STATUS_ACCEPTED
    ]);
}

/*public function rejectMultiple($lessonIds)  //use updated with -> foreach
{
    foreach ($lessonIds as $id) {
        $lesson = $this->findById($id);
        $lesson->update([
            'confirmation_status' => Lesson::CONFIRMATION_STATUS_REJECTED
        ]);
    }
}*/





//-------------------- modules/Webamooz/Course/Resources/Views/details.blade.php
<button class="btn all-confirm-btn" onclick="acceptAllLessons('{{ route('lessons.acceptAll' , $course->id) }}')">تایید همه جلسات</button>
<button class="btn confirm-btn" onclick="acceptMultiple('{{ route('lessons.acceptMultiple' , $course->id) }}')">تایید جلسات</button>
<button class="btn reject-btn" onclick="rejectMultiple('{{ route('lessons.rejectMultiple' , $course->id) }}')">رد جلسات</button>
<button class="btn delete-btn" onclick="deleteMultiple('{{ route('lessons.destroyMultiple', $course->id)  }}')">حذف جلسات</button>




//-------------------- public/panel/js/js.js
function acceptAllLessons(route) {
    if (confirm("آیا از تایید همه درس های این دوره اطمینان دارید؟")) {
        $("<form action='" + route + "' method='post'> " +
            //----- _method=delete + csrf_token + ids[id]
            "<input type='hidden' name='_token' value='" + $('meta[name="_token"]').attr('content') + "' >" +
            "<input type='hidden' name='_method' value='patch'>" +
            " </form>").appendTo('body').submit();
    }
}

function acceptMultiple(route) {
    doMultipleAction(route, 'patch', "آیا مطمئن هستید که می خواهید این سطر ها را تایید کنید؟");
}

function rejectMultiple(route) {
    doMultipleAction(route, 'patch', "آیا مطمئن هستید که می خواهید این سطر ها را رد کنید؟");
}

function deleteMultiple(route) {
    doMultipleAction(route, 'delete' , "آیا مطمئن هستید که می خواهید این سطر ها را حذف کنید؟");
}

function getSelectedItems() {
    var allVals = [];
    $(".sub-checkbox:checked").each(function () {
        allVals.push($(this).attr('data-id'));
    });
    return allVals;
}

function doMultipleAction(route, method , message) {  //بیا برای چند تا عملیات انجام بده با یک فانکشن
    var allVals = getSelectedItems();

    if (allVals.length <= 0) {
        alert("یک سطر را انتخاب کنید")
    } else {
        //$("#loading").show();
        WRN_PROFILE_DELETE = message;
        var check = confirm(WRN_PROFILE_DELETE);
        if (check == true) {
            //for server side
            $("<form action='" + route + "' method='post'> " +
                //----- _method=delete + csrf_token + ids[id]
                "<input type='hidden' name='_token' value='" + $('meta[name="_token"]').attr('content') + "' >" +
                "<input type='hidden' name='_method' value='" + method + "'>" +
                "<input type='hidden' name='lesson_ids' value='" + allVals + "'>" +
                " </form>").appendTo('body').submit();
        }
    }
}


































//------------------------------------------------------------------------------------------- Lesson 124 (Lesson policy)
//-------------------- modules/Webamooz/Course/Http/Controllers/LessonController.php
public function create($course_id, SeasonRepository $seasonRepository, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    $this->authorize('createLesson', $course);
    $seasons = $seasonRepository->getCourseSeasons($course_id);
    $course = $courseRepository->findById($course_id);
    return view('Course::lessons.create', compact('seasons', 'course'));
}

public function store($course_id, LessonRequest $request, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    $this->authorize('store', $course);
    $request->request->add(['media_id' => MediaFileService::privateUpload($request->file('lesson_file'))->id]);
    $this->lessonRepository->store($course_id, $request);
    $this->newFeedback();
    return to_route('courses.details', $course_id);
}

public function edit($course_id, $lesson_id, SeasonRepository $seasonRepository, CourseRepository $courseRepository)
{
    $lesson = $this->lessonRepository->findById($lesson_id);
    $course = $courseRepository->findById($course_id);
    $this->authorize('edit', $lesson);
    $seasons = $seasonRepository->getCourseSeasons($course_id);
    return view('Course::lessons.edit', compact('lesson', 'seasons', 'course'));
}

public function update(LessonRequest $request, $course_id, $lesson_id)
{
    $lesson = $this->lessonRepository->findById($lesson_id);
    $this->authorize('edit', $lesson);

    if ($request->hasFile('lesson_file')) {  //اگر فایلی کلیک کرد + اگر اون درس فایل ویدیویی یا زیپ دارد
        if ($lesson->media) {
            $lesson->media->delete();
        }
        $request->request->add(['media_id' => MediaFileService::privateUpload($request->file('lesson_file'))->id]);
    } else {
        $request->request->add(['media_id' => $lesson->lesson_file]);  //اگر ویدیویی وجود نداشت بیا همون ویدیو قبلی بگیر
    }

    $this->lessonRepository->update($course_id, $lesson_id, $request);
    $this->newFeedback();
    return to_route('courses.details', $course_id);
}

public function destroy($course_id, $lesson_id)
{
    $lesson = $this->lessonRepository->findById($lesson_id);
    $this->authorize('delete', $lesson);
    if ($lesson->media) {
        $lesson->media->delete();  //protected static function booted() { static::deleting(function($media)) MediaFileService::delete($media)  }
    }
    $lesson->delete();
    return AjaxResponses::successResponse('درس شما با موفقیت حذف شد');
}

public function destroyMultiple(Request $request)
{
    $lessonIds = explode(',', $request->lesson_ids);  //string to array
    foreach ($lessonIds as $id) {
        $lesson = $this->lessonRepository->findById($id);
        $this->authorize('delete', $lesson);
        if ($lesson->media) {
            $lesson->media->delete();  //protected static function booted() { static::deleting(function($media)) MediaFileService::delete($media)  }
        }
        $lesson->delete();
    }
    $this->newFeedback();
    return back();
}


public function acceptAll($course_id)
{
    $this->authorize('manage', Course::class);
    $this->lessonRepository->acceptAll($course_id);
    $this->newFeedback();
    return back();
}

public function acceptMultiple(Request $request, $course_id)
{
    $this->authorize('manage', Course::class);
    $lessonIds = explode(',', $request->lesson_ids);
    $this->lessonRepository->updateConfirmationStatus($lessonIds, Lesson::CONFIRMATION_STATUS_ACCEPTED);
    $this->newFeedback();
    return back();
}

public function rejectMultiple(Request $request, $course_id)
{
    $this->authorize('manage', Course::class);
    $lessonIds = explode(',', $request->lesson_ids);
    $this->lessonRepository->updateConfirmationStatus($lessonIds, Lesson::CONFIRMATION_STATUS_REJECTED);
    $this->newFeedback();
    return back();
}

public function accept($lesson_id)
{
    $this->authorize('manage', Course::class);
    $this->authorize('manage', Course::class);
    $this->lessonRepository->updateConfirmationStatus($lesson_id, Lesson::CONFIRMATION_STATUS_ACCEPTED);
    return AjaxResponses::successResponse("عملیات تایید درس با موفقیت انجام شد");
}

public function reject($lesson_id)
{
    $this->authorize('manage', Course::class);
    $this->lessonRepository->updateConfirmationStatus($lesson_id, Lesson::CONFIRMATION_STATUS_REJECTED);
    return AjaxResponses::successResponse("عملیات رد شدن درس با موفقیت انجام شد");
}

public function lock($lesson_id)
{
    $this->authorize('manage', Course::class);
    $this->lessonRepository->updateStatus($lesson_id, Lesson::STATUS_LOCKED);
    return AjaxResponses::successResponse("عملیات قفل کردن درس با موفقیت انجام شد");
}

public function unlock($lesson_id)
{
    $this->authorize('manage', Course::class);
    $this->lessonRepository->updateStatus($lesson_id, Lesson::STATUS_OPENED);
    return AjaxResponses::successResponse("عملیات باز کردن درس با موفقیت انجام شد");
}









//-------------------- modules/Webamooz/Course/Repositories/LessonRepository.php
public function store($user, $course)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;
}

public function edit($user, $lesson)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) ||
        ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES) && $user->id == $lesson->course->teacher_id)

    ) {
        return true;
    }
}

public function delete($user, $lesson)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) ||
        ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES) && $user->id == $lesson->course->teacher_id)

    ) {
        return true;
    }
}

public function manage($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES)) return true;
}






//-------------------- modules/Webamooz/Course/Providers/CourseServiceProvider.php
public function register()
{
    Gate::policy(Lesson::class, LessonPolicy::class);
}





//-------------------- modules/Webamooz/Course/Policies/CoursePolicy.php
public function create($user, $course)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) ||
        ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES) && $course->id == $user->id)
    ) return true;;
}



































//------------------------------------------------------------------------------------------- Lesson 125 (Lesson test 1)
//-------------------- modules/Webamooz/Course/Tests/Feature/LessonTest.php
class LessonTest extends TestCase
{
    use RefreshDatabase, WithFaker;


    public function test_user_can_see_create_lesson_form()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $this->get(route('lessons.create', $course->id))->assertOk();

        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course = $this->createCourse();
        $this->get(route('lessons.create', $course->id))->assertOk();
    }

    public function test_normal_user_can_not_see_create_lesson_form()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();

        $this->actingAsUser();
        $this->get(route('lessons.create', $course->id))->assertStatus(403);
    }

    public function test_permitted_user_can_store_lesson()
    {
        $this->actingAsSuperAdmin();  //actingAsAdminCourse -> این میزنوشتم خطا میداد
        $course = $this->createCourse();

        $this->post(route('lessons.store', $course->id), [
            'title' => "lesson one",
            'time' => "20",
            'is_free' => 1,
            'lesson_file' => UploadedFile::fake()->create('lesson.mp4', 10240),
        ]);
        $this->assertEquals(1, Lesson::query()->count());
    }

    public function test_only_allowed_extensions_can_be_uploaded()
    {
        $notAllowedExtensions = ['jpg', 'jpeg', 'png', 'svg', 'mp3'];
        $this->actingAsAdminCourse();
        $course = $this->createCourse();

        foreach ($notAllowedExtensions as $extension) {
            $this->post(route('lessons.store', $course->id), [
                'title' => "lesson one",
                'time' => "20",
                'is_free' => 1,
                'lesson_file' => UploadedFile::fake()->create('lesson.' . $extension, 10240),
            ]);
        }

        $this->assertEquals(0, Lesson::query()->count());
    }


    public function test_permitted_user_can_edit_lesson()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $this->get(route('lessons.edit', [$course->id, $lesson->id]))->assertOk();

        $this->actingAsUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $this->get(route('lessons.edit', [$course->id, $lesson->id]))->assertOk();

        //----- test_normal_user_can_not_edit_lesson
        $this->actingAsUser();  //$course -> برای این کاربر نیست
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->get(route('lessons.edit', [$course->id, $lesson->id]))->assertStatus(403);
    }

    public function test_permitted_user_can_update_lesson()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);

        $this->patch(route('lessons.update', [$course->id, $lesson->id]), [
            "title" => "updated title",
            "time" => "15",
            "is_free" => 0
        ]);
        $this->assertEquals("updated title", Lesson::find(1)->title);
//      $this->assertEquals("updated title", $lesson->fresh()->title);

        //----- test_normal_user_can_not_update_course_other
        $this->actingAsUser();  //user can not updated course other
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->patch(route('lessons.update', [$course->id, $lesson->id]), [
            "title" => "updated title 2",
            "time" => "15",
            "is_free" => 0
        ])->assertStatus(403);
        $this->assertEquals('updated title', Lesson::query()->first()->title);
    }

    public function test_permitted_user_can_destroy_lesson()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $lesson2 = $this->createLesson($course);

        $this->delete(route('lessons.destroy', [$course->id, $lesson->id]))->assertOk();
        $this->assertEquals(null, Lesson::find(1));
//      $this->assertEquals(null , Lesson::first());

        //---------- test_normal_user_can_not_destroy_lesson
        $this->actingAsUser();
        $this->delete(route('lessons.destroy', [$course->id, $lesson2->id]))->assertStatus(403);
        $this->assertEquals(1, Lesson::find(2)->count());

        //---------- test_owner_course_can_not_destroy_lesson
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->delete(route('lessons.destroy', [$course->id, $lesson2->id]))->assertStatus(403);
        $this->assertEquals(1, Lesson::where('id', 2)->count());
    }


    public function test_permitted_user_can_destroy_multiple_lessons()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $lesson2 = $this->createLesson($course);

        $course2 = $this->createCourse();
        $lesson3 = $this->createLesson($course2);

        $this->delete(route('lessons.destroyMultiple', $course->id), [
            'lesson_ids' => '1,2'
        ]);
        $this->assertEquals(null, Lesson::find(1));
        $this->assertEquals(null, Lesson::find(2));
        $this->assertEquals(3, Lesson::find(3)->id);

        //---------- test_normal_user_can_not_destroy_lesson
        $this->actingAsUser();
        $this->delete(route('lessons.destroyMultiple', $course->id), [
            'lesson_ids' => '3'
        ])->assertStatus(403);
        $this->assertEquals(3, Lesson::where('id', 3)->first()->id);

        //---------- test_owner_course_can_not_destroy_lesson
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->delete(route('lessons.destroyMultiple', $course->id), [
            'lesson_ids' => '3'
        ])->assertStatus(403);
        $this->assertEquals(1, Lesson::find(3)->count());
    }


    public function test_permitted_user_can_accept_lesson()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::first()->confirmation_status);
        $this->patch(route('lessons.accept', [$lesson->id]));  //route -> با صدا زدن این روت خودش آپدیت میکنه به تایید شده
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_ACCEPTED, Lesson::find(1)->confirmation_status);

        //---------- test_normal_user_can_not_update_accept
        $this->actingAsUser();
        $this->patch(route('lessons.accept', [$lesson->id]))->assertStatus(403);

        //---------- test_owner_course_can_not_update_accept
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);  //دوره فرد دیگه ای میخواد آتایید کنه که دسترسی ندارد
        $this->patch(route('lessons.accept', $lesson->id))->assertStatus(403);
    }

    public function test_permitted_user_can_accept_multiple_lessons()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $lesson2 = $this->createLesson($course);
        $lesson3 = $this->createLesson($course);

        $this->patch(route('lessons.acceptMultiple', $course->id), [
            'lesson_ids' => '1,2'
        ]);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_ACCEPTED, Lesson::first()->confirmation_status);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_ACCEPTED, Lesson::find(2)->confirmation_status);;
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::find(3)->confirmation_status);

        //---------- test_normal_user_can_not_accept_multiple
        $this->actingAsUser();
        $this->patch(route('lessons.acceptMultiple', $course->id), [
            'lesson_ids' => '3'
        ])->assertStatus(403);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::find(3)->confirmation_status);

        //---------- test_owner_course_can_not_accept_multiple
        auth()->user()->givePErmissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->patch(route('lessons.acceptMultiple', $course->id), [
            'lesson_ids' => '3',
        ])->assertStatus(403);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::find(3)->confirmation_status);
    }

    public function test_permitted_user_can_accept_all_lessons()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $lesson2 = $this->createLesson($course);

        $course2 = $this->createCourse();
        $lesson3 = $this->createLesson($course2);

        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::find(1)->confirmation_status);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::find(2)->confirmation_status);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::find(3)->confirmation_status);

        $this->patch(route('lessons.acceptAll', $course->id));
        $this->assertEquals($course->lessons()->count(),
            $course->lessons()->where('confirmation_status', Lesson::CONFIRMATION_STATUS_ACCEPTED)->count()
        );

        $this->assertEquals($course2->lessons()->count(),
            $course2->lessons()->where('confirmation_status', Lesson::CONFIRMATION_STATUS_PENDING)->count()
        );

        //---------- test_normal_user_can_not_accept_all
        $this->actingAsUser();  //just access -> PERMISSION_MANAGE_COURSES
        $this->patch(route('lessons.acceptAll', $course2->id))->assertStatus(403);
        $this->assertEquals($course2->lessons()->count(),
            $course2->lessons()->where('confirmation_status', Lesson::CONFIRMATION_STATUS_PENDING)->count()
        );

        //---------- test_owner_course_can_not_accept_all
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->patch(route('lessons.acceptAll', $course2->id))->assertStatus(403);
        $this->assertEquals($course2->lessons()->count(),
            $course2->lessons()->where('confirmation_status', Lesson::CONFIRMATION_STATUS_PENDING)->count()
        );
    }

    public function test_permitted_user_can_reject_lesson()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::first()->confirmation_status);
        $this->patch(route('lessons.reject', $lesson->id));
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_REJECTED, Lesson::first()->confirmation_status);

        //---------- test_normal_user_can_not_reject
        $this->actingAsUser();
        $this->patch(route('lessons.reject', $lesson->id))->assertStatus(403);

        //---------- test_normal_user_can_not_reject
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->patch(route('lessons.reject', $lesson->id))->assertStatus(403);
    }

    public function test_permitted_user_can_reject_multiple_lessons()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson1 = $this->createLesson($course);
        $lesson2 = $this->createLesson($course);
        $lesson3 = $this->createLesson($course);

        $this->patch(route('lessons.rejectMultiple', $course), [
            'lesson_ids' => '1,2'
        ]);

        $this->assertEquals(Lesson::CONFIRMATION_STATUS_REJECTED, Lesson::first()->confirmation_status);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_REJECTED, Lesson::find(2)->confirmation_status);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::where('id', 3)->first()->confirmation_status);

        //---------- test_normal_user_can_not_reject_multiple
        $this->actingAsUser();
        $this->patch(route('lessons.rejectMultiple', $course->id), [
            'lesson_ids' => '3'
        ])->assertStatus(403);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::find(3)->confirmation_status);

        //---------- test_normal_user_can_not_reject_multiple
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->patch(route('lessons.rejectMultiple', $course->id), [
            'lesson_ids' => '3'
        ])->assertStatus(403);
        $this->assertEquals(Lesson::CONFIRMATION_STATUS_PENDING, Lesson::find(3)->confirmation_status);
    }

    public function test_permitted_user_can_lock_lesson()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $lesson2 = $this->createLesson($course);

        $this->patch(route('lessons.lock', $lesson->id));  //not request -> پس نسازی نیست پارامترزی بفرستیم
        $this->assertEquals(Lesson::STATUS_LOCKED, Lesson::first()->status);
        $this->assertEquals(Lesson::STATUS_OPENED, Lesson::find(2)->status);

        //---------- test_normal_user_can_not_lock
        $this->actingAsUser();
        $this->patch(route('lessons.lock', $lesson2->id))->assertStatus(403);
        $this->assertEquals(Lesson::STATUS_OPENED, Lesson::find(2)->status);

        //---------- test_normal_user_can_not_lock
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->patch(route('lessons.lock', $lesson2->id))->assertStatus(403);
        $this->assertEquals(Lesson::STATUS_OPENED, Lesson::where('id', 2)->first()->status);
    }

    public function test_permitted_user_can_unlock_lesson()
    {
        $this->actingAsAdminCourse();
        $course = $this->createCourse();
        $lesson = $this->createLesson($course);
        $lesson2 = $this->createLesson($course);
        $this->patch(route('lessons.lock', $lesson->id));
        $this->patch(route('lessons.lock', $lesson2->id));
        $this->assertEquals(Lesson::STATUS_LOCKED, Lesson::find(1)->status);
        $this->assertEquals(Lesson::STATUS_LOCKED, Lesson::find(2)->status);


        $this->patch(route('lessons.unlock', $lesson->id));  //not request -> پس نسازی نیست پارامترزی بفرستیم
        $this->assertEquals(Lesson::STATUS_OPENED, Lesson::find(1)->status);
        $this->assertEquals(Lesson::STATUS_LOCKED, Lesson::find(2)->status);

        //---------- test_normal_user_lessons.unlock
        $this->actingAsUser();
        $this->patch(route('lessons.unlock', $lesson2->id))->assertStatus(403);
        $this->assertEquals(Lesson::STATUS_LOCKED, Lesson::find(2)->status);

        //---------- test_normal_user_lessons.unlock
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES);
        $this->patch(route('lessons.unlock', $lesson2->id))->assertStatus(403);
        $this->assertEquals(Lesson::STATUS_LOCKED, Lesson::where('id', 2)->first()->status);
    }

    /*---------- Create User ----------*/

    private function createLesson($course)
    {
        return Lesson::create([
            "course_id" => $course->id,
            "user_id" => auth()->id(),
            "title" => $this->faker->title,
            "slug" => $this->faker->slug,
            "time" => $this->faker->numberBetween(5, 25),
        ]);
    }

    public function createUser()
    {
        $user = User::create([
            'name' => 'mahdi',
            'email' => $this->faker->unique()->safeEmail(),
            'mobile' => '939818' . rand(1000, 9999),
            'email_verified_at' => now(),
            'password' => \Hash::make('12aBC!@'),
            'remember_token' => Str::random(10),
        ]);
        $this->actingAs($user);  //actingAs -> authentication + factory(User::class))->create() -> create user
        $this->seed(RolePermissionTableSeeder::class);
    }

    public function actingAsSuperAdmin()
    {
        $this->createUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_SUPER_ADMIN);
    }

    public function actingAsAdminCourse()
    {
        $this->createUser();
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_COURSES);
    }

    public function actingAsUser()
    {
        $this->createUser();
    }

    /*---------- Create Data ----------*/
    public function createCategory()
    {
        return Category::create(['title' => $this->faker->title, 'slug' => $this->faker->slug]);
    }

    public function createCourse()
    {
        $data = $this->courseData() + ['confirmation_status' => Course::CONFIRMATION_STATUS_PENDING,];
        unset($data['image']);
        return Course::create($data);
    }

    public function courseData()
    {
        $category = $this->createCategory();
        return [
            'teacher_id' => auth()->id(),
            'category_id' => $category->id,
            'title' => $this->faker->sentence(2),
            'slug' => $this->faker->sentence(2),
            'priority' => 5,
            'price' => 1000000,
            'percent' => 45,
            'type' => Course::TYPE_FREE,
            'status' => Course::STATUS_NOT_COMPLETED,
            "image" => UploadedFile::fake()->image('banner.jpg', 150, 200),  //send file in testing -> UploadedFile
//          "pdf" => UploadedFile::fake()->create('test.pdf' , 120 , 'pdf'),  //send other file(pdf,word,excel,powerPoint,video,music) in testing
            'body' => $this->faker->word,
        ];
    }

}




































//--------------------------------------------------------------------------------- Lesson 127 (Some change for teacher)
1) auth()->user()->hasAnyPermission($sidebarItem['permission']) ||  //hasAnyPermission -> support array or string



//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function index(CourseRepository $courseRepository)
{
    $this->authorize('index', Course::class);  //اسم متود یا قابلیت + اسم مادل که وصل شده به پالیسی + Course::class برای تمامی دوره ها میتونه استفاده کنه

//  if (auth()->user()->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) || auth()->user()->hasPermissionTo(Permission::PERMISSION_SUPER_ADMIN)) {
    if (auth()->user()->hasAnyPermission([Permission::PERMISSION_MANAGE_COURSES, Permission::PERMISSION_SUPER_ADMIN])) {
            $courses = $courseRepository->paginate();
    } else {
        $courses = $courseRepository->getCoursesByTeacherId(auth()->id());
    }

    return view('Course::index', compact('courses'));
}



//-------------------- modules/Webamooz/Course/Repositories/CourseRepository.php
public function paginate()  //get permission PERMISSION_MANAGE_COURSES
{
    return Course::paginate(10);
}

public function getCoursesByTeacherId(int $id)  //must create owner course
{
    return Course::where('teacher_id', $id)->paginate();
}




//-------------------- modules/Webamooz/Course/Policies/CoursePolicy.php
public function index($user)
{
    return $user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) ||
        $user->hasPermissionTO(Permission::PERMISSION_MANAGE_OWN_COURSES);
}

public function createLesson($user, $course)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) ||
        ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_OWN_COURSES) && $course->teacher_id == $user->id)
    ) return true;;
}




//-------------------- modules/Webamooz/Course/Providers/CourseServiceProvider.php
public function boot()
{
    config()->set('sidebar.items.courses', [
        'icon' => 'i-courses',
        'title' => 'دوره ها',
        'url' => route('courses.index'),
        'permission' => [
            Permission::PERMISSION_MANAGE_COURSES,
            Permission::PERMISSION_MANAGE_OWN_COURSES
        ]
    ]);
}






//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/sidebar.blade.php
@foreach(config('sidebar.items') as $sidebarItem)
    @if (!array_key_exists('permission' , $sidebarItem) ||
        auth()->user()->hasAnyPermission($sidebarItem['permission']) ||  //hasAnyPermission -> support array or string
        auth()->user()->hasPermissionTo(\Webamooz\RolePermissions\Model\Permission::PERMISSION_SUPER_ADMIN))  {{-- hasPermissionTo -> support string --}}

    <li class="item-li {{ $sidebarItem['icon'] }} @if(str_starts_with(request()->url() , $sidebarItem['url'])) is-active @endif ">
        <a href="{{ $sidebarItem['url'] }}">{{ $sidebarItem['title'] }}</a></li>
    @endif
@endforeach





//-------------------- modules/Webamooz/Course/Resources/Views/index.blade.php
<td>
    <a href="" target="_blank" class="item-eye mlg-15 btn_warning_customize"
       title="مشاهده"></a>
    <a href="{{ route('courses.edit' , $course->id) }}"
       class="item-edit btn_info_customize mlg-15" title="ویرایش"></a>

    @can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_COURSES)
        <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
           onclick="deleteItem(event, '{{ route('courses.destroy' ,$course->id) }}')"></a>

        <a href=""
           onclick="updateConfirmationStatus(event , '{{ route('courses.accept' , $course->id) }}' ,
               'آیا از تایید دوره مطمعن هستید؟' , 'تایید شده' , 'confirmation_status')"
           class="item-confirm mlg-15 btn_success_customize" title="تایید شده"></a>

        <a href=""
           onclick="updateConfirmationStatus(event , '{{ route('courses.reject' , $course->id) }}' ,
               'آیا از رد دوره مطمعن هستید؟' , 'رد شده' , 'confirmation_status')"
           class="item-reject mlg-15 btn_red_customize" title="رد شده"></a>

        <a href=""
           onclick="updateConfirmationStatus(event , '{{ route('courses.lock' , $course->id) }}' ,
               'آیا از قفل شدن دوره مطمعن هستید؟' , 'قفل شده' , 'status')"
           class="item-lock mlg-15 btn_lock_customize" title="قفل شده"></a>
    @endcan
</td>






//-------------------- modules/Webamooz/Course/Resources/Views/details.blade.php
@can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_COURSES)
    <div class="d-flex item-center flex-wrap margin-bottom-15 operations__btns">
        <button class="btn all-confirm-btn" onclick="acceptAllLessons('{{ route('lessons.acceptAll' , $course->id) }}')">تایید همه جلسات</button>
        <button class="btn confirm-btn" onclick="acceptMultiple('{{ route('lessons.acceptMultiple' , $course->id) }}')">تایید جلسات</button>
        <button class="btn reject-btn" onclick="rejectMultiple('{{ route('lessons.rejectMultiple' , $course->id) }}')">رد جلسات</button>
        <button class="btn delete-btn" onclick="deleteMultiple('{{ route('lessons.destroyMultiple', $course->id)  }}')">حذف جلسات</button>
    </div>
@endcan


<td>
    <a href="{{ route('lessons.edit' , [$course->id, $lesson->id]) }}" class="item-edit btn_info_customize mlg-15" title="ویرایش"></a>

    @can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_COURSES)
        <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
           onclick="deleteItem(event , '{{ route('lessons.destroy' , [$course->id ,$lesson->id]) }}' )"></a>

        <a href="" onclick="updateConfirmationStatus(event , '{{ route('lessons.accept' , $lesson->id) }}' ,
            'آیا از تایید درس دوره مطمعن هستید؟' , 'تایید شده' , 'confirmation_status')"
           class="item-confirm mlg-15 btn_success_customize" title="تایید شده"></a>

        <a href="" onclick="updateConfirmationStatus(event , '{{ route('lessons.reject' , $lesson->id) }}' ,
            'آیا از رد درس دوره مطمعن هستید؟' , 'رد شده' , 'confirmation_status')"
           class="item-reject mlg-15 btn_red_customize" title="رد شده"></a>

        @if ($lesson->status == \Webamooz\Course\Models\Lesson::STATUS_OPENED)
            <a href="" onclick="updateConfirmationStatus(event , '{{ route('lessons.lock' , $lesson->id) }}' ,
                'آیا از قفل شدن درس مطمعن هستید؟' , 'قفل شده' , 'status')"
               class="item-lock mlg-15 btn_lock_customize" title="قفل شده"></a>
        @else
            <a href="" onclick="updateConfirmationStatus(event , '{{ route('lessons.unlock' , $lesson->id) }}' ,
                'آیا از باز کردن درس مطمعن هستید؟' , 'باز شده' , 'status')"
               class="item-unlock mlg-15 btn_unlock_customize" title="باز شده"></a>
        @endif
    @endcan

</td>
































//------------------------------------------------------------------------------------ Lesson 128 (Upgrade to laravel 8)
*) watched in video + update php 7.4 + updated composer.json -> laravel,phpunit,guzzle,ui,...
1) composer update






















//--------------------------------------------------------------------------------- Lesson 129 (Solving migration error)
1) php artisan migrate:fresh --seed



//-------------------- edited database
2019_01_01_182843_create_media_table.php
2024_05_01_000000_create_users_table.php
2024_01_01_100000_create_password_resets_table.php



//-------------------- INFO  Running migrations
*2019_01_01_182843_create_media_table ................................................................................................... 22ms DONE
2019_08_19_000000_create_failed_jobs_table ............................................................................................. 41ms DONE
2019_12_14_000001_create_personal_access_tokens_table .................................................................................. 49ms DONE
*2024_01_01_100000_create_password_resets_table ......................................................................................... 34ms DONE
*2024_01_01_000000_create_users_table .................................................................................................. 100ms DONE
2024_05_18_200046_create_categoies_table ............................................................................................... 84ms DONE
2024_05_21_104017_create_permission_tables ............................................................................................ 523ms DONE
2024_05_23_203129_create_courses_table ................................................................................................ 214ms DONE
2024_06_11_111332_create_seasons_table ................................................................................................ 133ms DONE
2024_06_14_114945_create_lessons_table ................................................................................................ 249ms DONE




//-------------------- modules/Webamooz/User/Models/User.php
public static array $defaultUsers = [
    [
        'name' => 'Admin',
        'email' => 'admin@gmail.com',
        'password' => 'admin',
        'username' => 'username',
        'role' => Role::ROLE_SUPER_ADMIN,
    ],
    [
        'name' => 'NormalUser',
        'email' => 'normaluser@gmail.com',
        'password' => 'normaluser',
        'role' => Role::ROLE_STUDENT,

    ],
    [
        'name' => 'Teacher',
        'email' => 'teacher@gmail.com',
        'password' => 'teacher',
        'role' => Role::ROLE_TEACHER,
    ]
];




//-------------------- modules/Webamooz/User/database/Seeders/UsersTableSeeder.php
public function run()
{
    //findOrCreate -> بیا پیدا کن اگر وجود داشت کاری نکن ولی اگر وجود نداشت بیا بساز + یک دیتا میگیره به صورت استرینگ و اسم دیتا
    foreach (User::$defaultUsers as $user) {
        User::firstOrCreate(
            ['email' => $user['email'], 'name' => $user['name']]  //شرطی که گذاشتی برای قسمت first بیا پیدا کنه مقدار کاربر وگرنه بسازش
            ,[
            'name' => $user['name'],
            'email' => $user['email'],
            'password' => bcrypt($user['password'])
        ])->assignRole($user['role'])->markEmailAsVerified();  //email verified -> markEmailAsVerified
    }
}























//---------------------------------------------------------------------------- Lesson 130 (Refactor factories and tests)
1) laravel 7 -> 8 upgrade -> resolve factories -> composer laravel/legacy-factories
2) remove package -> composer laravel/legacy-factories
3) laravel 7 -> 8 upgrade -> resolve factories ->
4) User::factory()->make()   -> میاد کاربر میسازه اما درون دیتابیس ذخیره نمیکنه
5) User::factory()->create() -> میاد هم کاربر میسازه و هم درون دیتابیس ذخیره مکینه



//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function index(CourseRepository $courseRepository)
{
    $this->authorize('index', Course::class);  //اسم متود یا قابلیت + اسم مادل که وصل شده به پالیسی + Course::class برای تمامی دوره ها میتونه استفاده کنه

//  if (auth()->user()->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) || auth()->user()->hasPermissionTo(Permission::PERMISSION_SUPER_ADMIN)) {
    if (auth()->user()->hasAnyPermission([Permission::PERMISSION_MANAGE_COURSES, Permission::PERMISSION_SUPER_ADMIN])) {
            $courses = $courseRepository->paginate();
    } else {
        $courses = $courseRepository->getCoursesByTeacherId(auth()->id());
    }

    return view('Course::index', compact('courses'));
}




//-------------------- modules/Webamooz/User/database/factories/UserFactory.php
class UserFactory extends Factory
{
    protected $model = User::class;  //Connection Model in Factories
}



//-------------------- modules/Webamooz/User/Models/User.php
class User extends Authenticatable implements MustVerifyEmail
{
    use HasFactory;  //Connection Factories in Model
}



//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
Factory::guessFactoryNamesUsing(function ($modelName) {  //name factory
    return "Webamooz\User\database\\factories\\" . class_basename($modelName) . 'Factory';  //class_basename + Factory -> 'namespace'.UserFactory
});
$this->loadFactoriesFrom(__DIR__ . '/../database/factories/');  //function register




//-------------------- modules/Webamooz/Category/Tests/Feature/CategoryTest.php
private function actingAsAdminCreate()
{
    /*$user = User::create([
        'name' => 'mahdi',
        'email' => 'mahdi@gmail.com',
        'mobile' => '9398187800',
        'email_verified_at' => now(),
        'password' => \Hash::make('12aBC!@'),
        'remember_token' => Str::random(10),
    ]);*/
    $this->actingAs(User::factory()->create());  //actingAs -> authentication + factory(User::class))->create() -> create user
    $this->seed(RolePermissionTableSeeder::class);  //create permission + role
    auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_CATEGORIES);
}

public function actingAsUserCreate()
{
    $this->seed(RolePermissionTableSeeder::class);  //create permission + role
    $this->actingAs(User::factory()->create());  //actingAs -> authentication + factory(User::class))->create() -> create user
}



//-------------------- modules/Webamooz/Course/Tests/Feature/CourseTest.php
public function createUser()
{
    $this->actingAs(User::factory()->create());  //actingAs -> authentication + factory(User::class))->create() -> create user
    $this->seed(RolePermissionTableSeeder::class);
}


//-------------------- modules/Webamooz/Course/Tests/Feature/LessonTest.php
public function createUser()
{
    $this->actingAs(User::factory()->create());  //actingAs -> authentication + factory(User::class))->create() -> create user
    $this->seed(RolePermissionTableSeeder::class);
}


//-------------------- modules/Webamooz/Course/Tests/Feature/SeasonTest.php
public function createUser()
{
    $this->actingAs(User::factory()->create());  //actingAs -> authentication + factory(User::class))->create() -> create user
    $this->seed(RolePermissionTableSeeder::class);
}


//-------------------- modules/Webamooz/RolePermissions/Tests/Feature/RolesTest.php
public function actingAsUser()
{
    $this->actingAs(User::factory()->create());
    $this->seed(RolePermissionTableSeeder::class);
}
































//------------------------------------------------------------------------------------- Lesson 131 (Create Front Module)
1) composer du


//-------------------- composer.json
"Webamooz\\Front\\" : "modules/Webamooz/Front/",


//-------------------- config/app.php
\Webamooz\Front\Providers\FrontServiceProvider::class,



//-------------------- modules/Webamooz/Front/Providers/FrontServiceProvider.php
public function register()
{
    $this->loadRoutesFrom(__DIR__ . "/../Routes/front_routes.php");
    $this->loadViewsFrom(__DIR__ . "/../Resources/Views/", "Front");
}



//-------------------- modules/Webamooz/Front/front_routes.php
Route::group(['namespace' => 'Webamooz\Front\Http\Controllers', 'middleware' => ['web']], function ($router) {
    $router->get('/', [FrontController::class, 'index'])->name('website');
});



//-------------------- modules/Webamooz/Front/Http/Controllers/FrontController.php
public function index()
{
    return view('Front::index');
}



































//------------------------------------------------------------------------------------ Lesson 132 (Organize blade files)
//-------------------- modules/Webamooz/Front/Resources/Views/layouts/master.blade.php
<!doctype html>
<html lang="fa">
@includeIf('Front::layouts.head')
<body >

@includeIf('Front::layouts.header')

<main id="index">
        @yield('content')
</main>

@include('Front::layouts.footer')

@include('Front::layouts.foot')  {{-- files js --}}
</body>
</html>





//-------------------- modules/Webamooz/Front/Resources/Views/index.blade.php
@extends('Front::layouts.master')

@section('title' , 'وب آموز | آموزش برنامه‌ نویسی و طراحی وب')

@section('content')

    <article class="container article">
        @includeIf('Front::layouts.header-ads')

        @include('Front::layouts.top-info')  {{-- sliders center + 2 sliders inside --}}

        @include('Front::layouts.newestCourses')

        @includeIf('Front::layouts.popularCourses')
    </article>
    @includeIf('Front::layouts.latestArticles')

@endsection























//------------------------------------------------------------------------------------------ Lesson 133 (Header section)
//-------------------- modules/Webamooz/User/Routes/user_routes.php
Route::any('/logout', [LoginController::class, 'logout'])->name('logout');  //any -> get,post,put,patch,delete




//-------------------- modules/Webamooz/User/Routes/user_routes.php
<x-input type="text" name="username" placeholder="نام کاربری و آدرس پروفایل" value="{{ auth()->user()->username }}"/>
<p class="input-help text-left margin-bottom-12" dir="ltr">
    @if (auth()->user()->username)
        <a href="{{ auth()->user()->profilePath() }}">{{ route('users.view.profile', auth()->user()->username) }}</a>
    @else
        <a href="">username</a>
    @endif
</p>
...
@endcan




//-------------------- modules/Webamooz/Front/Resources/Views/layouts/header.blade.php
<div class="join-teachers">
    <a href="become-a-teacher.html">تدریس در وب آموز</a>
</div>

@auth()
    <div class="user-menu-account">
        <div class="user-image">
            <img src="{{ auth()->user()->thumb }}" alt="{{ auth()->user()->name }}">
        </div>
        <span>پروفایل کاربری من </span>
        <div class="user-menu-account-dropdown">
            <ul>
                <li><a href="{{ route('users.profile') }}">مشاهده پروفایل</a></li>
                <li><a href="">خرید های من</a></li>
                <li><a href="{{ route('home') }}">داشبورد</a></li>
                <li><a href="{{ route('logout') }}">خروج</a></li>
            </ul>
        </div>
    </div>
@endauth

@guest()
    <div class="login-register-btn ">
        <div><a class="btn-login" href="{{ route('login') }}">ورود</a></div>
        <div><a class="btn-register" href="{{ route('register') }}">ثبت نام</a></div>
    </div>
@endguest




<ul class="nav">
    @foreach($categories as $category)
        <li class="main-menu {{ count($category->subCategories) ? 'has-sub' : '' }}">
            <a href="{{ $category->path() }}">{{ $category->title }}</a>

            @if (count($category->subCategories))
                <div class="sub-menu">
                    <div class="container">
                        @foreach($category->subCategories as $subCategory)
                            <div><a href="{{ $subCategory->path() }}">{{ $subCategory->title }}</a></div>
                        @endforeach
                    </div>
                </div>
                <div class="triangle"></div>
            @endif

        </li>
    @endforeach

    <li class="main-menu d-none"><a href="#">درباره ما</a></li>
    <li class="main-menu"><a href="contact-us.html">تماس ما</a></li>
    <li class="main-menu join-teachers-li"><a href="become-a-teacher.html">تدریس در وب آموز</a></li>
    <li class="main-menu"><a href="https://www.webamooz.net/blog">مقالات</a></li>
</ul>








//-------------------- modules/Webamooz/Front/Providers/FrontServiceProvider.php
public function register()
{
    $this->loadRoutesFrom(__DIR__ . "/../Routes/front_routes.php");
    $this->loadViewsFrom(__DIR__ . "/../Resources/Views/", "Front");
    view()->composer('Front::layouts.header', function ($view) {  //shared view site
        $categories = (new CategoryRepository())->tree();
        $view->with(compact('categories'));
    });
}

public function boot(): void
{
    /*
    //with('subCategories') کوری ما همراه ریلیشن میگیره و مادل، دیتابیس سبک + دلیل دو بار نوشتن استفاده دوبار از ریلیشن در فرانت در فورایچ
    $categories = (new CategoryRepository())->tree();
    View::share([  //shared all views site
        'categories' => $categories
    ]);*/
}





//-------------------- modules/Webamooz/Category/Repositories/CategoryRepository.php
public function tree()
{
    return Category::where('parent_id', null)->with('subCategories')->get();  //subCategories -> کوری سبک تر همراه ریلیشن بگیره
}




//-------------------- modules/Webamooz/Category/Models/Category.php
public function path()
{
    return route('categories.show', $this->id);
}





























//------------------------------------------------------------------------------------------ Lesson 134 (Newest courses)
//-------------------- modules/Webamooz/Front/Providers/FrontServiceProvider.php
public function register()
{
    view()->composer('Front::layouts.newestCourses', function ($view) {
        $newestCourses = (new CourseRepository())->newestCourses();
        $view->with(compact('newestCourses'));
    });
}




//-------------------- modules/Webamooz/Course/Repositories/CourseRepository.php
public function newestCourses()
{
    return Course::where('confirmation_status', Course::CONFIRMATION_STATUS_ACCEPTED)
        ->take(8)->latest()->get();
}




//-------------------- modules/Webamooz/Front/Resources/Views/layouts/newestCourses.blade.php
<div class="box-filter">

    <div class="b-head">
        <h2>جدید ترین دوره ها</h2>
        <a href="all-courses.html">مشاهده همه</a>
    </div>

    <div class="posts">
        @foreach($newestCourses as $courseItem)
            @include('Front::layouts.singleCourseBox')
        @endforeach
    </div>
</div>






//-------------------- modules/Webamooz/Front/Resources/Views/layouts/singleCourseBox.blade.php
<div class="col">
    <a href="{{ $courseItem->path() }}">
        <div class="course-status">@lang($courseItem->status)</div>
        <div class="discountBadge"><p>45%</p>تخفیف
        </div>
        <div class="card-img"><img src="{{ $courseItem->media->thumb }}" alt="{{ $courseItem->title }}"></div>
        <div class="card-title"><h2>{{ $courseItem->title }}</h2></div>
        <div class="card-body">
            <img src="{{ $courseItem->teacher->thumb }}" alt="{{ $courseItem->teacher->name }}">
            <span>{{ $courseItem->teacher->name }}</span>
        </div>
        <div class="card-details">
            <div class="time">{{ $courseItem->formattedDurationTimeLesson() }}</div>
            <div class="price">
                <div class="discountPrice">{{ number_format($courseItem->price) }}</div>
                <div class="endPrice">{{ number_format($courseItem->price) }}</div>
            </div>
        </div>
    </a>
</div>




//-------------------- modules/Webamooz/Course/Models/Course.php
public function getDuration()
{
    return resolve(CourseRepository::class)->getDurationTimeLesson($this->id);
}

public function formattedDurationTimeLesson()
{
    $duration = $this->getDuration();
    $h = round($duration / 60) < 10 ? '0' . round($duration / 60) : round($duration / 60);  //زیر یک ساعت بود بیا ی صفر بزار قبلش
    $m = ($duration % 60) < 10 ? '0' . ($duration % 60) : ($duration % 60);  //دقیقه اگر زیر ده بود بیا ی صفر بزار وگرنه عدد دورقمی میشه و خودش بنویس
    return $h . ':' . $m . ":00";
}




























//---------------------------------------------------------------------------- Lesson 135,137 (Single course part 1,2,3)
//-------------------- modules/Webamooz/Front/Routes/front_routes.php
$router->get('/c-{slug}', [FrontController::class, 'singleCourse'])->name('courses.singleCourse');




//-------------------- modules/Webamooz/Front/Http/Controllers/FrontController.php
public function singleCourse($slug, CourseRepository $courseRepository, LessonRepository $lessonRepository)
{
    //Str::after($slug , 'c-') -> 1-course-laravel-11  //delete(c-)
    //get id -> 1)get slug(subject) 2)search بردار نمایش بده c- برو هرچی بعد از  +  befor -> هرچی قبل اولین دش بر دار نمایش بده که آیدی کاربر
    $course_id = $this->extractId($slug, 'c');
    $course = $courseRepository->findById($course_id);
    $lessons = $lessonRepository->getAcceptedLessons($course_id);

    if (request()->lesson) {  //اگر درسی انتخاب بکنه اون نمایش میده ورگنه درس شماره یک نمایش میده
        $lesson = $lessonRepository->getShowLesson($course_id, $this->extractId(request()->lesson, 'l'));
    } else {
        $lesson = $lessonRepository->getFirstLesson($course_id);
    }
    return view('Front::singleCourse', compact('course', 'lessons', 'lesson'));
}

public function extractId($slug, $key)
{
    return Str::before(Str::after($slug, $key . '-'), '-');
}




//-------------------- modules/Webamooz/Course/Models/Course.php
public function path()
{
    return route('courses.singleCourse', $this->id . '-' . $this->slug);  //localhost:8000/c-1-course-laravel-11
}

public function shortUrl()
{
    return route('courses.singleCourse', $this->id);
}

public function lessonCount()
{
    return (new CourseRepository())->getLessonCount($this->id);
}





//-------------------- modules/Webamooz/Course/Repositories/CourseRepository.php
public function getLessonCount($course_id)
{
    return Lesson::where('course_id', $course_id)
        ->where('confirmation_status', Lesson::CONFIRMATION_STATUS_ACCEPTED)->count();
}





//-------------------- modules/Webamooz/Course/Repositories/LessonRepository.php
public function getAcceptedLessons(int $course_id)
{
    return Lesson::where('course_id', $course_id)
        ->where('confirmation_status', Lesson::CONFIRMATION_STATUS_ACCEPTED)->get();
}

public function getFirstLesson(int $course_id)  //show first lesson
{
    return Lesson::where('course_id', $course_id)
        ->where('confirmation_status', Lesson::CONFIRMATION_STATUS_ACCEPTED)->orderBy('number', 'asc')->first();
}

public function getShowLesson(int $course_id, int $lesson_id)
{
    return Lesson::where('course_id', $course_id)->where('id', $lesson_id)->first();
}





//-------------------- modules/Webamooz/Course/Models/Lesson.php
public function path()
{
    return $this->course->path() . '?lesson=l-' . $this->id . '-' . $this->slug;  //?lesson=l-2-route-map
}




//-------------------- modules/Webamooz/Front/Resources/Views/singleCourse.blade.php
<div class="container">
    <article class="article mr-152">

        @includeIf('Front::layouts.header-ads')

        <div class="h-t">
            <h1 class="title">{{ $course->title }}</h1>
            <div class="breadcrumb">
                <ul>
                    <li><a href="/" title="خانه">خانه</a></li>
                    @if ($course->category->parentCategory)
                        <li><a href="{{ $course->category->parentCategory->path() }}" title="{{ $course->category->parentCategory->title }}">
                                {{ $course->category->parentCategory->title }}</a></li>
                    @endif
                    <li><a href="{{ $course->category->path() }}" title="{{ $course->category->title }}">{{ $course->category->title }}</a></li>
                </ul>
            </div>
        </div>

    </article>
</div>


<div class="main-row container">
    <div class="sidebar-right">
        <div class="sidebar-sticky" style="top: 104px;">
            <div class="product-info-box">
                <div class="discountBadge d-none">
                    <p>45%</p>تخفیف
                </div>
                <div class="sell_course d-none">
                    <strong>قیمت :</strong>
                    <del class="discount-Price">{{ number_format($course->price) }}</del>
                    <p class="price">
                <span class="woocommerce-Price-amount amount">{{ number_format($course->price) }}
                    <span class="woocommerce-Price-currencySymbol">تومان</span>
                </span>
                    </p>
                </div>

                @auth
                    @if (auth()->id() == $course->teacher_id)
                        <p class="mycourse ">شما مدرس این دوره هستید</p>
                    @elseif(auth()->user()->hasAccessToCourse($course->id))
                        <p class="mycourse">شما این دوره رو خریداری کرده اید</p>
                    @else
                        <button class="btn buy">خرید دوره</button>
                    @endif
                @else
                    <button class="btn buy">خرید دوره</button>
                @endauth
                <div class="average-rating-sidebar">
                    <div class="rating-stars">
                        <div class="slider-rating" data-title="خیلی خوب">
                            <span class="slider-rating-span slider-rating-span-100" data-value="100%" data-title="خیلی خوب"></span>
                            <span class="slider-rating-span slider-rating-span-80" data-value="80%" data-title="خوب"></span>
                            <span class="slider-rating-span slider-rating-span-60" data-value="60%" data-title="معمولی"></span>
                            <span class="slider-rating-span slider-rating-span-40" data-value="40%" data-title="بد"></span>
                            <span class="slider-rating-span slider-rating-span-20" data-value="20%" data-title="خیلی بد"></span>
                            <div class="star-fill"></div>
                        </div>
                    </div>

                    <div class="average-rating-number">
                        <span class="title-rate title-rate1">امتیاز</span>
                        <div class="schema-stars">
                            <span class="value-rate text-message"> 4 </span>
                            <span class="title-rate">از</span>
                            <span class="value-rate"> 555 </span>
                            <span class="title-rate">رأی</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="product-info-box">
                <div class="product-meta-info-list">
                    <div class="total_sales">
                        تعداد دانشجو : <span>246</span>
                    </div>
                    <div class="meta-info-unit one">
                        <span class="title">تعداد جلسات منتشر شده :  </span>
                        <span class="vlaue">{{ $course->lessonCount() }}</span>
                    </div>
                    <div class="meta-info-unit two">
                        <span class="title">مدت زمان دوره تا الان : </span>
                        <span class="vlaue">{{ $course->formattedDurationTimeLesson() }}</span>
                    </div>
                    <div class="meta-info-unit three">
                        <span class="title">مدت زمان کل دوره : </span>
                        <span class="vlaue">-</span>
                    </div>
                    <div class="meta-info-unit four">
                        <span class="title">مدرس دوره : </span>
                        <span class="vlaue">{{ $course->teacher->name }}</span>
                    </div>
                    <div class="meta-info-unit five">
                        <span class="title">وضعیت دوره : </span>
                        <span class="vlaue">@lang($course->status)</span>
                    </div>
                    <div class="meta-info-unit six">
                        <span class="title">پشتیبانی : </span>
                        <span class="vlaue">دارد</span>
                    </div>
                </div>
            </div>
            <div class="course-teacher-details">
                <div class="top-part">
                    <a href="https://webamooz.net/tutor/mohammadnikoo/">
                        <img alt="{{ $course->teacher->name }}" class="img-fluid lazyloaded" src="img/profile.jpg" loading="lazy">
                        <noscript>
                            <img class="img-fluid" src="{{ $course->teacher->thumb }}" alt="{{ $course->teacher->name }}">
                        </noscript>
                    </a>
                    <div class="name">
                        <a href="https://webamooz.net/tutor/mohammadnikoo/" class="btn-link"><h6>{{ $course->teacher->name }}</h6>
                        </a>
                        <span class="job-title">{{ $course->teacher->head_line }}</span>
                    </div>
                </div>
                <div class="job-content">
                    {{--  {{ $course->teacher->bio }}  --}}
                </div>
            </div>
            <div class="short-link">
                <div class="">
                    <span>لینک کوتاه</span>
                    <input class="short--link" value="{{ $course->shortUrl() }}">
                    <a href="{{ $course->shortUrl() }}" class="short-link-a" data-link="{{ $course->shortUrl() }}"></a>
                </div>
            </div>


            @includeIf('Front::layouts.sidebar-banners')  {{-- channels telegram --}}

        </div>
    </div>
    <div class="content-left">
        <div class="preview">
            <video width="100%" controls="">
                <source src="intro.mp4" type="video/mp4">
            </video>
        </div>
        <a href="#" class="episode-download"> دانلود این قسمت (قسمت {{ $lesson->number }})</a>
        <div class="course-description">
            <div class="course-description-title">توضیحات دوره</div>
           <p>{!! $course->body !!}</p>


            <div class="tags">
                <ul>
                    <li><a href="">ری اکت</a></li>
                    <li><a href="">reactjs</a></li>
                    <li><a href="">جاوااسکریپت</a></li>
                    <li><a href="">javascript</a></li>
                    <li><a href="">reactjs چیست</a></li>
                </ul>
            </div>
        </div>

        @include('Front::layouts.episodes-list')  {{-- list downlod lesson courses --}}

    </div>
</div>






//-------------------- modules/Webamooz/Front/Resources/Views/layouts/episodes-list.blade.php
<div class="episodes-list">
    <div class="episodes-list--title">فهرست جلسات</div>
    <div class="episodes-list-section">

        @foreach($lessons as $index => $lesson)
            <div class="episodes-list-item {{ !$lesson->is_free ? 'lock' : ''  }}">
                <div class="section-right">
                    <span class="episodes-list-number">{{ $index + 1 }}</span>
                    <div class="episodes-list-title">
                        <a href="{{ $lesson->path() }}">{{ $lesson->title }}</a>
                    </div>
                </div>

                <div class="section-left">
                    <div class="episodes-list-details">
                        <div class="episodes-list-details">
                            <span class="detail-type">{{ $lesson->is_free ? "رایگان" : '' }}</span>
                            <span class="detail-time">{{ $lesson->time }}</span>
                            <a class="detail-download">
                                <i class="icon-download"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        @endforeach

    </div>
</div>




//-------------------- modules/Webamooz/Front/Resources/Views/layouts/sidebar-banners.blade.php
<di class="sidebar-banners">

    <div class="sidebar-pic">
        <a href="https://t.me/webmooz_net"><img src="img/telgram.png" alt="کانال تلگرام"></a>
    </div>

    <div class="sidebar-pic">
        <a href="https://t.me/webmooz_net"><img src="img/laravel-tel.png" alt="کانال تلگرام"></a>
    </div>
    <div class="sidebar-pic">
        <a href="https:webamooz.net/blog"><img src="img/podcast.png" alt="وبلاگ وب آموز"></a>
    </div>
    <div class="sidebar-pic">
        <a href="https://t.me/webmooz_net"><img src="img/workinja.png" alt="کانال تلگرام"></a>
    </div>
    <div class="sidebar-pic">
        <a href="https://t.me/webmooz_net"><img src="img/blog-pic.png" alt="کانال تلگرام"></a>
    </div>
</di>






























































//----------------------------------------------------------------------------------- Lesson 138 (Download media part 1)
//-------------------- modules/Webamooz/Media/Routes/media_route.php
Route::group([], function ($router) {
    $router->get('/media/{media}/download', [MediaController::class , 'download'])->name('media.download');
});




//-------------------- modules/Webamooz/Course/Models/Lesson.php
public function downloadLink()
{
    return URL::temporarySignedRoute('media.download',now()->addDay(), ['media' => $this->media_id]);
}




//-------------------- modules/Webamooz/Front/Resources/Views/singleCourse.blade.php
<div class="content-left">
    @if ($lesson->media->type == 'video')
        <div class="preview">
            <video width="100%" controls="">
                <source src="{{ $lesson->downloadLink() }}" type="video/mp4">
            </video>
        </div>
    @endif
    <a href="{{ $lesson->downloadLink() }}" class="episode-download"> دانلود این قسمت (قسمت {{ $lesson->number }})</a>



//-------------------- modules/Webamooz/Media/Providers/MediaServiceProvider.php
protected string $namespace = "Webamooz\Media\Http\Controllers";

public function register()
{
//  $this->loadRoutesFrom(__DIR__ . '/../Routes/media_route.php');  //need namespace + middleware
    \Route::middleware(['web'])
        ->namespace($this->namespace)
        ->group(__DIR__ . '/../Routes/media_route.php');  //not need namespace + middleware
}




//-------------------- modules/Webamooz/Media/Http/Controllers/MediaController.php
public function download(Media $media, Request $request)
{
    if (!$request->hasValidSignature()) {
        abort(401);
    }
    return MediaFileService::stream($media);
}


//-------------------- modules/Webamooz/Media/Contracts/FileServiceContract.php
public static function stream(Media $media);



//-------------------- modules/Webamooz/Media/Services/MediaFileService.php
public static function stream(Media $media)
{
    foreach (config('mediaFile.MediaTypeServices') as $type => $mediaFile) {
        if ($media->type == $type) {
            return $mediaFile['handler']::stream($media);  //$mediaFile['handler'] === Services/ZipFileService.php
        }
    }
}





//-------------------- modules/Webamooz/Media/Services/DefaultFileService.php  //درون همه کلاس های ویدیو و عکس و زیپ اکستند شده به عنوان کلاس پدر
abstract static function getFileName();


public static function stream(Media $media)
{
    static::$media = $media;
    $stream = Storage::readStream(static::getFileName());  //self::getFileName() همین متود درون این کلاس میخونه -> static::getFileName() -> متودی که باز نویسی کردیم در سرویس زیپ میخونه
    return response()->stream(function () use ($stream) {  //
        fpassthru($stream);  //for download in client -> دیتا میفرسته سمت خروجی یا کاربر
    },
    200,
    [
        'Content-Type' => Storage::mimeType(static::getFileName()),
        "Content-disposition => 'attachment; filename='" . static::$media->filename . "'"
    ]);
}





//-------------------- modules/Webamooz/Media/Services/ZipFileService.php
public static function getFileName()
{
    return (self::$media->is_private ? 'private/' : 'public/') . self::$media->files['zip'];
}



//-------------------- modules/Webamooz/Media/Services/VideoFileService.php
public static function getFileName()
{
    return (static::$media->is_private ? 'private/' : 'public/') . static::$media->files['video'];
}


//-------------------- modules/Webamooz/Media/Services/ImageFileService.php
public static function getFileName()
{
    return (static::$media->is_private ? 'private/' : 'public/') . static::$media->files['original'];
}































//------------------------------------------------------------------------------------ Lesson 140 (Students and courses)
1) php artisan make:migration course_student



//-------------------- modules/Webamooz/User/Models/User.php
public function purchases()  //relation(student,course) save student buy course
{
    //relation + table(name) + column(اسم ستون مربوط به این مادل) + column(اسم ستون ریلیشن یا طرف مقابل)
    return $this->belongsToMany(Course::class, 'course_user', 'user_id', 'course_id');
}

public function hasAccessToCourse(Course $course)
{
    //یا مدیر سایت یا کسی که مدرس این دوره یا دانشجوی ثبت نامی بتونه دسترسی به دوره داشته باشد
    if ($this->can('manage') || $this->id == $course->teacher_id || $this->id == $course->students->contains($this->id)) {  //contains -> اگر کاربر وجود داشت آیدیش بگیر
        return true;
    }
    return false;
}




//-------------------- modules/Webamooz/Course/Models/Course.php
public function students()  //relation(student,course) save student buy course
{
    //relation + table(name) + column(اسم ستون مربوط به این مادل) + column(اسم ستون ریلیشن یا طرف مقابل)
    return $this->belongsToMany(User::class, 'course_user', 'course_id', 'user_id');
}



//-------------------- modules/Webamooz/Front/Resources/Views/layouts/episodes-list.blade.php
<div class="total_sales">
    تعداد دانشجو : <span>{{ count($course->students) }}</span>
</div>




//-------------------- database/migrations/2024_07_11_032854_course_user.php
return new class extends Migration {

    public function up()
    {
        Schema::create('course_user', function (Blueprint $table) {
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('course_id')->constrained()->onDelete('cascade');
            $table->primary(['user_id', 'course_id']);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('course_user');
    }
};



























//-------------------------------------------------------------------------------------- Lesson 141 (Download big files)
//-------------------- modules/Webamooz/Front/Resources/Views/layouts/episodes-list.blade.php
<div class="episodes-list-item {{ auth()->check() && auth()->user()->hasAccessToCourse($lesson->course) ? '' : 'lock'  }}">



//-------------------- modules/Webamooz/Media/Services/DefaultFileService.php
public static function stream(Media $media)
{
    static::$media = $media;
    $stream = Storage::readStream(static::getFileName());  //self::getFileName() همین متود درون این کلاس میخونه -> static::getFileName() -> متودی که باز نویسی کردیم در سرویس زیپ میخونه
    return response()->stream(function () use ($stream) {  //
        while (ob_get_level() > 0) ob_get_flush();
        //ob_get_level -> مقدار رم برای دانلود اگر بزرگتر از صفر یا در حال استفاده بود
        // ob_get_flush بیا مقدار فضای استفاده رم برای دانلود مثلا یک گیگ بیا صفر کن تا بتونه فایل بزرگتر از یک گیگ دانلود کنه
        fpassthru($stream);  //for download in client -> دیتا میفرسته سمت خروجی یا کاربر
    },
    200,
    [
        'Content-Type' => Storage::mimeType(static::getFileName()),
        "Content-disposition => 'attachment; filename='" . static::$media->filename . "'"
    ]);
}























//------------------------------------------------------------------------------------------- Lesson 142 (Tutorial page)
//-------------------- modules/Webamooz/Front/Routes/front_routes.php
$router->get('/tutors/{username}', [FrontController::class, 'singleTutors'])->name('singleTutors');



//-------------------- modules/Webamooz/Front/Http/Controllers/FrontController.php
public function singleTutors($username)
{
    $tutor = User::permission(Permission::PERMISSION_TEACH)->where('username', $username)->first();
    return view('Front::tutors', compact('tutor'));
}




//-------------------- modules/Webamooz/Front/Resources/Views/singleCourse.blade.php
<div class="top-part">
    <a href="{{ route('singleTutors' , $course->teacher->username) }}">
        <img alt="{{ $course->teacher->name }}" class="img-fluid lazyloaded" src="img/profile.jpg" loading="lazy">
        <noscript>
            <img class="img-fluid" src="{{ $course->teacher->thumb }}" alt="{{ $course->teacher->name }}">
        </noscript>
    </a>
    <div class="name">
        <a href="{{ route('singleTutors' , $course->teacher->username) }}" class="btn-link"><h6>{{ $course->teacher->name }}</h6>
        </a>
        <span class="job-title">{{ $course->teacher->head_line }}</span>
    </div>
</div>




//-------------------- modules/Webamooz/Front/Resources/Views/tutors.blade.php
@extends('Front::layouts.master')
@section('title' , 'اطلاعات مدرس')

@section('content')
    <main id="index">
        <div class="bt-0-top article mr-202"></div>
        <div class="bt-1-top">
            <div class="container">
                <div class="tutor">
                    <div class="tutor-item">
                        <div class="tutor-avatar">
                            <span class="tutor-image" id="tutor-image"><img src="{{ $tutor->thumb }}" class="tutor-avatar-img"></span>
                            <div class="tutor-author-name">
                                <a id="tutor-author-name" href="" title="{{ $tutor->name }}">
                                    <h3 class="title"><span class="tutor-author--name">{{ $tutor->name }}</span></h3>
                                </a>
                            </div>
                            <div id="Modal1" class="modal">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <div class="close">&times;</div>
                                    </div>
                                    <div class="modal-body">
                                        <img class="tutor--avatar--img" src="" alt="">
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tutor-item">
                        <div class="stat">
                            <span class="tutor-number tutor-count-courses">{{ count($tutor->courses) }}</span>
                            <span class="">تعداد دوره ها</span>
                        </div>
                        <div class="stat">

                            <span class="tutor-number">{{ $tutor->studentsCount() }}</span>
                            <span class="">تعداد  دانشجویان</span>
                        </div>

                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="box-filter">
                <div class="b-head">
                    <h2>دوره های {{ $tutor->name }}</h2>
                </div>
                <div class="posts">

                    @foreach($tutor->courses as $courseItem)
                        @include('Front::layouts.singleCourseBox')
                    @endforeach

                </div>
            </div>
        </div>

    </main>
@endsection

@section('css')
    <link rel="stylesheet" href={{ asset('/css/modal.css') }}>
@endsection

@section('js')
    <script src="{{ asset('/js/modal.js') }}"></script>
@endsection


































//------------------------------------------------------------------------------------ Lesson 143 (Buy course front end)
//-------------------- modules/Webamooz/Front/Resources/Views/layouts/head.blade.php
<link rel="stylesheet" href="/css/custom.css?v="{{ uniqid() }}>




//-------------------- modules/Webamooz/Course/Routes/course_route.php
$router->post('/courses/{course}/buy', [CourseController::class, 'buy'])->name('courses.buy');




//-------------------- modules/Webamooz/Front/Resources/Views/singleCourse.blade.php
@auth
    @if (auth()->id() == $course->teacher_id)
        <p class="mycourse ">شما مدرس این دوره هستید</p>
    @elseif(auth()->user()->hasAccessToCourse($course))
        <p class="mycourse">شما این دوره رو خریداری کرده اید</p>
    @else
        <div class="sell_course">
            <strong>قیمت :</strong>
            <del class="discount-Price">{{ number_format($course->price) }}</del>
            <p class="price">
        <span class="woocommerce-Price-amount amount">{{ $course->getFormattedFinalPrice()  }}
        <span class="woocommerce-Price-currencySymbol">تومان</span>
        </span>
            </p>
        </div>

        <button class="btn buy btn-buy">خرید دوره</button>
    @endif

@else
    <div class="sell_course">
        <strong>قیمت :</strong>
        <del class="discount-Price">{{ number_format($course->price) }}</del>
        <p class="price">
        <span class="woocommerce-Price-amount amount">{{ number_format($course->price) }}
        <span class="woocommerce-Price-currencySymbol">تومان</span>
        </span>
        </p>
    </div>
    <p>جهت خرید دوره ابتدا در سایت وارد شوید</p>
    <a href="{{ route('login') }}" class="btn text-white w-100">ورود به سایت</a>
@endauth



<div id="Modal3" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <p>کد تخفیف را وارد کنید</p>
            <div class="close">&times;</div>
        </div>
        <div class="modal-body">
            <form method="post" action="{{ route('courses.buy' , $course->id) }}">
                @csrf
                <div>
                    <input type="text" name="code" id="code" class="txt" placeholder="کد تخفیف را وارد کنید">
                    <p id="response"></p>
                </div>
                <button type="button" class="btn i-t " onclick="/*checkDiscountCode()*/">اعمال
                    <img src="/img/loading.gif" alt="" id="loading" class="loading d-none">
                </button>

                <table class="table text-center text-black table-bordered table-striped">
                    <tbody>
                    <tr>
                        <th>قیمت کل دوره</th>
                        <td> {{ $course->getFormattedPrice() }} تومان </td>
                    </tr>
                    <tr>
                        <th>درصد تخفیف</th>
                        <td>
                            <span id="discountPercent" data-value="{{ $course->getDiscountPercent() }}">
                                {{ $course->getDiscountPercent() }}
                            </span>%
                        </td>
                    </tr>
                    <tr>
                        <th> مبلغ تخفیف</th>
                        <td class="text-red"><span
                                id="discountAmount" data-value="{{ $course->getDiscountAmount() }}">
                                {{ $course->getFormattedDiscountAmount() }}</span> تومان
                        </td>
                    </tr>
                    <tr>
                        <th> قابل پرداخت</th>
                        <td class="text-blue"><span
                                id="payableAmount" data-value="{{ $course->getFinalPrice() }}">
                                                         {{ $course->getFormattedFinalPrice() }}</span> تومان
                        </td>
                    </tr>
                    </tbody>
                </table>
                <button type="submit" class="btn btn i-t ">پرداخت آنلاین</button>
            </form>
        </div>
    </div>
</div>








//-------------------- modules/Webamooz/Course/Models/Course.php
public function getFormattedPrice()  //number_format
{
    return number_format($this->price);
}

public function getDiscountPercent()  //discount price course -> چند درصد تخفیف داره
{
    return 0;
}

public function getDiscountAmount()  //discount amount -> چه قدر تخفیف داره تا الان
{
    return 0;
}

public function getFormattedDiscountAmount()
{
    return number_format(0);
}

public function getFinalPrice()
{
    return $this->price - $this->getDiscountAmount();
}

public function getFormattedFinalPrice()
{
    return number_format($this->price - $this->getDiscountAmount());
}































//---------------------------------------------------------------------- Lesson 144 (Payment module and payment service)
//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function buy($course_id, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    if (!$this->courseCanBePurchased($course)) {  //اگر دوره قابل خریداری نیست
        return back();
    }

    if (!$this->authUserCanPurchasedCourse($course)) {  //کسایی که دوره خریدن یا دسترسی دارن مثل ادمین و مدرس
        return back();
    }

    PaymentRepositories::store();

    return true;
}

public function courseCanBePurchased($course)
{
    //course -> اگر دوره ای رایگان + وضعیتش قفل + یا چیزی جز تایید شده بود قابل خرید نیست
    if ($course->type == Course::TYPE_FREE) {
        $this->newFeedback("عملیات نا موفقی", "دوره های رایگان قابل خریداری نیست!", "error");
        return false;
    }
    if ($course->status == Course::STATUS_LOCKED) {
        $this->newFeedback("عملیات نا موفقی", "این دوره قفل شده است و فعلا قابل خریداری نیست!", "error");
        return false;
    }
    if ($course->confirmation_status != Course::CONFIRMATION_STATUS_ACCEPTED) {
        $this->newFeedback("عملیات نا موفقی", "دوره انتخابی شما هنوز تایید نشده نیست!", "error");
        return false;
    }
    return true;
}

public function authUserCanPurchasedCourse($course)
{
    if (auth()->id() == $course->teacher_id) {
        $this->newFeedback("عملیات نا موفقی", "شما مدرس این دوره هستید", "error");
        return false;
    }

    if (auth()->user()->hasAccessToCourse($course)) {
        $this->newFeedback("عملیات نا موفقی", "شما به دوره دسترسی دارید", "error");
        return false;
    }

    return true;
}

function newFeedback($heading = 'موفقیت آمیر', $text = 'عملیات با موفقیت انجام شد', $type = 'success')
{
    $session = session()->has('feedbacks') ? session()->get('feedbacks') : [];  //هر چند تا که بسازیم سشن به اسم فیدبکز میاد صدا میزنه فراخوانی میکنه
    $session[] = ["heading" => $heading, "text" => $text, "type" => $type];  //session is array
    session()->flash('feedbacks', $session);
}






























//----------------------------------------------------------------------------------- Lesson 145 (geteways and zarinpal)
1) php artisan make:migration create_payments_table --create



//-------------------- composer.json
"autoload": {
    "psr-4": {
        "App\\": "app/",
        "Webamooz\\Front\\" : "modules/Webamooz/Front/",
        "Webamooz\\Payment\\" : "modules/Webamooz/Payment/",
    }
},



//-------------------- config/app.php
\Webamooz\Payment\Providers\PaymentServiceProvider::class,



//-------------------- modules/Webamooz/Payment/Providers/PaymentServiceProvider.php
public function register()
{
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
}



//-------------------- modules/Webamooz/Payment/Models/Payment.php
const STATUS_PENDING = 'pending';
const STATUS_CANCELED = 'canceled';
const STATUS_SUCCESS = 'success';
const STATUS_FAIL = 'fail';
public static $statuses = [
    self::STATUS_PENDING,
    self::STATUS_CANCELED,
    self::STATUS_SUCCESS,
    self::STATUS_FAIL,
];

protected $fillable = [
    'buyer_id',
    'paymentable_id',
    'paymentable_type',
    'amount',
    'invoice_id',
    'getway',
    'status',
    'seller_percent',
    'seller_share',
    'site_share',
];






//-------------------- modules/Webamooz/Payment/Database/Migrations/2024_07_17_081727_create_payments_table.php
public function up()
{
    Schema::create('payments', function (Blueprint $table) {
        $table->id();
        $table->foreignId('buyer_id');  //student
        $table->foreignId('paymentable_id');  //polymorphic many to many -> id
        $table->string('paymentable_type');  //polymorphic many to many -> Model
        $table->string('amount', 10);
        $table->string('invoice_id');  //transaction_id(Bank unique)
        $table->string('getway');  //mellat + saman + meli + نام درگاه پرداخت
        $table->enum('status', \Webamooz\Payment\Models\Payment::$statuses);
        $table->tinyInteger('seller_percent')->unsigned();  //درصد فروشنده چه قدر(دوره + پروژه)
        $table->string('seller_share', 10);  //سهم فروشنده چه قدر؟
        $table->string('site_share', 10);  //سهم سایت چه قدر؟
        $table->timestamps();
    });
}




//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function buy($course_id, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    if (!$this->courseCanBePurchased($course)) {  //اگر دوره قابل خریداری نیست
        return back();
    }

    if (!$this->authUserCanPurchasedCourse($course)) {  //کسایی که دوره خریدن یا دسترسی دارن مثل ادمین و مدرس
        return back();
    }

    $amount = 0;
    $payment = PaymentService::generate($amount, $course, auth()->user());
    return true;
}




//-------------------- modules/Webamooz/Payment/Service/PaymentService.php
public static function generate($amount, $paymentable, User $buyer)  //$paymentable -> $course
{
    if ($amount <= 0 || is_null($paymentable->id) || is_null($buyer->id)) return false;
    $invoiceId = 0;
    $getway = '';

    if (!is_null($paymentable->percent)) {
        $seller_percent = $paymentable->percent;
        $seller_share = ($amount / 100) * $seller_percent;
        $site_share = $amount - $seller_share;  //($amount / 100) * (100 - $seller_percent)

    } else {
        $seller_percent = $seller_share = $site_share = 0;
    }

    return resolve(PaymentRepositories::class)->store([
        'buyer_id' => $buyer->id,
        'paymentable_id' => $paymentable->id,
        'paymentable_type' => get_class($paymentable),
        'amount' => $amount,
        'invoice_id' => $invoiceId,
        'getway' => $getway,
        'status' => Payment::STATUS_PENDING,
        'seller_percent' => $seller_percent,
        'seller_share' => $seller_share,
        'site_share' => $site_share,
    ]);
}





//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function store($data)
{
    return Payment::create([
        'buyer_id' => $data['buyer_id'],
        'paymentable_id' => $data['paymentable_id'],
        'paymentable_type' => $data['paymentable_type'],
        'amount' => $data['amount'],
        'invoice_id' => $data['invoice_id'],
        'getway' => $data['getway'],
        'status' => $data['status'],
        'seller_percent' => $data['seller_percent'],
        'seller_share' => $data['seller_share'],
        'site_share' => $data['site_share'],
    ]);
}































//----------------------------------------- Lesson 146,147 (getways and zarinpal + Gateway and singleton design pattern)
1) adaptor design pattern -> من یک کلاسی دارم که متود هاش با من متفاوت
2) Singleton design pattern




//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function buy($course_id, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    if (!$this->courseCanBePurchased($course)) {  //اگر دوره قابل خریداری نیست
        return back();
    }

    if (!$this->authUserCanPurchasedCourse($course)) {  //کسایی که دوره خریدن یا دسترسی دارن مثل ادمین و مدرس
        return back();
    }

    $amount = $course->getFinalPrice();  //مقدار نهایی که اگر تخفیفی داشه باشد ازش کم میشه
    $payment = PaymentService::generate($amount, $course, auth()->user());
    resolve(Gateway::class)->redirect($payment->invoice_id);
}



//-------------------- modules/Webamooz/Payment/Models/Payment.php
const STATUS_PENDING = 'pending';
const STATUS_CANCELED = 'canceled';
const STATUS_SUCCESS = 'success';
const STATUS_FAIL = 'fail';
public static $statuses = [
    self::STATUS_PENDING,
    self::STATUS_CANCELED,
    self::STATUS_SUCCESS,
    self::STATUS_FAIL,
];

protected $fillable = [
    'buyer_id',
    'paymentable_id',
    'paymentable_type',
    'amount',
    'invoice_id',
    'gateway',
    'status',
    'seller_percent',
    'seller_share',
    'site_share',
];




//-------------------- modules/Webamooz/Payment/Providers/PaymentServiceProvider.php
public function register()
{
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
}

public function boot()
{
    //فرق بین new و resolve این در ریزالو میتونیم وقتی کلاس صدا زدیم بیایم در سرویس پرووایدر ی مقدار هایی بهش بدیم
    $this->app->singleton(Gateway::class, function ($app) {
        return new ZarinpalAdaptor();
    });
}





//-------------------- modules/Webamooz/Payment/Service/PaymentService.php
public static function generate($amount, $paymentable, User $buyer)  //$paymentable -> $course
{
    if ($amount <= 0 || is_null($paymentable->id) || is_null($buyer->id)) return false;
    $gateway = resolve(Gateway::class);
    $invoiceId = $gateway->request($amount, $paymentable->title);
    if (is_array($invoiceId)) {
        //todo
        dd($invoiceId);
    }

    if (!is_null($paymentable->percent)) {
        $seller_percent = $paymentable->percent;
        $seller_share = ($amount / 100) * $seller_percent;
        $site_share = $amount - $seller_share;  //($amount / 100) * (100 - $seller_percent)

    } else {
        $seller_percent = $seller_share = $site_share = 0;
    }

    return resolve(PaymentRepositories::class)->store([
        'buyer_id' => $buyer->id,
        'paymentable_id' => $paymentable->id,
        'paymentable_type' => get_class($paymentable),
        'amount' => $amount,
        'invoice_id' => $invoiceId,
        'gateway' => $gateway->getName(),
        'status' => Payment::STATUS_PENDING,
        'seller_percent' => $seller_percent,
        'seller_share' => $seller_share,
        'site_share' => $site_share,
    ]);
}




//-------------------- modules/Webamooz/Payment/Contracts/GatewayContract.php
interface GatewayContract
{

    public function request($amount, $description);

    public function verify(Payment $payment);

    public function redirect();

    public function getName();

}


//-------------------- modules/Webamooz/Payment/Gateways/Gateway.php
class Gateway  //return new ZarinpalAdaptor(); -> در سرویس پرووایدر و در متود بووت و با استفاده از سینگلتون این کلاس زرین اداپتور به کلاس درگاه دادیم
{
}




//-------------------- modules/Webamooz/Payment/Gateways/Zarinpal/ZarinpalAdaptor.php
class ZarinpalAdaptor implements GatewayContract
{
    private $url, $client;

    public function request($amount, $description)
    {
        $this->client = new Zarinpal();
        $MerchantID = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx";  //36 character anyway -> sandbox
        $callback = "http://localhost:8000/test-verify";
        $result = $this->client->request($MerchantID, $amount, $description, "", "", $callback, true);

        if (isset($result["Status"]) && $result["Status"] == 100) {
            $this->url = $result['StartPay'];
            return $result['Authority'];
        } else {
            // error
            return [
                "status" => $result["Status"],
                "message" => $result["Message"]
            ];
        }
    }

    public function verify(Payment $payment)
    {

    }

    public function redirect()
    {
        $this->client->redirect($this->url);
    }

    public function getName()
    {
        return "zarinpal";
    }
}



//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function store($data)
    {
        return Payment::create([
            'buyer_id' => $data['buyer_id'],
            'paymentable_id' => $data['paymentable_id'],
            'paymentable_type' => $data['paymentable_type'],
            'amount' => $data['amount'],
            'invoice_id' => $data['invoice_id'],
            'gateway' => $data['gateway'],
            'status' => $data['status'],
            'seller_percent' => $data['seller_percent'],
            'seller_share' => $data['seller_share'],
            'site_share' => $data['site_share'],
        ]);
    }





//-------------------- modules/Webamooz/Payment/Gateway/Zarinpal.php
<?php

namespace Webamooz\Payment\Gateways\Zarinpal;

class Zarinpal
{
    private function curl_check()
    {
        return (function_exists('curl_version')) ? true : false;
    }

    private function soap_check()
    {
        return (extension_loaded('soap')) ? true : false;
    }

    private function error_message($code, $desc, $cb, $request=false)
    {
        if (empty($cb) && $request === true)
        {
            return "لینک بازگشت ( CallbackURL ) نباید خالی باشد";
        }

        if (empty($desc) && $request === true)
        {
            return "توضیحات تراکنش ( Description ) نباید خالی باشد";
        }


        $error = array(
            "-1" 	=> "اطلاعات ارسال شده ناقص است.",
            "-2" 	=> "IP و يا مرچنت كد پذيرنده صحيح نيست",
            "-3" 	=> "با توجه به محدوديت هاي شاپرك امكان پرداخت با رقم درخواست شده ميسر نمي باشد",
            "-4" 	=> "سطح تاييد پذيرنده پايين تر از سطح نقره اي است.",
            "-11" 	=> "درخواست مورد نظر يافت نشد.",
            "-12" 	=> "امكان ويرايش درخواست ميسر نمي باشد.",
            "-21" 	=> "هيچ نوع عمليات مالي براي اين تراكنش يافت نشد",
            "-22" 	=> "تراكنش نا موفق ميباشد",
            "-33" 	=> "رقم تراكنش با رقم پرداخت شده مطابقت ندارد",
            "-34" 	=> "سقف تقسيم تراكنش از لحاظ تعداد يا رقم عبور نموده است",
            "-40" 	=> "اجازه دسترسي به متد مربوطه وجود ندارد.",
            "-41" 	=> "اطلاعات ارسال شده مربوط به AdditionalData غيرمعتبر ميباشد.",
            "-42" 	=> "مدت زمان معتبر طول عمر شناسه پرداخت بايد بين 30 دقيه تا 45 روز مي باشد.",
            "-54" 	=> "درخواست مورد نظر آرشيو شده است",
            "100" 	=> "عمليات با موفقيت انجام گرديده است.",
            "101" 	=> "عمليات پرداخت موفق بوده و قبلا PaymentVerification تراكنش انجام شده است.",
        );

        if (array_key_exists("{$code}", $error))
        {
            return $error["{$code}"];
        } else {
            return "خطای نامشخص هنگام اتصال به درگاه زرین پال";
        }
    }

    private function zarinpal_node()
    {
        if ($this->curl_check() === true)
        {
            $ir_ch = curl_init("https://www.zarinpal.com/pg/services/WebGate/wsdl");
            curl_setopt($ir_ch, CURLOPT_TIMEOUT, 1);
            curl_setopt($ir_ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ir_ch, CURLOPT_RETURNTRANSFER, true);
            curl_exec($ir_ch);
            $ir_info = curl_getinfo($ir_ch);
            curl_close($ir_ch);

            $de_ch = curl_init("https://de.zarinpal.com/pg/services/WebGate/wsdl");
            curl_setopt($de_ch, CURLOPT_TIMEOUT, 1);
            curl_setopt($de_ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($de_ch, CURLOPT_RETURNTRANSFER, true);
            curl_exec($de_ch);
            $de_info = curl_getinfo($de_ch);
            curl_close($de_ch);

            $ir_total_time = (isset($ir_info['total_time']) && $ir_info['total_time'] > 0) ? $ir_info['total_time'] : false;
            $de_total_time = (isset($de_info['total_time']) && $de_info['total_time'] > 0) ? $de_info['total_time'] : false;

            return ($ir_total_time === false || $ir_total_time > $de_total_time) ? "de" : "ir";
        } else {
            if (function_exists('fsockopen'))
            {
                $de_ping 	= $this->zarinpal_ping("de.zarinpal.com", 80, 1);
                $ir_ping 	= $this->zarinpal_ping("www.zarinpal.com", 80, 1);

                $de_domain 	= "https://de.zarinpal.com/pg/services/WebGate/wsdl";
                $ir_domain 	= "https://www.zarinpal.com/pg/services/WebGate/wsdl";

                $ir_total_time = (isset($ir_ping) && $ir_ping > 0) ? $ir_ping : false;
                $de_total_time = (isset($de_ping) && $de_ping > 0) ? $de_ping : false;

                return ($ir_total_time === false || $ir_total_time > $de_total_time) ? "de" : "ir";
            } else {
                $webservice = "https://www.zarinpal.com/pg/services/WebGate/wsd";
                $headers 	= @get_headers($webservice);

                return (strpos($headers[0], '200') === false) ? "de" : "ir";
            }
        }
    }

    private function zarinpal_ping($host, $port, $timeout)
    {
        $time_b 	= microtime(true);
        $fsockopen 	= @fsockopen($host, $port, $errno, $errstr, $timeout);

        if (!$fsockopen)
        {
            return false;
        }  else {
            $time_a = microtime(true);
            return round((($time_a - $time_b) * 1000), 0);
        }
    }

    public function redirect($url)
    {
        @header('Location: '. $url);
        echo "<meta http-equiv='refresh' content='0; url={$url}' />";
        echo "<script>window.location.href = '{$url}';</script>";
        exit;
    }

    public function request($MerchantID, $Amount, $Description="", $Email="", $Mobile="", $CallbackURL, $SandBox=false, $ZarinGate=false)
    {
        $ZarinGate = ($SandBox == true) ? false : $ZarinGate;

        if ($this->soap_check() === true)
        {
            $node 	= ($SandBox == true) ? "sandbox" : $this->zarinpal_node();
            $upay 	= ($SandBox == true) ? "sandbox" : "www";

            $client = new \SoapClient("https://{$node}.zarinpal.com/pg/services/WebGate/wsdl", ['encoding' => 'UTF-8']);

            $result = $client->PaymentRequest([
                'MerchantID'     => $MerchantID,
                'Amount'         => $Amount,
                'Description'    => $Description,
                'Email'          => $Email,
                'Mobile'         => $Mobile,
                'CallbackURL'    => $CallbackURL,
            ]);

            $Status 		= (isset($result->Status) 		&& $result->Status != "") 		? $result->Status : 0;
            $Authority 		= (isset($result->Authority) 	&& $result->Authority != "") 	? $result->Authority : "";
            $StartPay 		= (isset($result->Authority) 	&& $result->Authority != "") 	? "https://{$upay}.zarinpal.com/pg/StartPay/". $Authority : "";
            $StartPayUrl 	= (isset($ZarinGate) 			&& $ZarinGate == true) 			? "{$StartPay}/ZarinGate" : $StartPay;

            return array(
                "Node" 		=> "{$node}",
                "Method" 	=> "SOAP",
                "Status" 	=> $Status,
                "Message" 	=> $this->error_message($Status, $Description, $CallbackURL, true),
                "StartPay" 	=> $StartPayUrl,
                "Authority" => $Authority
            );
        } else {
            $node 	= ($SandBox == true) ? "sandbox" : "ir";
            $upay 	= ($SandBox == true) ? "sandbox" : "www";

            $data = array(
                'MerchantID'     => $MerchantID,
                'Amount'         => $Amount,
                'Description'    => $Description,
                'CallbackURL'    => $CallbackURL,
            );

            $jsonData = json_encode($data);
            $ch = curl_init("https://{$upay}.zarinpal.com/pg/rest/WebGate/PaymentRequest.json");
            curl_setopt($ch, CURLOPT_USERAGENT, 'ZarinPal Rest Api v1');
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
            curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', 'Content-Length: ' . strlen($jsonData)));

            $result = curl_exec($ch);
            $err 	= curl_error($ch);
            curl_close($ch);

            $result = json_decode($result, true);

            if ($err)
            {
                $Status 		= 0;
                $Message 		= "cURL Error #:" . $err;
                $Authority 		= "";
                $StartPay 		= "";
                $StartPayUrl 	= "";
            } else {
                $Status 		= (isset($result["Status"]) 	&& $result["Status"] != "") 	? $result["Status"] : 0;
                $Message 		= $this->error_message($Status, $Description, $CallbackURL, true);
                $Authority 		= (isset($result["Authority"]) 	&& $result["Authority"] != "") 	? $result["Authority"] : "";
                $StartPay 		= (isset($result["Authority"]) 	&& $result["Authority"] != "") 	? "https://{$upay}.zarinpal.com/pg/StartPay/". $Authority : "";
                $StartPayUrl 	= (isset($ZarinGate) 			&& $ZarinGate == true) 			? "{$StartPay}/ZarinGate" : $StartPay;
            }

            return array(
                "Node" 		=> "{$node}",
                "Method" 	=> "CURL",
                "Status" 	=> $Status,
                "Message" 	=> $Message,
                "StartPay" 	=> $StartPayUrl,
                "Authority" => $Authority
            );
        }
    }

    public function verify($MerchantID, $Amount, $SandBox=false, $ZarinGate=false)
    {
        $ZarinGate = ($SandBox == true) ? false : $ZarinGate;

        if ($this->soap_check() === true)
        {
            $au 	= (isset($_GET['Authority']) && $_GET['Authority'] != "") ? $_GET['Authority'] : "";
            $node 	= ($SandBox == true) ? "sandbox" : $this->zarinpal_node();

            $client = new SoapClient("https://{$node}.zarinpal.com/pg/services/WebGate/wsdl", ['encoding' => 'UTF-8']);

            $result = $client->PaymentVerification([
                'MerchantID'     => $MerchantID,
                'Authority'      => $au,
                'Amount'         => $Amount,
            ]);

            $Status 		= (isset($result->Status) 		&& $result->Status != "") 		? $result->Status 	: 0;
            $RefID 			= (isset($result->RefID) 		&& $result->RefID != "") 		? $result->RefID 	: "";
            $Message 		= $this->error_message($Status, "", "", false);

            return array(
                "Node" 		=> "{$node}",
                "Method" 	=> "SOAP",
                "Status" 	=> $Status,
                "Message" 	=> $Message,
                "Amount" 	=> $Amount,
                "RefID" 	=> $RefID,
                "Authority" => $au
            );
        } else {
            $au 	= (isset($_GET['Authority']) && $_GET['Authority'] != "") ? $_GET['Authority'] : "";
            $node 	= ($SandBox == true) ? "sandbox" : "ir";
            $upay 	= ($SandBox == true) ? "sandbox" : "www";

            $data = array('MerchantID' => $MerchantID, 'Authority' => $au, 'Amount' => $Amount);
            $jsonData = json_encode($data);
            $ch = curl_init("https://{$upay}.zarinpal.com/pg/rest/WebGate/PaymentVerification.json");
            curl_setopt($ch, CURLOPT_USERAGENT, 'ZarinPal Rest Api v1');
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
            curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', 'Content-Length: ' . strlen($jsonData)));

            $result = curl_exec($ch);
            $err 	= curl_error($ch);
            curl_close($ch);

            $result = json_decode($result, true);

            if ($err)
            {
                $Status 		= 0;
                $Message 		= "cURL Error #:" . $err;
                $Status 		= "";
                $RefID 			= "";
            } else {
                $Status 		= (isset($result["Status"]) && $result["Status"] != "") ? $result["Status"] : 0;
                $RefID 			= (isset($result['RefID']) 	&& $result['RefID'] != "") 	? $result['RefID'] 	: "";
                $Message 		= $this->error_message($Status, "", "", false);
            }

            return array(
                "Node" 		=> "{$node}",
                "Method" 	=> "CURL",
                "Status" 	=> $Status,
                "Message" 	=> $Message,
                "Amount" 	=> $Amount,
                "RefID" 	=> $RefID,
                "Authority" => $au
            );
        }
    }
}












































//-------------------------------- Lesson 148,149 (Compelete payment cycle + Paymentable relation and dynamic relations)
//-------------------- modules/Webamooz/Payment/Routes/payment_route.php
Route::group([], function ($router) {
    $router->any('payments/callback', [PaymentController::class, 'callback'])->name('payments.callback');
});



//-------------------- modules/Webamooz/Payment/Providers/PaymentServiceProvider.php
public string $namespace = "Webamooz\Payment\Http\Controllers";

public function register()
{
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
    Route::middleware(['web'])->namespace($this->namespace)->group(__DIR__ . "/../Routes/payment_route.php");
}

public function boot()
{
    //فرق بین new و resolve این در ریزالو میتونیم وقتی کلاس صدا زدیم بیایم در سرویس پرووایدر ی مقدار هایی بهش بدیم
    $this->app->singleton(Gateway::class, function ($app) {
        return new ZarinpalAdaptor();
    });

    Course::resolveRelationUsing('payments', function ($courseModel) {  //1)name relation + اضافه کردن ریلیشن دوره ها در سرویس پرووایدر پیمنت
        return $courseModel->morphMany(Payment::class, 'paymentable');
    });
}




//-------------------- modules/Webamooz/Payment/Models/Payment.php
public function paymentable() //Model + able
{
    return $this->morphTo('paymentable');  //name relation
}



//-------------------- modules/Webamooz/Course/Models/Course.php
public function payments()
{
    return $this->morphMany(Payment::class, 'paymentable');  //1)Model  2)name relation (paymentable) اسم متود درون پیمنت
}




//-------------------- modules/Webamooz/Payment/Http/Controllers/PaymentController.php
public function callback(Request $request)
{

    $gateway = resolve(Gateway::class);
    $paymentRepo = new PaymentRepositories();
    $payment = $paymentRepo->findByInvoiceId($gateway->getInvoiceIdFromRequest($request));
    if (!$payment) {
        $this->newFeedback("تراکنش ناموفق", "تراکنش مورد نظر یافت نشد", "error");
        return to_route('home');
    }

    $result = $gateway->verify($payment);
    if (is_array($result)) {  //ZarinpalAdaptor.php -> method verify -> وقتی آرایه بر میگردونه یعنی خطا داره
        $this->newFeedback("عملیات ناموفق", $result['message'], "error");
        $paymentRepo->changeStatus($payment->id, Payment::STATUS_FAIL);

    } else {

        $this->newFeedback("عملیات موفقیت آمیز", "پرداخت با موفقیت انجام شد", "success");
        $paymentRepo->changeStatus($payment->id, Payment::STATUS_SUCCESS);
    }
    return redirect($payment->paymentable->path());  //چه عملیات خطا چه درست باش میره درون این صفحه
}

function newFeedback($heading = 'موفقیت آمیر', $text = 'عملیات با موفقیت انجام شد', $type = 'success')
{
    $session = session()->has('feedbacks') ? session()->get('feedbacks') : [];  //هر چند تا که بسازیم سشن به اسم فیدبکز میاد صدا میزنه فراخوانی میکنه
    $session[] = ["heading" => $heading, "text" => $text, "type" => $type];  //session is array
    session()->flash('feedbacks', $session);
}



//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function findByInvoiceId($invoice_id)
{
    return Payment::where('invoice_id', $invoice_id)->first();
}

public function store($data)
{
    return Payment::create([
        'buyer_id' => $data['buyer_id'],
        'paymentable_id' => $data['paymentable_id'],
        'paymentable_type' => $data['paymentable_type'],
        'amount' => $data['amount'],
        'invoice_id' => $data['invoice_id'],
        'gateway' => $data['gateway'],
        'status' => $data['status'],
        'seller_percent' => $data['seller_percent'],
        'seller_share' => $data['seller_share'],
        'site_share' => $data['site_share'],
    ]);
}

public function changeStatus($payment_id, $status)
{
    return Payment::where('id', $payment_id)->update([
        'status' => $status
    ]);
}



//-------------------- modules/Webamooz/Payment/Contracts/GatewayContract.php
public function request($amount, $description);

public function verify(Payment $payment);

public function redirect();

public function getName();





//-------------------- modules/Webamooz/Payment/Gateways/Gateway.php
class Gateway  //return new ZarinpalAdaptor(); -> در سرویس پرووایدر و در متود بووت و با استفاده از سینگلتون این کلاس زرین اداپتور به کلاس درگاه دادیم
{

}


//-------------------- modules/Webamooz/Payment/Gateways/Zarinpal/ZarinpalAdaptor.php
private $url, $client;

public function request($amount, $description)
{
    $this->client = new Zarinpal();
    $MerchantID = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx";  //36 character anyway -> sandbox
    $callback = route('payments.callback');
    $result = $this->client->request($MerchantID, $amount, $description, "", "", $callback, true);

    if (isset($result["Status"]) && $result["Status"] == 100) {
        $this->url = $result['StartPay'];
        return $result['Authority'];
    } else {
        // error
        return [
            "status" => $result["Status"],
            "message" => $result["Message"]
        ];
    }
}

public function verify(Payment $payment)
{
    $this->client = new Zarinpal();
    $MerchantID = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx";  //36 character anyway -> sandbox
    $result = $this->client->verify($MerchantID, $payment->amount, true);

    if (isset($result["Status"]) && $result["Status"] == 100) {
        return $result["RefID"];

    } else {
        return [
            "status" => $result["Status"],
            "message" => $result["Message"]
        ];
    }
}


public function redirect()
{
    $this->client->redirect($this->url);
}

public function getName()
{
    return "zarinpal";
}

public function getInvoiceIdFromRequest($request)
{
    return $request->Authority;
}









































//---------------------------------------------------- Lesson 150 (Register user in the course - subscriber pattern p 1)
*) event -> اپر پرداخا موفقیت آمیز بود    listener -> بیا اون کاربر درون اون دوره ثبت نام بکن
1) event -> ی سری رویداد ها که اتفاق میفتن
2) listener -> ی سریا منتظر تا ی رویدادی اتفاق بیفته میش لیستنر
3) php artisan make:event PaymentWasSuccessful
4) php artisan make:listener RegisterUserInTheCourse
5) app/Providers/EventServiceProvider.php -> Connect event to listeners



//-------------------- app/Providers/EventServiceProvider.php
protected $listen = [
    Registered::class => [
        SendEmailVerificationNotification::class,
    ],
    PaymentWasSuccessful::class => [  //event -> connect event to listeners in all project
        RegisterUserInTheCourse::class,  //listener
    ]
];



//-------------------- modules/Webamooz/Payment/Events/PaymentWasSuccessful.php  //Payment
public $payment;
public function __construct(Payment $payment)
{
    $this->payment = $payment;
}

public function broadcastOn()
{
    return new PrivateChannel('channel-name');
}




//-------------------- modules/Webamooz/Course/Listeners/RegisterUserInTheCourse.php  //Course
public function __construct()
{
}

public function handle($event)  //handle($event) -> property constructor PaymentWasSuccessful Event دسترسی به مقدار کانتراکتو رپاس دادیم مثل پیمنت
{
    if ($event->payment->paymentable_type == Course::class) {  //بیا مقدار پیمنتی که میفرستیم یک آبجکت کامل بگیر بعد بیا ببین اگر نوع کلاس از نوع دوره این کارو بکن
        resolve(CourseRepository::class)->addStudentToCourse($event->payment->paymentable , $event->payment->buyer_id);
    }
}



//-------------------- modules/Webamooz/Course/Repositories/CourseRepository.php
public function addStudentToCourse(Course $course, $student_id)
{
    if (!$this->getExistCourseStudentById($course, $student_id)) {  //دانشجوی این دوره نبود اضافه بکن وگنه قبلا این دوره خریده
        $course->students()->attach($student_id);
    }
}

public function getExistCourseStudentById(Course $course, $student_id)
{
    return $course->students()->where('id', $student_id)->first();
}






































//--------------------------------------------- Lesson 151 (Subscriber patther part 2 - register event service provider)
1) Subscriber patther -> event listener اسمش این رویداد ها این
2) Subscriber patther -> کاربر میاد عضو ی چیزی میشه ما اضاه میکنیمش




//-------------------- modules/Webamooz/Course/Providers/EventServiceProvider.php
protected $listen = [
    PaymentWasSuccessful::class => [  //event -> connect event to listeners in all project
        RegisterUserInTheCourse::class,  //listener
    ]
];

public function boot()
{
    //
}

public function shouldDiscoverEvents()
{
    return false;
}




//-------------------- modules/Webamooz/Course/Providers/CourseServiceProvider.php
public function register()
{
    $this->app->register(EventServiceProvider::class);
}



//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function buy($course_id, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    if (!$this->courseCanBePurchased($course)) {  //اگر دوره قابل خریداری نیست
        return back();
    }

    if (!$this->authUserCanPurchasedCourse($course)) {  //کسایی که دوره خریدن یا دسترسی دارن مثل ادمین و مدرس
        return back();
    }

    $amount = $course->getFinalPrice();  //مقدار نهایی که اگر تخفیفی داشه باشد ازش کم میشه
    if ($amount <= 0) {  //course free
        $courseRepository->addStudentToCourse($course, auth()->id());  //برای زمانی که دوره ای رایگان یا با تخفیف میش عددش صفر نیازی نیست بره درگاه پرداخت
        $this->newFeedback("عملیات موفقیت آمیز", "شما با موفقیت در دوره عضو شدید", "success");
        return redirect($course->path());
    }
    $payment = PaymentService::generate($amount, $course, auth()->user());
    resolve(Gateway::class)->redirect($payment->invoice_id);
}































//---------------------------------------------------- Lesson 152 (Download link and refactoring policies and join query)
//-------------------- modules/Webamooz/Front/Resources/Views/layouts/episodes-list.blade.php
@foreach($lessons as $index => $lesson)
    <div
        class="episodes-list-item  @cannot("download" , $lesson) lock @endcannot">  {{-- اگر دتسرسی دانلود نداره قفلش کن --}}
        <div class="section-right">
            <span class="episodes-list-number">{{ $index + 1 }}</span>
            <div class="episodes-list-title">
                <a href="{{ $lesson->path() }}">{{ $lesson->title }}</a>
            </div>
        </div>

        <div class="section-left">
            <div class="episodes-list-details">
                <div class="episodes-list-details">
                    <span class="detail-type">{{ $lesson->is_free ? "رایگان" : '' }}</span>
                    <span class="detail-time">{{ $lesson->time }}</span>
                    {{-- @can("download" , $lesson)   -> 1)name  2)parameters($user(default),$lesson دوره ها پاس دادیم) --}}
                    <a class="detail-download"
                       @can("download" , $lesson) href="{{ $lesson->downloadLink() }}" @endcan>
                        <i class="icon-download"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
@endforeach




//-------------------- modules/Webamooz/Course/Models/Lesson.php
public function downloadLink()
{
    if ($this->media()) {  //اگر مدیا در جدول درس ها ثبت شده آیدیش بیا لینک دانلود بساز
        return URL::temporarySignedRoute('media.download', now()->addDay(), ['media' => $this->media_id]);
    }
}





//-------------------- modules/Webamooz/Course/Policies/CoursePolicy.php
public function download($user, $course)
{
    //یا مدیر سایت یا کسی که مدرس این دوره یا دانشجوی ثبت نامی بتونه دسترسی به دوره داشته باشد
    //contains -> اگر کاربر وجود داشت میاد از حالت آبجکت ی مقدار رشته ای میکشه بیرون
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) ||
        $user->id == $course->teacher_id || $course->hasStudent($user->id)) {
        return true;
    }
    return false;
}




//-------------------- modules/Webamooz/Course/Models/Course.php
public function hasStudent($student_id)
{
    return resolve(CourseRepository::class)->hasStudent($this, $student_id);
}



//-------------------- modules/Webamooz/Course/Repositories/CourseRepository.php
public function hasStudent(Course $course, $student_id)
{
    return $course->students->contains($student_id);
}




//-------------------- modules/Webamooz/Course/Policies/LessonPolicy.php
public function download($user, $lesson)
{
    //یا مدیر سایت یا کسی که مدرس این دوره یا دانشجوی ثبت نامی بتونه دسترسی به دوره داشته باشد
    //contains -> اگر کاربر وجود داشت میاد از حالت آبجکت ی مقدار رشته ای میکشه بیرون
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COURSES) || $user->id == $lesson->course->teacher_id ||
        $lesson->course->hasStudent($user->id) || $lesson->is_free) {
        return true;
    }
    return false;
}



//-------------------- modules/Webamooz/User/Models/User.php
public function studentsCount()
{
    return DB::table('courses')->select('id')->where('teacher_id', $this->id)  //$this->id -> همون آیدی مدرس درون صفحه مشخصات مدرس مورد نظر
    ->join("course_student", "courses.id", "=", "course_student.course_id")->count();
}





































//------------------------------------------------------------------------------------------ Lesson 153 (Batch download)
//-------------------- modules/Webamooz/Front/Resources/Views/layouts/episodes-list.blade.php
<div class="episodes-list--title">فهرست جلسات
    @can("download" , $course)
        <span style="font-size: 13px;float: left">
            <a  href="{{ route('courses.downloadAllLinks' , $course->id) }}" class="detail-download" style="color: #5a97d9;">دریافت همه لینک های دانلود
            <i class="icon-download" style="float: left;margin-right: 10px !important;"></i>
            </a>
        </span>
    @endcan
</div>



//-------------------- modules/Webamooz/Course/Routes/course_route.php
$router->get('/courses/{course}/download_all_links', [CourseController::class, 'downloadAllLinks'])->name('courses.downloadAllLinks');




//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function downloadAllLinks($course_id, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    $this->authorize('download', $course);
    return implode('<br/>', $course->downloadAllLinks());  //convert array to string
}



//-------------------- modules/Webamooz/Course/Models/Course.php
public function downloadAllLinks(): array
{
    $links = [];
    foreach (resolve(CourseRepository::class)->getLessons($this->id) as $lesson) {
        $links[] = $lesson->downloadLink();
    }
    return $links;
}



//-------------------- modules/Webamooz/Course/Repositories/CourseRepository.php
public function getLessons($course_id)
{
    return $this->getLessonsQuery($course_id)->get();
}

public function getLessonCount($course_id)
{
    return $this->getLessonsQuery($course_id)->count();
}

public function getLessonsQuery($course_id)  //use 3 method up
{
    return Lesson::where('course_id', $course_id)
        ->where('confirmation_status', Lesson::CONFIRMATION_STATUS_ACCEPTED);
}






























//-------------------------------------------------------------------------------------- Lesson 154 (Payments dashboard)
1) php artisan make:policy PaymentPolicy



//-------------------- modules/Webamooz/Payment/Providers/PaymentServiceProvider.php
public string $namespace = "Webamooz\Payment\Http\Controllers";

public function register()
{
    Route::middleware(['web'])->namespace($this->namespace)->group(__DIR__ . "/../Routes/payment_route.php");
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', "Payment");
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang/');  //file ترجمه کلممات به صورت جیسون
}

public function boot()
{
    config()->set('sidebar.items.payments', [
        'icon' => 'i-transactions',
        'title' => 'تراکنش ها',
        'url' => route('payments.index'),
        'permission' => [
            Permission::PERMISSION_MANAGE_PAYMENTS,
        ]
    ]);

    //فرق بین new و resolve این در ریزالو میتونیم وقتی کلاس صدا زدیم بیایم در سرویس پرووایدر ی مقدار هایی بهش بدیم
    $this->app->singleton(Gateway::class, function ($app) {
        return new ZarinpalAdaptor();
    });

    /*Course::resolveRelationUsing('payments', function ($courseModel) {  //1)name relation + اضافه کردن ریلیشن دوره ها در سرویس پرووایدر پیمنت
        return $courseModel->morphMany(Payment::class, 'paymentable');
    });*/
}




//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
const PERMISSION_MANAGE_PAYMENTS = 'manage payments';

public static array $permissions = [  //نمایش لیست بعد سیدر در ویو
    self::PERMISSION_MANAGE_PAYMENTS,
];




//-------------------- modules/Webamooz/Payment/Routes/payment_route.php
$router->get('payments', [  //سرویس پروایدر نمیشناخت اسم روت ما مجبور شدیم این مدلی بنویسیم
    "uses" => "PaymentController@index",
    "as" => ("payments.index")  //->name('')
]);





//-------------------- modules/Webamooz/Payment/Http/Controllers/PaymentController.php
private $paymentRepository;
public function __construct(PaymentRepositories $paymentRepository)
{
    $this->paymentRepository = $paymentRepository;
}

public function index()
{
    $this->authorize('manage', Payment::class);
    $payments = $this->paymentRepository->paginate(12);
    return view('Payment::index', compact('payments'));
}





//-------------------- modules/Webamooz/Payment/Policies/PaymentPolicy.php
public function manage($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_PAYMENTS)) return true;
    return null;
}




//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function paginate($count)
{
    return Payment::query()->latest()->paginate($count);
}





//-------------------- modules/Webamooz/Payment/Models/Payment.php
public function paymentable() //Model + able
{
    return $this->morphTo('paymentable');  //name relation
}

public function buyer()
{
    return $this->belongsTo(User::class , "buyer_id");
}



//-------------------- modules/Webamooz/Payment/Lang/fa.json
{
    "pending" : "در حال انتظار",
    "canceled" : "کنسل شده",
    "success" : "موفقیت آمیز",
    "fail" : "ناموفق"
}



//-------------------- modules/Webamooz/Payment/Resources/Views/index.blade.php
<table class="table">
    <thead role="rowgroup">
    <tr role="row" class="title-row">
        <th>شناسه</th>
        <th>نام و نام خانوادگی</th>
        <th>ایمیل پرداخت کننده</th>
        <th>میلغ(تومان)</th>
        <th>درآمد مدرس</th>
        <th>درآمد سایت</th>
        <th>نام دوره</th>
        <th>تاریخ و ساعت</th>
        <th>وضعیت</th>
    </tr>
    </thead>
    <tbody>
    @foreach ($payments as $index => $payment)
        <tr role="row" class="">
            <td>{{ $payment->id }}</td>
            <td>{{ $payment->buyer->name }}</td>
            <td>{{ $payment->buyer->email }}</td>
            <td>{{ number_format($payment->amount) }}</td>
            <td>{{ number_format($payment->seller_share) }}</td>
            <td>{{ number_format($payment->site_share) }}</td>
            <td>{{ $payment->paymentable->title }}</td>
            <td>{{ $payment->created_at }}</td>
            <td class="
                @if ($payment->status == \Webamooz\Payment\Models\Payment::STATUS_SUCCESS) text-success
                @elseif ($payment->status == \Webamooz\Payment\Models\Payment::STATUS_FAIL) text-danger_custom
                @elseif ($payment->status == \Webamooz\Payment\Models\Payment::STATUS_PENDING) text-warning
                @elseif ($payment->status == \Webamooz\Payment\Models\Payment::STATUS_CANCELED) text-white-50_custom
                @endif">
                @lang($payment->status)
            </td>
        </tr>
    @endforeach
    </tbody>
</table>
{{ $payments->links() }}































//---------------------------------------------------------------------------- Lesson 155 (Payment dashboard accounting)
//-------------------- modules/Webamooz/Payment/Http/Controllers/PaymentController.php
public function getLastNDaysPayments($status, $days = null)
{
    $query = Payment::query();

    if (!is_null($days)) $query->where('created_at', '>=', now()->addDays(-$days));

    return $query->where('status', $status)->latest();  //ممکن در آمد یا فروش 30 روز گذشته یا کلی سایت بخواد
}

public function getLastNDaysSuccessPayment($days = null): \Illuminate\Database\Eloquent\Builder
{
    return $this->getLastNDaysPayments(Payment::STATUS_SUCCESS, $days);
}

public function getLastNDaysTotal($days=null)  //کل فروش ۳۰ روز گذشته سایت
{
    return $this->getLastNDaysSuccessPayment($days)->sum('amount');  //در آمد سایت و مدرس با هم فروش کلی سایت
}

public function getLastNDaysSiteBenefit($days=null)  //درامد خالص ۳۰ روز گذشته سایت
{
    return $this->getLastNDaysSuccessPayment($days)->sum('site_share');  //در آمد خالص فقط سایت بدون مدرس
}



//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function index()
{
    $this->authorize('manage', Payment::class);
    $payments = $this->paymentRepository->paginate(12);

    $last3DaysTotal = $this->paymentRepository->getLastNDaysTotal(30);  //کل فروش ۳۰ روز گذشته سایت
    $last3DaysBenefit = $this->paymentRepository->getLastNDaysSiteBenefit(30);  //درامد خالص ۳۰ روز گذشته سایت

    $totalAllSite = $this->paymentRepository->getLastNDaysTotal();  //کل فروش سایت
    $benefitAllSite = $this->paymentRepository->getLastNDaysSiteBenefit();  //کل درآمد خالص سایت

    return view('Payment::index', compact('payments', 'last3DaysTotal', 'last3DaysBenefit', 'totalAllSite', 'benefitAllSite'));
}



//-------------------- modules/Webamooz/Payment/Resources/Views/index.blade.php
<div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
    <p>کل فروش ۳۰ روز گذشته  سایت </p>
    <p>{{ number_format($last3DaysTotal) }} تومان</p>
</div>
<div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
    <p>درامد خالص ۳۰ روز گذشته سایت</p>
    <p>{{ number_format($last3DaysBenefit) }} تومان</p>
</div>
<div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
    <p>کل فروش سایت</p>
    <p>{{ number_format($totalAllSite) }} تومان</p>
</div>
<div class="col-3 padding-20 border-radius-3 bg-white margin-bottom-10">
    <p> کل درآمد خالص سایت</p>
    <p>{{ number_format($benefitAllSite) }} تومان</p>
</div>


























//-------------------------------------------------------------------------------- Lesson 156 (Payment dashboard charts)
1) URL -> https://www.highcharts.com/
2) https://www.highcharts.com/docs/chart-and-series-types/combining-chart-types -> Click jsFiddle -> Source



//-------------------- modules/Webamooz/Payment/Http/Controllers/PaymentController.php
public function index()
{
    $this->authorize('manage', Payment::class);
    $payments = $this->paymentRepository->paginate(12);
    $paymentRepository = $this->paymentRepository;

    //---------- Total+Benefit
    $last3DaysTotal = $this->paymentRepository->getLastNDaysTotal(30);  //کل فروش ۳۰ روز گذشته سایت
    $last3DaysBenefit = $this->paymentRepository->getLastNDaysSiteBenefit(30);  //درامد خالص ۳۰ روز گذشته سایت
    $last3DaysSellerShare = $this->paymentRepository->getLastNDaysSellerShare(30);  //درامد 30 روز مدرس
    $totalAllSite = $this->paymentRepository->getLastNDaysTotal();  //کل فروش سایت
    $benefitAllSite = $this->paymentRepository->getLastNDaysSiteBenefit();  //کل درآمد خالص سایت

    //---------- Highcharts.chart
    $last30Days = CarbonPeriod::create(now()->addDays(-30), now());  //CarbonPeriod -> برای گرفتن شروع و پایان ی تاریخ  + create(StartDate, EndDate)

    return view('Payment::index', compact('payments', 'last3DaysTotal', 'last3DaysBenefit','last3DaysSellerShare',
        'totalAllSite', 'benefitAllSite', 'last30Days', 'paymentRepository'));
}




//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function getLastNDaysSellerShare($days = null)
{
    return $this->getLastNDaysSuccessPayment($days)->sum('seller_share');
}


public function getDayPayments($day, $status)  //بر اسا ی روز خاص میری تراکنش های موفق اون روز حساب میکنی
{
    //whereDate -> جایی که این تاریخ برابر تاریخ که بهش میدیم  +  مقایسه دو تا تاریخ
    return Payment::query()->whereDate("created_at", $day)->where('status', $status)->latest();
}

public function getDaySuccessPayments($day)
{
    return $this->getDayPayments($day, Payment::STATUS_SUCCESS);
}

public function getDaySuccessPaymentTotal($day)
{
    return $this->getDaySuccessPayments($day)->sum('amount');  //فروش کلی سایت و مدرس 30 روز
}

public function getDaySiteShare($day)
{
    return $this->getDaySuccessPayments($day)->sum('site_share');  //در آمد خالص 30 روز سایت
}

public function getDaySellerShare($day)
{
    return $this->getDaySuccessPayments($day)->sum('seller_share');  //در آمد مدرس سایت
}

public function getDayFailedPayments($day)
{
    return $this->getDayPayments($day, Payment::STATUS_FAIL);
}

public function getDayFailedPaymentTotal($day)
{
    return $this->getDayFailedPayments($day)->sum('amount');
}




//-------------------- modules/Webamooz/Payment/Resources/Views/index.blade.php
div class="row no-gutters border-radius-3 font-size-13">
    <div class="col-12 bg-white padding-30 margin-bottom-20">
        <div id="container"></div>
    </div>
</div>

@section('js')
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/series-label.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <script>
        Highcharts.chart('container', {
            title: {
                text: 'نمودار فروش 30 روز گذشته',
                align: 'center',
                style: {
                    fontFamily: 'Vazir'
                }
            },

            tooltip: {
                useHTML: true,
                style: {
                    fontSize: "15px",
                    fontFamily: "Vazir",
                    direction: "rtl"
                },
                formatter: function () {
                    return (this.x ? "تاریخ: " + this.x + "<br/>" : "") + "مبلغ: " + this.y  //this.x -> Date + this.y -> Price
                }
            },

            xAxis: {
                categories: [@foreach ($last30Days as $day) "{{ $day->format('Y-m-d') }}", @endforeach]
            },
            yAxis: {
                title: {
                    text: 'مبلغ'
                },
                labels: {
                    formatter: function () {
                        return this.value + "تومان"
                    }
                }
            },
            plotOptions: {
                series: {
                    borderRadius: '25%'
                }
            },
            series: [
                {
                    type: 'column',
                    name: 'تراکنش موفق',
                    data: [@foreach ($last30Days as $day) {{ $paymentRepository->getDaySuccessPaymentTotal($day) }}, @endforeach]
                },
                {
                    type: 'column',
                    name: 'درصد سایت',
                    data: [@foreach ($last30Days as $day) {{ $paymentRepository->getDaySiteShare($day) }}, @endforeach]
                },
                {
                    type: 'column',
                    name: 'درصد مدرس',
                    data: [@foreach ($last30Days as $day) {{ $paymentRepository->getDaySellerShare($day) }}, @endforeach]
                },
                {
                    type: 'column',
                    name: 'تراکنش ناموفق',
                    data: [@foreach ($last30Days as $day) {{ $paymentRepository->getDayFailedPaymentTotal($day) }}, @endforeach]
                },

                {
                    type: 'line',
                    step: 'center',
                    name: 'فروش',
                    data: [@foreach ($last30Days as $day) {{ $paymentRepository->getDaySuccessPaymentTotal($day) }}, @endforeach],
                    marker: {
                        lineWidth: 2,
                        lineColor: Highcharts.getOptions().colors[3],
                        fillColor: 'white'
                    }
                }, {
                    type: 'pie',
                    name: 'نسبت',
                    data: [
                        {
                            name: 'درصد سایت',
                            y: {{ $last3DaysBenefit }},
                            color: Highcharts.getOptions().colors[1] // 2021 color
                        }, {
                            name: 'درصد مدرس',
                            y: {{ $last3DaysSellerShare }},
                            color: Highcharts.getOptions().colors[2] // 2021 color
                        }],
                    center: [75, 65],
                    size: 100,
                    innerSize: '70%',
                    showInLegend: false,
                    dataLabels: {
                        enabled: false
                    }
                }
            ]
        });
    </script>
@endsection
































//------------------------------------------------------------------------------- Lesson 157 (Refactoring chart queries)
//-------------------- modules/Webamooz/Payment/Http/Controllers/PaymentController.php
public function index(Request $request)
{
    $this->authorize('manage', Payment::class);
    $payments = $this->paymentRepository->paginate(12);

    //---------- Total+Benefit
    $last3DaysTotal = $this->paymentRepository->getLastNDaysTotal(30);  //کل فروش ۳۰ روز گذشته سایت
    $last3DaysBenefit = $this->paymentRepository->getLastNDaysSiteBenefit(30);  //درامد خالص ۳۰ روز گذشته سایت
    $last3DaysSellerShare = $this->paymentRepository->getLastNDaysSellerShare(30);  //درامد 30 روز مدرس
    $totalAllSite = $this->paymentRepository->getLastNDaysTotal();  //کل فروش سایت
    $benefitAllSite = $this->paymentRepository->getLastNDaysSiteBenefit();  //کل درآمد خالص سایت

    $dates = collect();
    foreach (range(-30, 0) as $i) {  //range($period, 0) -> میاد میگه از مقدار آخری که گفته مثلا 30 روز بیا تا عدد صفر بهش بده
        $dates->put(now()->addDays($i)->format('Y-m-d'), 0);  //->put -> برای ریختن مقدار درون کانشن که صورت کلید و مقدار میتونیم دسترسی داشته باشیم با کلید
    }
    $summery = $this->paymentRepository->getRangeDailySummery($dates);

    return view('Payment::index', compact('payments', 'last3DaysTotal', 'last3DaysBenefit', 'last3DaysSellerShare',
        'totalAllSite', 'benefitAllSite', 'dates', 'summery'));
}





//-------------------- modules/Webamooz/Payment/Resources/Views/index.blade.php
        xAxis: {
            categories: [@foreach ($dates as $date => $value) "{{ $date }}", @endforeach]
        },
        yAxis: {
            title: {
                text: 'مبلغ'
            },
            labels: {
                formatter: function () {
                    return this.value + "تومان"
                }
            }
        },
        plotOptions: {
            series: {
                borderRadius: '25%'
            }
        },
        series: [
            {
                type: 'column',
                name: 'تراکنش موفق',
                //key(Date) => value(0)
                data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first()) {{ $day->totalAmount }}, @else 0, @endif @endforeach]
            },
            {
                type: 'column',
                name: 'درصد سایت',
                data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first()) {{ $day->totalSiteShare }}, @else 0, @endif @endforeach]
            },
            {
                type: 'column',
                name: 'درصد مدرس',
                data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first()) {{ $day->totalSellerShare }}, @else 0, @endif @endforeach]
            },
            {{--
            {
                type: 'column',
                name: 'تراکنش ناموفق',
                data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first()) {{ $day->totalAmount }}, @else 0, @endif @endforeach]
            },
            --}}

            {
                type: 'line',
                step: 'center',
                name: 'فروش',
                data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first()) {{ $day->totalAmount }}, @else 0, @endif @endforeach],
                marker: {
                    lineWidth: 2,
                    lineColor: Highcharts.getOptions().colors[3],
                    fillColor: 'white'
                }
            }, {
                type: 'pie',
                name: 'نسبت',
                data: [
                    {
                        name: 'درصد سایت',
                        y: {{ $last3DaysBenefit }},
                        color: Highcharts.getOptions().colors[1] // 2021 color
                    }, {
                        name: 'درصد مدرس',
                        y: {{ $last3DaysSellerShare }},
                        color: Highcharts.getOptions().colors[2] // 2021 color
                    }],
                center: [75, 65],
                size: 100,
                innerSize: '70%',
                showInLegend: false,
                dataLabels: {
                    enabled: false
                }
            }
        ]

    });
</script>




//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function getRangeDailySummery($dates)
{
    //dates->keys()->first -> بیا فقط کلید ها بگیر یعنی تاریخ ها و اولی نمایش بده که همون قدیمی ترین تاریخ
    return Payment::where('created_at', '>=', $dates->keys()->first())  //summery -> روز هایی نمایش میده که فروش داشتیم درونش
    ->groupBy("date")
        ->orderBy("date")
        ->get([
            DB::raw("DATE(created_at) as date"),  //column(database) as newField -> میاد ی قسمت از دیتابیس ما میریزه درون ی مقدار برای ساختن فیلد
            DB::raw("SUM(amount) as totalAmount"),
            DB::raw("SUM(site_share) as totalSiteShare"),
            DB::raw("SUM(seller_share) as totalSellerShare"),
        ]);
}
































//---------------------------------------------------------------------------------- Lesson 158 (Search for paymets - 1)
//-------------------- modules/Webamooz/Payment/Resources/Views/index.blade.php
<div class="d-flex flex-space-between item-center flex-wrap padding-30 border-radius-3 bg-white">
    <p class="margin-bottom-15">همه تراکنش ها</p>
    <div class="t-header-search">

        <form action="">
            <div class="t-header-searchbox font-size-13">
                <input type="text" class="text search-input__box font-size-13" placeholder="جستجوی تراکنش">
                <div class="t-header-search-content ">
                    <input type="text" name="email"  class="text"  placeholder="ایمیل" value="{{ request()->email }}">
                    <input type="text" name="amount" class="text"  placeholder="مبلغ به تومان" value="{{ request()->amount }}">
                    <input type="text" name="invoice_id" class="text" placeholder="شماره تراکنش" value="{{ request()->invoice_id }}">
                    <input type="text" name="start_date" class="text" placeholder="از تاریخ : 1403/05/10" value="{{ request()->start_date }}">
                    <input type="text" name="end_date" class="text" placeholder="تا تاریخ : 1403/05/11" value="{{ request()->end_date }}">
                    <button type="submit" class="btn btn-webamooz_net mt-5">جستجو</button>
                </div>
            </div>
        </form>

    </div>
</div>




//-------------------- modules/Webamooz/Payment/Http/Controllers/PaymentController.php
public function index(Request $request)
{
    $this->authorize('manage', Payment::class);
    $payments = $this->paymentRepository
        ->searchEmail($request->email)
        ->searchAmount($request->amount)
        ->searchInvoiceId($request->invoice_id)
        ->paginate(12);

    //---------- Total+Benefit
    $last3DaysTotal = $this->paymentRepository->getLastNDaysTotal(30);  //کل فروش ۳۰ روز گذشته سایت
    $last3DaysBenefit = $this->paymentRepository->getLastNDaysSiteBenefit(30);  //درامد خالص ۳۰ روز گذشته سایت
    $last3DaysSellerShare = $this->paymentRepository->getLastNDaysSellerShare(30);  //درامد 30 روز مدرس
    $totalAllSite = $this->paymentRepository->getLastNDaysTotal();  //کل فروش سایت
    $benefitAllSite = $this->paymentRepository->getLastNDaysSiteBenefit();  //کل درآمد خالص سایت

    $dates = collect();
    foreach (range(-30, 0) as $i) {  //range($period, 0) -> میاد میگه از مقدار آخری که گفته مثلا 30 روز بیا تا عدد صفر بهش بده
        $dates->put(now()->addDays($i)->format('Y-m-d'), 0);  //->put -> برای ریختن مقدار درون کانشن که صورت کلید و مقدار میتونیم دسترسی داشته باشیم با کلید
    }
    $summery = $this->paymentRepository->getRangeDailySummery($dates);

    return view('Payment::index', compact('payments', 'last3DaysTotal', 'last3DaysBenefit', 'last3DaysSellerShare',
        'totalAllSite', 'benefitAllSite', 'dates', 'summery'));
}



//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
private $query;

public function __construct()
{
    $this->query = Payment::query();
}

public function paginate($count)
{
    return $this->query->latest()->paginate($count);
}

public function searchEmail($email)
{
    if (!is_null($email)) {
        $this->query->join('users', 'payments.buyer_id', 'users.id')  //1)join(با چه جدولی ارتباط بگیره)  2)table.column(table Other)   3)tableJoin(ارتباط گیرنده جدول جوین شده)
        ->select("payments.*", "users.email")
            ->where('users.email', "LIKE", "%" . $email . "%");
    }
    return $this;
}

public function searchAmount($amount)
{
    if (!is_null($amount)) {
        $this->query->where('amount', $amount);
    }
    return $this;
}


public function searchInvoiceId($invoice_id)
{
    if (!is_null($invoice_id)) {
        $this->query->where('invoice_id', "LIKE", "%" . $invoice_id . "%");
    }
    return $this;
}







































//--------------------------------------------------------- Lesson 159 (Search for payments - 2 - search by jalali date)
1) URL -> https://github.com/morilog/jalali
2) composer require morilog/jalali:3.*
3) Mildadi To Jalili -> $jDate = Jalalian::fromCarbon(Carbon::now()); + $jDate = Jalalian::fromDateTime(Carbon::now())
4) Jalili To Mildadi -> $date = \Morilog\Jalali\Jalalian::fromFormat('Y-m-d', "1395-02-19")->toCarbon();




//-------------------- modules/Webamooz/Payment/Http/Controllers/PaymentController.php
public function index(Request $request)
{
    $this->authorize('manage', Payment::class);
    $payments = $this->paymentRepository
        ->searchEmail($request->email)
        ->searchAmount($request->amount)
        ->searchInvoiceId($request->invoice_id)
        ->searchAfterDate(Generate::generateDateJaliliToMiadi($request->start_date))
        ->searchBeforeDate(Generate::generateDateJaliliToMiadi($request->end_date))
        ->paginate(12);

    //---------- Total+Benefit
    $last3DaysTotal = $this->paymentRepository->getLastNDaysTotal(30);  //کل فروش ۳۰ روز گذشته سایت
    $last3DaysBenefit = $this->paymentRepository->getLastNDaysSiteBenefit(30);  //درامد خالص ۳۰ روز گذشته سایت
    $last3DaysSellerShare = $this->paymentRepository->getLastNDaysSellerShare(30);  //درامد 30 روز مدرس
    $totalAllSite = $this->paymentRepository->getLastNDaysTotal();  //کل فروش سایت
    $benefitAllSite = $this->paymentRepository->getLastNDaysSiteBenefit();  //کل درآمد خالص سایت

    $dates = collect();
    foreach (range(-30, 0) as $i) {  //range($period, 0) -> میاد میگه از مقدار آخری که گفته مثلا 30 روز بیا تا عدد صفر بهش بده
        $dates->put(now()->addDays($i)->format('Y-m-d'), 0);  //->put -> برای ریختن مقدار درون کانشن که صورت کلید و مقدار میتونیم دسترسی داشته باشیم با کلید
    }
    $summery = $this->paymentRepository->getRangeDailySummery($dates);

    return view('Payment::index', compact('payments', 'last3DaysTotal', 'last3DaysBenefit', 'last3DaysSellerShare',
        'totalAllSite', 'benefitAllSite', 'dates', 'summery'));
}




//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function searchAfterDate($date)
{
    if (!is_null($date)) {
        $this->query->whereDate('created_at', '>=', $date);  //searchBeforeDate -> مقایسه بین دو تا تاریخ زمانی
    }
    return $this;  //اگر سرچی نبود و تاریخ شروع نفرستاده بودیم بیا صفحه اصلی نمایش بده همراه صفحه بندی
}

public function searchBeforeDate($date)
{
    if (!is_null($date)) {
        $this->query->whereDate('created_at', '<=', $date);  //searchBeforeDate -> مقایسه بین دو تا تاریخ زمانی
    }
    return $this;  //اگر سرچی نبود و تاریخ پایان نفرستاده بودیم بیا صفحه اصلی نمایش بده همراه صفحه بندی
}





//-------------------- app/Helper/Generate.php
class Generate
{
    public static function newFeedback($heading = 'موفقیت آمیر', $text = 'عملیات با موفقیت انجام شد', $type = 'success')
    {
        $session = session()->has('feedbacks') ? session()->get('feedbacks') : [];
        $session[] = ["heading" => $heading, "text" => $text, "type" => $type];
        session()->flash('feedbacks', $session);
    }

    public static function generateDateJaliliToMiadi($date, $format = "Y/m/d"): ?\Carbon\Carbon
    {
        return $date ? Jalalian::fromFormat($format, $date)->toCarbon() : null;
    }
}




//-------------------- modules/Webamooz/Payment/Resources/Views/index.blade.php
<td>{{ \Morilog\Jalali\Jalalian::fromCarbon($payment->created_at) }}</td>  {{-- fromCarbon ==fromDateTime -> Miladi To Jalili --}}




























//---------------------------------------------------------------- Lesson 160 (Jalali date for charts and manage colors)
//-------------------- app/Helper/Generate.php
public static function getDateMiadiToJalili($date, $format = "Y-m-d")  //Y-m-d -> read from database
{
    return Jalalian::fromCarbon(Carbon::createFromFormat($format, $date))->format($format);
}





//-------------------- modules/Webamooz/Payment/Resources/Views/index.blade.php
        xAxis: {
            categories: [@foreach ($dates as $date => $value) "{{ \App\Helper\Generate::getDateMiadiToJalili($date) }}", @endforeach]
        },
        yAxis: {
            title: {
                text: 'مبلغ'
            },
            labels: {
                formatter: function () {
                    return this.value + "تومان"
                }
            }
        },
        plotOptions: {
            series: {
                borderRadius: '25%'
            }
        },
        series: [
            {
                type: 'column',
                name: 'درصد سایت',
                data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first())
                    {{ $day->totalSiteShare }}, @else 0, @endif @endforeach],
                color : "deepskyblue"
            },
            {
                type: 'column',
                name: 'تراکنش موفق',
                //key(Date) => value(0)
                data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first())
                    {{ $day->totalAmount }}, @else 0, @endif @endforeach],
                color: "#4ad186"
            },
            {
                type: 'column',
                name: 'درصد مدرس',
                data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first())
                    {{ $day->totalSellerShare }}, @else 0, @endif @endforeach],
                color: "darkorange"
            },

                {{--
                {
                    type: 'column',
                    name: 'تراکنش ناموفق',
                    data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first())
                        {{ $day->totalAmount }}, @else 0, @endif @endforeach]
                },
                --}}

            {
                type: 'line',
                step: 'center',
                name: 'فروش',
                data: [@foreach ($dates as $date => $value) @if($day = $summery->where('date' , $date)->first())
                    {{ $day->totalAmount }}, @else 0, @endif @endforeach],
                marker: {
                    lineWidth: 2,
                    lineColor: "green",
                    fillColor: 'white'
                },
            }, {
                type: 'pie',
                name: 'نسبت',
                data: [
                    {
                        name: 'درصد سایت',
                        y: {{ $last3DaysBenefit }},
                        color : "deepskyblue"
                    }, {
                        name: 'درصد مدرس',
                        y: {{ $last3DaysSellerShare }},
                        color: "darkorange"
                        // color: Highcharts.getOptions().colors[2] // 2021 color
                    }],
                center: [75, 65],
                size: 100,
                innerSize: '70%',
                showInLegend: false,
                dataLabels: {
                    enabled: false
                }
            }
        ]

    });
</script>







































//--------------------------------------------------------------------------------------- Lesson 161 (My purchases page)
1) Use Pagination -> $payments->links() === $payments->render()


//-------------------- modules/Webamooz/Payment/Providers/PaymentServiceProvider.php
config()->set('sidebar.items.my-purchases', [
    'icon' => 'i-my__purchases',
    'title' => 'خرید های من',
    'url' => route('purchases.index'),
]);




//-------------------- modules/Webamooz/Payment/Routes/payment_route.php
$router->get('purchases/index', [
    "uses" => "PaymentController@purchases",
    "as" => ("purchases.index")
]);




//-------------------- modules/Webamooz/Payment/Http/Controllers/PaymentController.php
public function purchases()
{
    $payments = auth()->user()->payments()->with('paymentable')->paginate(12);  //with('paymentable') -> Query easy
    return view('Payment::purchases' , compact('payments'));
}



//-------------------- modules/Webamooz/User/Models/User.php
public function payments() //Model + able
{
    return $this->hasMany(Payment::class, 'buyer_id');  //1)Model  2)name relation (buyer_id) اسم متود درون پیمنت
}



























//------------------------------------------------------------------------------------------- Lesson 162 (Dashboard - 1)
//-------------------- modules/Webamooz/User/database/migrations/2024_01_01_000000_create_users_table.php
$table->bigInteger('balance')->default(0);  //موجودی حساب فعلی



//-------------------- Database/Migrations/2024_07_17_081727_create_payments_table.php
$table->foreignId('seller_id')->nullable();  //teacher



//-------------------- modules/Webamooz/Dashboard/Http/Controllers/DashboardController.php
public function home(PaymentRepositories $paymentRepositories)
{
    $user_id = auth()->user()->id;
    $totalSells = $paymentRepositories->getUserTotalSells($user_id);
    $totalBenefit = $paymentRepositories->getUserTotalBenefit($user_id);
    $totalSiteShare = $paymentRepositories->getUserTotalSiteShare($user_id);
    $todayBenefit = $paymentRepositories->getUserTotalBenefitByDay($user_id, now());  //درآمد امروز
    $last30DaysBenefit = $paymentRepositories->getUserTotalBenefitByPeriod($user_id, now(), now()->addDays(-30));  //درآمد امروز
    $todaySuccessPaymentTotal = $paymentRepositories->getUserTotalSellByDay($user_id, now());
    $todaySuccessPaymentCount = $paymentRepositories->getUserSellByDayCount($user_id, now());
    return view('Dashboard::index', compact('totalSells','totalBenefit', 'totalSiteShare', 'todayBenefit',
        'last30DaysBenefit','todaySuccessPaymentTotal','todaySuccessPaymentCount'));
}





//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function getUserSuccessPayments($user_id)
{
    return Payment::where('seller_id', $user_id)->where('status', Payment::STATUS_SUCCESS);
}

public function getUserTotalSells($user_id)
{
    return $this->getUserSuccessPayments($user_id)->sum('amount');  //فقط قیمت های مدرس
}

public function getUserTotalBenefit($user_id)
{
    return $this->getUserSuccessPayments($user_id)->sum('seller_share');  //فقط قیمت های مدرس
}

public function getUserTotalSiteShare($user_id)
{
    return $this->getUserSuccessPayments($user_id)->sum('site_share');  //فقط قیمت سایت
}

public function getUserTotalBenefitByDay($user_id, $date)
{
    return $this->getUserSuccessPayments($user_id)->whereDate('created_at', $date)->sum('seller_share');
}

public function getUserTotalSellByDay($user_id, $date)
{
    return $this->getUserSuccessPayments($user_id)->whereDate('created_at', $date)->sum('amount');
}

public function getUserSellByDayCount($user_id, $date)
{
    return $this->getUserSuccessPayments($user_id)->whereDate('created_at', $date)->count();
}

public function getUserTotalBenefitByPeriod($user_id, $startDate, $endDate)
{
    return $this->getUserSuccessPayments($user_id)  //امروز پنجم برج بیا از تاریخ امروز کوچیکتر بگیره و تا پنجم برج قبل باید از اون بزرگتر باشه
    ->whereDate('created_at', '<=', $startDate)
        ->whereDate('created_at', '>=', $endDate)
        ->sum('seller_share');
}





//-------------------- modules/Webamooz/Dashboard/Resources/Views/index.blade.php
@can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_TEACH)
    <div class="row no-gutters font-size-13 margin-bottom-10">
        <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
            <p> موجودی حساب فعلی </p>
            <p>{{ number_format(auth()->user()->balance) }} تومان </p>
        </div>
        <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
            <p> کل فروش دوره ها</p>
            <p>{{ number_format($totalSells) }} تومان</p>
        </div>
        <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
            <p> کارمزد کسر شده </p>
            <p>{{ number_format($totalSiteShare) }} تومان</p>
        </div>
        <div class="col-3 padding-20 border-radius-3 bg-white margin-bottom-10">
            <p> درآمد خالص </p>
            <p>{{ number_format($totalBenefit) }} تومان</p>
        </div>
    </div>
    <div class="row no-gutters font-size-13 margin-bottom-10">

        <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
            <p> درآمد امروز </p>
            <p>{{ number_format($todayBenefit) }} تومان</p>
        </div>

        <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
            <p> درآمد 30 روز گذاشته</p>
            <p>{{ number_format($last30DaysBenefit) }} تومان</p>
        </div>

        <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
            <p> تسویه حساب در حال انجام </p>
            <p>0 تومان </p>
        </div>

        <div class="col-3 padding-20 border-radius-3 bg-white  margin-bottom-10">
            <p> تراکنش های موفق امروز ({{ $todaySuccessPaymentCount }}) تراکنش </p>
            <p>{{ number_format($todaySuccessPaymentTotal) }} تومان</p>
        </div>

    </div>
    <div class="row no-gutters font-size-13 margin-bottom-10">
        <div class="col-8 padding-20 bg-white margin-bottom-10 margin-left-10 border-radius-3">
            محل قرار گیری نمودار
        </div>
        <div class="col-4 info-amount padding-20 bg-white margin-bottom-12-p margin-bottom-10 border-radius-3">

            <p class="title icon-outline-receipt">موجودی قابل تسویه </p>
            <p class="amount-show color-444">600,000<span> تومان </span></p>
            <p class="title icon-sync">در حال تسویه</p>
            <p class="amount-show color-444">0<span> تومان </span></p>
            <a href="/" class=" all-reconcile-text color-2b4a83">همه تسویه حساب ها</a>
        </div>
    </div>
@endcan ()




































//------------------------------------------------------------------------------------------- Lesson 163 (Dashboard - 2)
1) Hichart + scripts -> include TO modules/Webamooz/Payment/Resources/Views/chart.blade.php




//-------------------- modules/Webamooz/Dashboard/Http/Controllers/DashboardController.php
public function home(PaymentRepositories $paymentRepositories)
{
    $user_id = auth()->user()->id;
    //---------- Dashboard Home
    $totalSells = $paymentRepositories->getUserTotalSells($user_id);
    $totalBenefit = $paymentRepositories->getUserTotalBenefit($user_id);
    $totalSiteShare = $paymentRepositories->getUserTotalSiteShare($user_id);
    $todayBenefit = $paymentRepositories->getUserTotalBenefitByDay($user_id, now());  //درآمد امروز
    $last30DaysBenefit = $paymentRepositories->getUserTotalBenefitByPeriod($user_id, now(), now()->addDays(-30));  //درآمد امروز
    $todaySuccessPaymentTotal = $paymentRepositories->getUserTotalSellByDay($user_id, now());
    $todaySuccessPaymentCount = $paymentRepositories->getUserSellByDayCount($user_id, now());
    //---------- Chart.js
    $payments = $paymentRepositories->paymentBySellerId($user_id)->paginate(12);
    $last3DaysTotal = $paymentRepositories->getLastNDaysTotal(30);  //کل فروش ۳۰ روز گذشته سایت
    $last3DaysSellerShare = $paymentRepositories->getLastNDaysSellerShare(30);  //درامد 30 روز مدرس
    $totalAllSite = $paymentRepositories->getLastNDaysTotal();  //کل فروش سایت
    $last3DaysBenefit = $paymentRepositories->getUserTotalSiteShare($user_id);


    $dates = collect();
    foreach (range(-30, 0) as $i) {  //range($period, 0) -> میاد میگه از مقدار آخری که گفته مثلا 30 روز بیا تا عدد صفر بهش بده
        $dates->put(now()->addDays($i)->format('Y-m-d'), 0);  //->put -> برای ریختن مقدار درون کانشن که صورت کلید و مقدار میتونیم دسترسی داشته باشیم با کلید
    }
    $summery = $paymentRepositories->getRangeDailySummery($dates, $user_id);

    return view('Dashboard::index', compact('totalSells', 'totalBenefit', 'totalSiteShare', 'todayBenefit',
        'last30DaysBenefit', 'todaySuccessPaymentTotal', 'todaySuccessPaymentCount', 'last3DaysTotal', 'last3DaysSellerShare',
        'totalAllSite', 'payments', 'dates', 'summery', 'last3DaysBenefit'));
}




//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function getRangeDailySummery($dates, $seller_id = null)
{
    //dates->keys()->first -> بیا فقط کلید ها بگیر یعنی تاریخ ها و اولی نمایش بده که همون قدیمی ترین تاریخ
    $query = Payment::where('created_at', '>=', $dates->keys()->first())  //summery -> روز هایی نمایش میده که فروش داشتیم درونش
    ->groupBy("date")
        ->orderBy("date");

    if (!is_null($seller_id)) {  //برای مشخص شدن چارت مدرس با چارت کلی سایت برای ادمین
        $query->where('seller_id', $seller_id);
    }

    return $query->get([
        DB::raw("DATE(created_at) as date"),  //column(database) as newField -> میاد ی قسمت از دیتابیس ما میریزه درون ی مقدار برای ساختن فیلد
        DB::raw("SUM(amount) as totalAmount"),
        DB::raw("SUM(site_share) as totalSiteShare"),
        DB::raw("SUM(seller_share) as totalSellerShare"),
    ]);
}




//-------------------- modules/Webamooz/Dashboard/Resources/Views/index.blade.php
@extends('Dashboard::master')
@section('title' , 'پنل ادمین')

@section('content')

    @can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_TEACH)
        <div class="row no-gutters font-size-13 margin-bottom-10">
            <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
                <p> موجودی حساب فعلی </p>
                <p>{{ number_format(auth()->user()->balance) }} تومان </p>
            </div>
            <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
                <p> کل فروش دوره ها</p>
                <p>{{ number_format($totalSells) }} تومان</p>
            </div>
            <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
                <p> کارمزد کسر شده </p>
                <p>{{ number_format($totalSiteShare) }} تومان</p>
            </div>
            <div class="col-3 padding-20 border-radius-3 bg-white margin-bottom-10">
                <p> درآمد خالص </p>
                <p>{{ number_format($totalBenefit) }} تومان</p>
            </div>
        </div>
        <div class="row no-gutters font-size-13 margin-bottom-10">

            <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
                <p> درآمد امروز </p>
                <p>{{ number_format($todayBenefit) }} تومان</p>
            </div>

            <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
                <p> درآمد 30 روز گذاشته</p>
                <p>{{ number_format($last30DaysBenefit) }} تومان</p>
            </div>

            <div class="col-3 padding-20 border-radius-3 bg-white margin-left-10 margin-bottom-10">
                <p> تسویه حساب در حال انجام </p>
                <p>0 تومان </p>
            </div>

            <div class="col-3 padding-20 border-radius-3 bg-white  margin-bottom-10">
                <p> تراکنش های موفق امروز ({{ $todaySuccessPaymentCount }}) تراکنش </p>
                <p>{{ number_format($todaySuccessPaymentTotal) }} تومان</p>
            </div>

        </div>
        <div class="row no-gutters font-size-13 margin-bottom-10">

            {{---------- Highcharts.chart ----------}}
            <div class="col-8 padding-20 bg-white margin-bottom-10 margin-left-10 border-radius-3">
                <div class="col-12 bg-white padding-30 margin-bottom-20">
                    <div id="container"></div>
                </div>
            </div>


            <div class="col-4 info-amount padding-20 bg-white margin-bottom-12-p margin-bottom-10 border-radius-3">

                <p class="title icon-outline-receipt">موجودی قابل تسویه </p>
                <p class="amount-show color-444">600,000<span> تومان </span></p>
                <p class="title icon-sync">در حال تسویه</p>
                <p class="amount-show color-444">0<span> تومان </span></p>
                <a href="/" class=" all-reconcile-text color-2b4a83">همه تسویه حساب ها</a>
            </div>
        </div>
    @endcan ()

    <div class="row bg-white no-gutters font-size-13">
        <div class="title__row">
            <p>تراکنش های اخیر شما</p>
            <a class="all-reconcile-text margin-left-20 color-2b4a83">نمایش همه تراکنش ها</a>
        </div>
        <div class="table__box">
            <table width="100%" class="table">
                <thead role="rowgroup">
                <tr role="row" class="title-row">
                    <th>شماره</th>
                    <th>شناسه پرداخت</th>
                    <th>نام و نام خانوادگی</th>
                    <th>ایمیل پرداخت کننده</th>
                    <th>مبلغ (تومان)</th>
                    <th>درامد شما</th>
                    <th>درامد سایت</th>
                    <th>نام دوره</th>
                    <th>تاریخ و ساعت</th>
                    <th>وضعیت</th>
                </tr>
                </thead>
                <tbody>
                @foreach ($payments as $index => $payment)
                    <tr role="row" class="">
                        <td>{{ $payments->firstItem() + $index  }}</td>
                        <td>{{ $payment->invoice_id }}</td>
                        <td>{{ $payment->buyer->name }}</td>
                        <td>{{ $payment->buyer->email }}</td>
                        <td>{{ number_format($payment->amount) }}</td>
                        <td>{{ number_format($payment->seller_share) }}</td>
                        <td>{{ number_format($payment->site_share) }}</td>
                        <td>{{ $payment->paymentable->title }}</td>
                        <td>{{ \Morilog\Jalali\Jalalian::fromCarbon($payment->created_at) }}</td> {{-- fromCarbon ==fromDateTime -> Miladi To Jalili --}}
                        <td class="
                                @if ($payment->status == \Webamooz\Payment\Models\Payment::STATUS_SUCCESS) text-success
                                @elseif ($payment->status == \Webamooz\Payment\Models\Payment::STATUS_FAIL) text-danger_custom
                                @elseif ($payment->status == \Webamooz\Payment\Models\Payment::STATUS_PENDING) text-warning
                                @elseif ($payment->status == \Webamooz\Payment\Models\Payment::STATUS_CANCELED) text-white-50_custom
                                @endif">
                            @lang($payment->status)
                        </td>
                    </tr>
                @endforeach
                </tbody>
            </table>
            {{ $payments->render() }}
        </div>
    </div>

@endsection

@section('js')
    @includeIf('Payment::chart')
@endsection









































//----------------------------------------------------------------------------- Lesson 164 (AddSellersShareToHisAccount)
1) php artisan make:listener AddSellersShareToHisAccount  //بعد از خرید دوره درصد مدرص تو حسابش شارژ بشه



//-------------------- modules/Webamooz/Payment/Providers/PaymentServiceProvider.php
public function register()
{
    $this->app->register(EventServiceProvider::class);
}



//-------------------- modules/Webamooz/Payment/Providers/EventServiceProvider.php
protected $listen = [
    PaymentWasSuccessful::class => [
        AddSellersShareToHisAccount::class
    ]
];


//-------------------- modules/Webamooz/Payment/Listeners/AddSellersShareToHisAccount.php
public function handle($event)
{
    if ($event->payment->seller) {  //اگر مدرسی داره
        $event->payment->seller->balance += $event->payment->seller_share;
        $event->payment->seller->save();
    }
}


//-------------------- modules/Webamooz/Payment/Models/Payment.php
public function seller()
{
    return $this->belongsTo(User::class, 'seller_id');
}

































//----------------------------------------------------------------------------- Lesson 165 (Settlement request - part 1)
1) php artisan make:model Settlement -mc




//-------------------- modules/Webamooz/Payment/Providers/PaymentServiceProvider.php
public string $namespace = "Webamooz\Payment\Http\Controllers";
public function register()
{
    Route::middleware(['web'])->namespace($this->namespace)->group(__DIR__ . "/../Routes/payment_route.php");
    Route::middleware(['web'])->namespace($this->namespace)->group(__DIR__ . "/../Routes/settlement_routes.php");
}




//-------------------- modules/Webamooz/Payment/Routes/settlement_routes.php
Route::group(["middleware" => 'auth'], function ($router) {
    $router->get('settlements/create', [SettlementController::class, 'create'])->name('settlements.create');
    $router->post('settlements', [SettlementController::class, 'store'])->name('settlements.store');
});




//-------------------- modules/Webamooz/Payment/Database/Migrations/2024_08_05_142908_create_settlements_table.php
Schema::create('settlements', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->nullable()->constrained()->onDelete('set null');  //کاربر حذف شد بیا نال بکن آیدی یوزر در این جدول
    $table->string('transaction_id', 50)->nullable();
    $table->json("from")->nullable();  //مبدا
    $table->json("to")->nullable();  //مقصد
    $table->timestamp('settled_at')->nullable();  //تاریخ واریز شده
    $table->integer('amount')->unsigned();
    $table->enum('status', \Webamooz\Payment\Models\Settlement::$statuses)
        ->default(\Webamooz\Payment\Models\Settlement::STATUS_PENDING);
    $table->timestamps();  //created_at -> تاریخ درخواست واریز
});




//-------------------- modules/Webamooz/Payment/Models/Settlement.php
const STATUS_PENDING = 'pending';
const STATUS_SETTLED = 'settled';
const STATUS_REJECTED = 'rejected';
const STATUS_CANCELED = 'canceled';

public static array $statuses = [
    self::STATUS_PENDING,
    self::STATUS_SETTLED,
    self::STATUS_REJECTED,
    self::STATUS_CANCELED,
];

protected $fillable = [
    'user_id',
    'transaction_id',
    'from',
    'to',
    'settled_at',
    'amount',
    'status',
];

protected $casts = [
    'from' => 'json',
    'to' => 'json',
];



//-------------------- modules/Webamooz/User/Models/User.php
public function settlements()
{
    return $this->hasMany(Settlement::class);
}



//-------------------- modules/Webamooz/Payment/Http/Controllers/SettlementController.php
public function create()
{
    return view("Payment::settlements.create");
}




//-------------------- modules/Webamooz/Payment/Resources/Views/settlements/create.blade.php
@extends('Dashboard::master')
@section('title' , 'درخواست تسویه حساب')
@section('breadcrumb')
    <li><a href="{{ route('settlements.index') }}" title="تسویه حساب ها">تسویه حساب ها</a></li>
    <li><a href="#" title="درخواست تسویه حساب جدید">درخواست تسویه حساب جدید</a></li>
@endsection

@section('content')
    <div class="main-content">
        <form action="{{ route('settlements.store') }}" method="POST" class="padding-30 bg-white font-size-14">
            @csrf
            <x-input type="text" name="name" placeholder="نام صاحب حساب" class="text" required />
            <x-input type="text" name="cart" placeholder="شماره کارت" class="text" required />
            <x-input type="text" name="amount" placeholder="مبلغ به تومان" class="text" value="{{ auth()->user()->balance }}" style="margin-bottom: 20px" />

            <div class="row no-gutters border-2 margin-bottom-15 text-center ">
                <div class="w-50 padding-20 w-50">موجودی قابل برداشت :‌</div>
                <div class="bg-fafafa padding-20 w-50"> {{ number_format(auth()->user()->balance) }} تومان </div>
            </div>

            <div class="row no-gutters border-2 text-center margin-bottom-15">
                <div class="w-50 padding-20">حداکثر زمان واریز :‌</div>
                <div class="w-50 bg-fafafa padding-20">۳ روز</div>
            </div>

            <button type="submit" class="btn btn-webamooz_net">درخواست تسویه</button>
        </form>
    </div>
@endsection


































//----------------------------------------------------------------------------- Lesson 166 (Settlement request - part 2)
1) php artisan make:request SettlementRequest



//-------------------- modules/Webamooz/Payment/Http/Requests/SettlementRequest.php
public function rules()
{
    return [
        'name' => 'required|max:255',
        'cart' => 'required|numeric|digits:16',
        'amount' => 'required|numeric|max:' . auth()->user()->balance,  //حداکثر تا مقدار حساب من میتونه برداشت کنه نه بیشتر
    ];
}

public function attributes()
{
    return [
        'cart' => 'شماره کارت',
        'amount' => 'مبلغ',
    ];
}

public function messages()
{
    return [
        'cart.digits' => 'شماره کارت باید حتما 16 رقم باشد.'
    ];
}




//-------------------- modules/Webamooz/Payment/Http/Controllers/SettlementController.php
private $settlementRepo;
public function __construct(SettlementRepositories $settlementRepo)
{
    $this->settlementRepo = $settlementRepo;
}

public function index()
{
    $settlements = $this->settlementRepo->paginate(12);
    return view('Payment::settlements.index', compact('settlements'));
}

public function create()
{
    return view("Payment::settlements.create");
}

public function store(SettlementRequest $request)
{
    $this->settlementRepo->store([
        "name" => $request->name,
        "cart" => $request->cart,
        "amount" => $request->amount,
    ]);
    Generate::newFeedback();
    return to_route('settlements.index');
}




//-------------------- modules/Webamooz/Payment/Repositories/SettlementRepositories.php
rivate $query;
public function __construct()
{
    $this->query = Settlement::query();
}

public function paginate($count = 10)
{
    return $this->query->latest()->paginate($count);
}

public function settled()
{
    return $this->query->where('status', Settlement::STATUS_SETTLED);
}

public function store($data)
{
    return Settlement::create([
        'user_id' => auth()->id(),
        'to' => [  //json
            "cart" => $data['cart'],
            "name" => $data['name']
        ],
        "amount" => $data['amount']
    ]);
}



//-------------------- modules/Webamooz/Payment/Lang/fa.json
{
    "pending": "در حال انتظار",
    "canceled": "کنسل شده",
    "success": "موفقیت آمیز",
    "settled": "موفقیت آمیز",
    "fail": "ناموفق",
    "rejected": "ناموفق"
}



//-------------------- modules/Webamooz/Payment/Resources/Views/settlements/index.blade.php
@extends('Dashboard::master')
@section('title' , 'تسویه حساب ها')
@section('breadcrumb')
    <li><a href="{{ route('purchases.index') }}" title="تسویه حساب ها">تسویه حساب ها</a></li>
@endsection

@section('content')
    <a class="tab__item is-active" href="#"> همه تسویه ها</a>
    <a class="tab__item " href="?status={{ \Webamooz\Payment\Models\Settlement::STATUS_SETTLED }}">تسویه هایواریز شده</a>

        <div class="table__box">
            <table class="table">
                <thead role="rowgroup">
                <tr role="row" class="title-row">
                    <th>شناسه تسویه</th>
                    <th>مبدا</th>
                    <th>مقصد</th>
                    <th>شماره کارت</th>
                    <th>تاریخ درخواست واریز</th>
                    <th>تاریخ واریز شده</th>
                    <th>مبلغ (تومان )</th>
                    <th>وضعیت</th>
                    <th>عملیات</th>
                </tr>
                </thead>
                <tbody>
                @foreach($settlements as $settlement)
                    <tr role="row">
                        <td><a href="">{{ $settlement->transaction_id ?? '-' }}</a></td>
                        <td><a href="">{{ $settlement->from ? $settlement->from->name : '-' }}</a></td>
                        <td><a href="">{{ $settlement->to['name'] }}</a></td>
                        <td><a href="">{{ $settlement->to['cart'] }}</a></td>
                        <td><a href="">{{ $settlement->created_at->diffForHumans() }}</a></td>
                        <td><a href="">{{ $settlement->settled_at ? $settlement->settled_at->diffForHumans() : '-' }}</a></td>
                        <td><a href="">{{ number_format($settlement->amount) }}</a></td>
                        <td><a href="" class="
                            @if ($settlement->status == \Webamooz\Payment\Models\Settlement::STATUS_SETTLED) text-success
                            @elseif ($settlement->status == \Webamooz\Payment\Models\Settlement::STATUS_PENDING) text-warning
                            @else text-danger
                            @endif
                            ">
                            @lang($settlement->status)</a>
                        </td>
                        <td>
                            <a href="" class="item-edit btn_info_customize mlg-15 " title="ویرایش"></a>
                            <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"></a>
                            <a href="" class="item-reject mlg-15 btn_red_customize" title="رد"></a>
                            <a href="" class="item-confirm mlg-15 btn_success_customize" title="تایید"></a>
                        </td>
                    </tr>
                @endforeach

                </tbody>
            </table>
        </div>
    </div>
@endsection


































//----------------------------------------------------------------------- Lesson 167,168 (Settlement request - part 3,4)
//-------------------- modules/Webamooz/Payment/Providers/PaymentServiceProvider.php
public function boot()
{
    config()->set('sidebar.items.settlements', [
        'icon' => 'i-checkouts',
        'title' => 'درخواست های تسویه حساب',
        'url' => route('settlements.index'),
        /*'permission' => [
            Permission::PERMISSION_MANAGE_PAYMENTS,
        ]*/
    ]);
}





//-------------------- modules/Webamooz/Payment/Routes/settlement_routes.php
$router->get('settlements', [
    "uses" => "SettlementController@index",
    "as" => "settlements.index"
]);
$router->get('settlements.create', [
    "uses" => "SettlementController@create",
    "as" => ("settlements.create")  //هم با پرانتز هم بدون پرانتز درسته
]);
$router->post('settlements', [SettlementController::class, 'store'])->name('settlements.store');






//-------------------- modules/Webamooz/Payment/Http/Controllers/SettlementController.php
public function create()
{
    return view("Payment::settlements.create");
}

public function store(SettlementRequest $request)
{
    $this->settlementRepo->store($request);
    Generate::newFeedback();
    auth()->user()->balance -= $request->amount;
    auth()->user()->save();
    return to_route('settlements.index');
}

public function edit($settlement_id)
{
    $settlement = $this->settlementRepo->findById($settlement_id);
    return view("Payment::settlements.edit", compact('settlement'));
}

public function update(SettlementRequest $request, $settlement_id)
{
    $this->settlementRepo->update($settlement_id, $request);
    Generate::newFeedback();
    return to_route('settlements.index');
}





//-------------------- modules/Webamooz/Payment/Repositories/SettlementRepositories.php
public function store($request)
{
    return Settlement::create([
        'user_id' => auth()->id(),
        'to' => [  //json
            "name" => $request['name'],
            "cart" => $request['cart'],
        ],
        "amount" => $request->amount
    ]);
}

public function update($settlement_id, $request)
{
    return Settlement::query()->where('id', $settlement_id)->update(
        [
            "from" => [
                "name" => $request->from['name'],
                "cart" => $request->from['cart'],
            ],
            "to" => [
                "name" => $request->to['name'],
                "cart" => $request->to['cart']
            ],
            "status" => $request->status
        ]
    );
}








//-------------------- modules/Webamooz/Payment/Http/Requests/SettlementRequest.php
public function rules()
{
    if (request()->method() == 'PATCH') {  //request()->getMethod() == 'PATCH
        return [
            'from.name' => "required_if:status," . Settlement::STATUS_SETTLED,  //from[name] + from[cart] -> اگر وضعیت تسویه شده باشد باید حتما پر بشن و واجب
            'from.cart' => "required_if:status," . Settlement::STATUS_SETTLED,
            'to.name' => "required_if:status," . Settlement::STATUS_SETTLED,  //وضعیت اسم و کارت گیرنده اجباری وقتی وضعیت روی تسویه شده + ?required_if:column,when
            'to.cart' => "required_if:status," . Settlement::STATUS_SETTLED,
            'amount' => 'required|integer',
        ];
    }

    return [
        'name' => 'required|max:255',
        'cart' => 'required|numeric|digits:16',
        'amount' => 'required|integer|max:' . auth()->user()->balance,  //حداکثر تا مقدار حساب من میتونه برداشت کنه نه بیشتر
    ];
}

public function attributes()
{
    return [
        'cart' => 'شماره کارت',
        'amount' => 'مبلغ',
        'status' => 'وضعیت',
        'settled' => 'تسویه شده',
        'from.name' => 'نام صاحب حساب فرستنده',
        'from.cart' => 'شماره کارت فرستنده'
    ];
}

public function messages()
{
    return [
        'cart.digits' => 'شماره کارت باید حتما 16 رقم باشد.'
    ];
}





//-------------------- modules/Webamooz/Payment/Resources/Views/settlements/edit.blade.php
@extends('Dashboard::master')

@section('title' , 'ویرایش درخواست تسویه حساب')
@section('breadcrumb')
    <li><a href="{{ route('settlements.index') }}" title="تسویه حساب ها">تسویه حساب ها</a></li>
    <li><a href="#" title="ویرایش درخواست تسویه حساب جدید">ویرایش درخواست تسویه حساب جدید</a></li>
@endsection

@section('content')
    <div class="main-content">
        <form action="{{ route('settlements.update' , $settlement->id) }}" method="POST" class="padding-30 bg-white font-size-14">
            @csrf
            @method('PATCH')

            <x-input type="text" name="from[name]" placeholder="نام صاحب حساب فرستنده" class="text"
                     value="{{ is_array($settlement->from) && array_key_exists('name' , $settlement->from) ? $settlement->from['name'] : '' }}" />

            <x-input type="text" name="from[cart]" placeholder="شماره کارت فرستنده" class="text"
                     value="{{ is_array($settlement->from) && array_key_exists('cart' , $settlement->from) ? $settlement->from['cart'] : '' }}" />

            <x-input type="text" name="to[name]" placeholder="نام صاحب حساب گیرنده" class="text" required
                     value="{{ is_array($settlement->to) && array_key_exists('name' , $settlement->to) ? $settlement->to['name'] : '' }}" />

            <x-input type="text" name="to[cart]" placeholder="شماره کارت گیرنده" class="text" required
                     value="{{ is_array($settlement->to) && array_key_exists('cart' , $settlement->to) ? $settlement->to['cart'] : '' }}" />

            <x-input type="text" name="amount" placeholder="مبلغ به تومان" class="text" value="{{ $settlement->amount }}" />

            <x-select name="status">
                @foreach (\Webamooz\Payment\Models\Settlement::$statuses as $status)
                    <option value="{{ $status }}">@lang($status)</option>
                @endforeach
            </x-select>

            <div class="row no-gutters border-2 margin-bottom-15 mt-5 text-center">
                <div class="w-50 padding-20 w-50">موجودی قابل برداشت :‌</div>
                <div class="bg-fafafa padding-20 w-50"> {{ number_format($settlement->user->balance) }} تومان </div>
            </div>

            <button type="submit" class="btn btn-webamooz_net">به روزرسانی</button>
        </form>
    </div>
@endsection


//-------------------- resources/views/components/input.blade.php
<div class="w-100 mlg-15">
    <input type="{{ $type }}" name="{{ $name }}" placeholder="{{ $placeholder }}" {{ $attributes->merge(['class' => 'text w-100']) }} value="{{ old($name) }}" >
    <x-validation-error field='{{ str_replace("]" , "" ,str_replace("[" , "." , $name)) }}' />  //برای اینکه در حالت اسم آرایه اینپوت بتونه خطا ها نمایش بده
//from[name]=from.name -> str_replace("]" , '' ,str_replace("[" , "." , $name)) براکت بسته حذف کن در یک ریپلیس دیگه که براکت باز جایگزین نقطه کن در اسم اینپوت
</div>















































//----------------------------------------------------------------------------- Lesson 169 (Settlement request - part 5)
//-------------------- modules/Webamooz/Payment/Http/Controllers/SettlementController.php
public function store(SettlementRequest $request)
{
    SettlementService::store($request);
    return to_route('settlements.index');
}

public function update(SettlementRequest $request, $settlement_id)
{
    SettlementService::update($settlement_id, $request);  //update Settlement + update status
    return to_route('settlements.index');
}



//-------------------- modules/Webamooz/Payment/Service/SettlementService.php
public static function store($data)  //$data === $request
{
    $repo = new SettlementRepositories();
    $repo->store($data);
    auth()->user()->balance -= $data->amount;
    auth()->user()->save();
    Generate::newFeedback();
}

public static function update(int $settlement_id, $data)  //$data === $request
{
    $repo = new SettlementRepositories();
    $settlement = $repo->findById($settlement_id);

    //وضعیت درون دیتابیس نباید رد شده یا کنسل باشد که دوباره بیاد پول بریزه به حساب میتونه در حال انتظار باشد که بزنیم رد یا لغو پول ی بار برگشت بزنه
    if (!in_array($settlement->status, [Settlement::STATUS_CANCELED, Settlement::STATUS_REJECTED]) &&
        in_array($data->status, [Settlement::STATUS_CANCELED, Settlement::STATUS_REJECTED])) {  //needle(سوزن)  haystack(انبار کاه)
        $settlement->user->balance += $settlement->amount;  //اگر کنسل یا رد شد بیا اون مقدار پولی که مدرس درخواست داده بود برگردون به حساب کیف پولش
        $settlement->user->save();
    }

    //اگر در حالت درخواست تسویه مقدار پول درخواستی کم میکنه و در حالت در حال انتظار که یا بکنیم تسویه شده همون عدد میمونه پولی کم و زیاد نمیشه
    // اگر لغو یا رد باش بکنیم تسویه یا در حال انتظار میاد از حساب مدرس کم میکنه
    if (in_array($settlement->status, [Settlement::STATUS_CANCELED, Settlement::STATUS_REJECTED]) &&
        in_array($data->status, [Settlement::STATUS_SETTLED, Settlement::STATUS_PENDING])) {
        $settlement->user->balance -= $settlement->amount;
        $settlement->user->save();
    }

    $repo->update($settlement_id, $data);
    Generate::newFeedback();
}




//-------------------- modules/Webamooz/Payment/Models/Settlement.php
public function user()
{
    return $this->belongsTo(User::class, 'user_id');
}

public function getStatusCssColor()
{
    if ($this->status == Settlement::STATUS_SETTLED) return 'text-success';
    elseif ($this->status == Settlement::STATUS_PENDING) return 'text-warning';
    else return 'text-danger_custom';
}




//-------------------- modules/Webamooz/Payment/Resources/Views/settlements/index.blade.php
<td><a href="" class="{{ $settlement->getStatusCssColor() }}">
    @lang($settlement->status)</a>
</td>
































//------------------------------------------------------------------------------------- Lesson 170 (User full info page)
//-------------------- modules/Webamooz/Payment/Resources/Views/settlements/index.blade.php
<td><a href="{{ route('users.full_info' ,$settlement->user->id) }}">{{ $settlement->user->name }}</a></td>  //کاربر




//-------------------- modules/Webamooz/User/Routes/user_routes.php
Route::get('users/{user}/full_info', [UserController::class, 'fullInfo'])->name('users.full_info');



//-------------------- modules/Webamooz/User/Http/Controllers/UserController.php
public function fullInfo($user_id)
{
    $this->authorize('index', User::class);
    $user = $this->userRepository->findByIdFullInfo($user_id);
    return view('User::Admin.info', compact('user'));
}



//-------------------- modules/Webamooz/User/Repositories/UserRepository.php
public function findByIdFullInfo($user_id)
{
    return User::where('id', $user_id)->with('settlements', 'payments', 'courses', 'purchases')->firstOrFail();
}




//-------------------- modules/Webamooz/User/Resources/Views/Admin/info.blade.php
@extends('Dashboard::master')

@section('title' , 'طلاعات کامل حساب کاربر')
@section('breadcrumb')
    <li><a href="#" title="کاربران">کاربران</a></li>
@endsection

@section('content')

    <div class="row no-gutters">

        <div class="col-12">
            <p class="box__title"> اطلاعات کامل حساب کاربری <strong>{{ $user->name }}</strong></p>
            <div class="margin-left-10 margin-bottom-20 border-radius-3 padding-20 bg-white w-100">
                <ul>
                    <li class="margin-bottom-5"> ایمیل : <strong><a href="mailto:{{ $user->email }}">{{ $user->email }}</a></strong></li>
                    <li class="margin-bottom-5"> نام کاربری : <strong>{{ $user->username }}</strong></li>
                    <li class="margin-bottom-5"> موبایل : <strong>{{ $user->mobile }}</strong></li>
                    <li class="margin-bottom-5"> عنوان : <strong>{{ $user->head_line }}</strong></li>
                    <li class="margin-bottom-5"> بیو : <strong>{{ $user->bio }}</strong></li>
                    <li class="margin-bottom-5"> شماره کارت : <strong>{{ $user->card_number }}</strong></li>
                    <li class="margin-bottom-5"> شبا : <strong>{{ $user->sheba }}</strong></li>
                    <li class="margin-bottom-5"> موجودی حساب : <strong>{{ number_format($user->balance) }}</strong></li>
                    <li class="margin-bottom-5"> تلگرام : <strong>{{ $user->telegram }}</strong></li>
                    <li class="margin-bottom-5"> تاریخ تایید ایمیل :
                        <strong>{{ $user->email_verified_at ? \Morilog\Jalali\Jalalian::fromCarbon($user->email_verified_at) : 'تایید نشده' }}</strong></li>
                </ul>
            </div>
        </div>

        {{----- Purchases -----}}
        <div class="col-6 margin-left-10 margin-bottom-20 border-radius-3">
            <p class="box__title text-center">دوره های خریداری شده</p>
            <div class="table__box">
                <table class="table">
                    <thead role="rowgroup">
                    <tr role="row" class="title-row">
                        <th>شناسه</th>
                        <th>دوره</th>
                        <th>مبلغ پرداخت شده</th>
                        <th>تاریخ</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($user->purchases as $index => $purchase)
                        <tr role="row" class="">
                            <td>{{ $purchase->id }}</td>
                            <td><a href="{{ $purchase->path() }}" class="text-info_custom">{{ $purchase->title }}</a></td>
                            <td>{{ number_format($purchase->payment()->amount) }}</td>
                            <td>{{ \Morilog\Jalali\Jalalian::fromCarbon($purchase->created_at) }}</td>
                        </tr>
                    @endforeach
                    </tbody>
                </table>
            </div>
        </div>

        {{----- Courses -----}}
        <div class="col-6 margin-bottom-20 border-radius-3">
            <p class="box__title text-center">دوره های در حال تدریس</p>
            <div class="table__box">
                <table class="table">
                    <thead role="rowgroup">
                    <tr role="row" class="title-row">
                        <th>شناسه</th>
                        <th>دوره</th>
                        <th>مبلغ</th>
                        <th>وضعیت</th>
                        <th>تاریخ</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($user->courses as $index => $course)
                        <tr role="row" class="">
                            <td>{{ $course->id }}</td>
                            <td><a href="{{ $course->path() }}" class="text-info_custom">{{ $course->title }}</a></td>
                            <td>{{ $course->price == 0 ? 'رایگان' : number_format($course->price) }}</td>
                            <td>@lang($course->status)</td>
                            <td>{{ \Morilog\Jalali\Jalalian::fromCarbon($course->created_at) }}</td>
                        </tr>
                    @endforeach
                    </tbody>
                </table>
            </div>
        </div>

        {{----- Payments -----}}
        <div class="col-6 margin-left-10 margin-bottom-20 border-radius-3">
            <p class="box__title text-center">پرداخت ها</p>
            <div class="table__box">
                <table class="table">
                    <thead role="rowgroup">
                    <tr role="row" class="title-row">
                        <th>شناسه</th>
                        <th>محصول</th>
                        <th>مبلغ پرداخت</th>
                        <th>وضعیت</th>
                        <th>تاریخ</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($user->payments as $index => $payment)
                        <tr role="row" class="">
                            <td>{{ $payment->id }}</td>
                            <td><a href="{{ $payment->paymentable->path() }}" class="text-info_custom">{{ $payment->paymentable->title }}</a></td>
                            <td>{{ number_format($payment->amount) }}</td>
                            <td>@lang($payment->status)</td>
                            <td>{{ \Morilog\Jalali\Jalalian::fromCarbon($payment->created_at) }}</td>
                        </tr>
                    @endforeach
                    </tbody>
                </table>
            </div>
        </div>


        {{----- Settlements -----}}
        <div class="col-6 margin-bottom-20 border-radius-3">
            <p class="box__title text-center">درخواست های تسویه</p>
            <div class="table__box">
                <table class="table">
                    <thead role="rowgroup">
                    <tr role="row" class="title-row">
                        <th>شناسه</th>
                        <th>مبلغ پرداخت</th>
                        <th>وضعیت</th>
                        <th>تاریخ</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($user->settlements as $index => $settlement)
                        <tr role="row" class="">
                            <td>{{ $settlement->id }}</td>
                            <td>{{ number_format($settlement->amount) }}</td>
                            <td>@lang($settlement->status)</td>
                            <td>{{ \Morilog\Jalali\Jalalian::fromCarbon($settlement->created_at) }}</td>
                        </tr>
                    @endforeach
                    </tbody>
                </table>
            </div>
        </div>


    </div>
@endsection

@section('js')
    <script>
        @includeIf('Common::layouts.feedbacks')  {{-- show session flash --}}
    </script>
@endsection







































//-------------------------------------------------------------------------- Lesson 171 (Some improvment for settlemets)
//-------------------- modules/Webamooz/Payment/Http/Requests/SettlementRequest.php
public function rules()
{
    $min = 10000;
    if (request()->method() == 'PATCH') {  //request()->getMethod() == 'PATCH
        return [
            'from.name' => "required_if:status," . Settlement::STATUS_SETTLED,  //from[name] + from[cart] -> اگر وضعیت تسویه شده باشد باید حتما پر بشن و واجب
            'from.cart' => "required_if:status," . Settlement::STATUS_SETTLED,
            'to.name' => "required_if:status," . Settlement::STATUS_SETTLED,  //وضعیت اسم و کارت گیرنده اجباری وقتی وضعیت روی تسویه شده + ?required_if:column,when
            'to.cart' => "required_if:status," . Settlement::STATUS_SETTLED,
            'amount' => "required|integer|min:$min",
        ];
    }

    return [
        'name' => 'required|max:255',
        'cart' => 'required|numeric|digits:16',
        'amount' => "required|integer|min:$min|max:" . auth()->user()->balance,  //حداکثر تا مقدار حساب من میتونه برداشت کنه نه بیشتر
    ];
}






//-------------------- modules/Webamooz/Payment/Service/SettlementService.php
public static function update(int $settlement_id, $data)  //$data === $request
{
    $repo = new SettlementRepositories();
    $settlement = $repo->findById($settlement_id);

    //وضعیت درون دیتابیس نباید رد شده یا کنسل باشد که دوباره بیاد پول بریزه به حساب میتونه در حال انتظار باشد که بزنیم رد یا لغو پول ی بار برگشت بزنه
    if (!in_array($settlement->status, [Settlement::STATUS_CANCELED, Settlement::STATUS_REJECTED]) &&
        in_array($data->status, [Settlement::STATUS_CANCELED, Settlement::STATUS_REJECTED])) {  //needle(سوزن)  haystack(انبار کاه)
        $settlement->user->balance += $settlement->amount;  //اگر کنسل یا رد شد بیا اون مقدار پولی که مدرس درخواست داده بود برگردون به حساب کیف پولش
        $settlement->user->save();
    }

    if ($settlement->user->balanace < $settlement->amount) {//وقتی وضعیت لغو یا رد و موجودی کاربر صفر و میخوایم تایید یا در حال انتظار بکنیم این میاد مقدار مبلغ تسویه کم میکنه که منفی میشیم
        Generate::newFeedback("ناموفق", "موجودی حساب کاربر کافی نمی باشد", "error");
        return to_route('settlements.index');
    }

    //اگر در حالت درخواست تسویه مقدار پول درخواستی کم میکنه و در حالت در حال انتظار که یا بکنیم تسویه شده همون عدد میمونه پولی کم و زیاد نمیشه
    // اگر لغو یا رد باش بکنیم تسویه یا در حال انتظار میاد از حساب مدرس کم میکنه
    if (in_array($settlement->status, [Settlement::STATUS_CANCELED, Settlement::STATUS_REJECTED]) &&
        in_array($data->status, [Settlement::STATUS_SETTLED, Settlement::STATUS_PENDING])) {
        $settlement->user->balance -= $settlement->amount;
        $settlement->user->save();
    }

    $repo->update($settlement_id, $data);
    Generate::newFeedback();
}

































//---------------------------------------------------------------------------------------- Lesson 172 (Untitled Project)
//-------------------- modules/Webamooz/Payment/Http/Controllers/SettlementController.php
public function create()
{
    if ($this->settlementRepo->getLastPendingSettlement(auth()->id())) {  //آخرین مقدار وضعیت در حال انتظار کاربر پیدا کن اگر وجود داشت نتونه درخواست جدیدی ارسال کنه
        Generate::newFeedback('ناموفق', 'شما یک در خواست تسویه در حال انتظار دارد، و نمیتوانید در خواست جدیدی فعلا ثبت کنید', 'error');
        return to_route('settlements.index');
    }
    return view("Payment::settlements.create");
}

public function store(SettlementRequest $request)
{
    if ($this->settlementRepo->getLastPendingSettlement(auth()->id())) {  //آخرین مقدار وضعیت در حال انتظار کاربر پیدا کن اگر وجود داشت نتونه درخواست جدیدی ارسال کنه
        Generate::newFeedback('ناموفق', 'شما یک در خواست تسویه در حال انتظار دارد، و نمیتوانید در خواست جدیدی فعلا ثبت کنید', 'error');
        return to_route('settlements.index');
    }
    SettlementService::store($request);
    return to_route('settlements.index');
}

public function edit($settlement_id)
{
    $requestSettlement = $this->settlementRepo->findById($settlement_id);
    $settlement = $this->settlementRepo->getLastSettlement($requestSettlement->user_id);  //بتونه آخرین درخواست خودش ویرایش کنه ما بقی نتونه
    if ($settlement->id != $settlement_id) {  //آیدی آخرین درخواست کاربر مساوی نبود با همون درخواست و روی درخواست دیگری دکمه ویرایش کلیک کرده بود
        Generate::newFeedback('ناموفق', 'این درخواست تسویه قابل ویرایش نیست و بایگانی شده است. فقط آخرین درخواست تسویه هر کاربر قابل ویرایش است.', 'error');
        return to_route('settlements.index');
    }
    return view("Payment::settlements.edit", compact('settlement'));
}

public function update(SettlementRequest $request, $settlement_id)
{
    $requestSettlement = $this->settlementRepo->findById($settlement_id);
    $settlement = $this->settlementRepo->getLastSettlement($requestSettlement->user_id);  //بتونه آخرین درخواست خودش ویرایش کنه ما بقی نتونه
    if ($settlement->id != $settlement_id) {  //آیدی آخرین درخواست کاربر مساوی نبود با همون درخواست و روی درخواست دیگری دکمه ویرایش کلیک کرده بود
        Generate::newFeedback('ناموفق', 'این درخواست تسویه قابل ویرایش نیست و بایگانی شده است. فقط آخرین درخواست تسویه هر کاربر قابل ویرایش است.', 'error');
        return to_route('settlements.index');
    }
    SettlementService::update($settlement_id, $request);  //update Settlement + update status
    return to_route('settlements.index');
}






//-------------------- modules/Webamooz/Payment/Repositories/SettlementRepositories.php
public function getLastPendingSettlement($user_id)  //آخرین مقدار وضعیت در حال انتظار کاربر پیدا کن اگر وجود داشت نتونه درخواست جدیدی ارسال کنه
{
    return Settlement::query()->where('user_id' , $user_id)->where('status' , Settlement::STATUS_PENDING)->latest()->first();
}

public function getLastSettlement($user_id)  //بتونه آخرین درخواست خودش ویرایش کنه ما بقی نتونه
{
    return Settlement::query()->where('user_id' , $user_id)->latest()->first();
}







































//---------------------------------------------------------------------------------- Lesson 173 (Policy for settlements)
1) php artisan make:policy SettlementPolicy
2) php artisan db:seed  --class=Webamooz\RolePermissions\Database\Seeders\RolePermissionTableSeeder



//-------------------- modules/Webamooz/Payment/Providers/PaymentServiceProvider.php
public function register()
{
    \Gate::policy(Settlement::class, SettlementPolicy::class);  //1)Model::class  2)Policy::class
}

public function boot()
{
    config()->set('sidebar.items.settlements', [
        'icon' => 'i-checkouts',
        'title' => 'تسویه حساب ها',
        'url' => route('settlements.index'),
        'permission' => [
            Permission::PERMISSION_MANAGE_SETTLEMENTS,
            Permission::PERMISSION_TEACH,
        ]
    ]);
    config()->set('sidebar.items.settlements_create', [
        'icon' => 'i-checkout__request',
        'title' => 'درخواست تسویه',
        'url' => route('settlements.create'),
        'permission' => [
            Permission::PERMISSION_TEACH,
        ]
    ]);
}




//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
const PERMISSION_MANAGE_CATEGORIES = 'manage categories';
const PERMISSION_MANAGE_COURSES = 'manage courses';
const PERMISSION_MANAGE_USERS = 'manage users';
const PERMISSION_MANAGE_OWN_COURSES = 'manage own courses';  //دوره های خودش مدیریت بکنه
const PERMISSION_MANAGE_ROLE_PERMISSION = 'manage role_permissions';
const PERMISSION_MANAGE_PAYMENTS = 'manage payments';
const PERMISSION_MANAGE_SETTLEMENTS = 'manage settlements';
const PERMISSION_TEACH = 'teach';
const PERMISSION_SUPER_ADMIN = 'super admin';

public static array $permissions = [  //نمایش لیست بعد سیدر در ویو
    self::PERMISSION_SUPER_ADMIN,
    self::PERMISSION_TEACH,
    self::PERMISSION_MANAGE_CATEGORIES,
    self::PERMISSION_MANAGE_ROLE_PERMISSION,
    self::PERMISSION_MANAGE_COURSES,
    self::PERMISSION_MANAGE_OWN_COURSES,
    self::PERMISSION_MANAGE_USERS,
    self::PERMISSION_MANAGE_PAYMENTS,
    self::PERMISSION_MANAGE_SETTLEMENTS,
];




//-------------------- modules/Webamooz/Payment/Http/Controllers/SettlementController.php
public function index()
{
    $this->authorize('index', Settlement::class);  //permission TEACHER
//  if (auth()->user()->hasAnyPermission([Permission::PERMISSION_MANAGE_SETTLEMENTS ,Permission::PERMISSION_SUPER_ADMIN])) {  //hasPermissionTo -> Gate::before(نمیاد چک کنه که سوپر ادمین)
    if (auth()->user()->can(Permission::PERMISSION_MANAGE_SETTLEMENTS)) {  //can -> Gate::before(میاد چک میکنه که سوپر ادمین)
        $settlements = $this->settlementRepo->paginate(12);
    } else {
        $settlements = $this->settlementRepo->paginateUserSettlements(12, auth()->user()->id);
    }
    return view('Payment::settlements.index', compact('settlements'));
}

public function create()
{
    if (auth()->user()->hasPermissionTo(Permission::PERMISSION_TEACH)) {
//  $this->authorize('store', Settlement::class);  //permission TEACHER

        if ($this->settlementRepo->getLastPendingSettlement(auth()->id())) {  //آخرین مقدار وضعیت در حال انتظار کاربر پیدا کن اگر وجود داشت نتونه درخواست جدیدی ارسال کنه
            Generate::newFeedback('ناموفق', 'شما یک در خواست تسویه در حال انتظار دارد، و نمیتوانید در خواست جدیدی فعلا ثبت کنید', 'error');
            return to_route('settlements.index');
        }
        return view("Payment::settlements.create");
    } else {
        Generate::newFeedback("اطلاعات", "شما مدیر سایت هستید، و لازم به درخواست تسویه حساب ندارید :)", "info");
        return to_route('settlements.index');
    }
}

public function store(SettlementRequest $request)
{
    if (auth()->user()->hasPermissionTo(Permission::PERMISSION_TEACH)) {
//  $this->authorize('store', Settlement::class);  //permission TEACHER

        if ($this->settlementRepo->getLastPendingSettlement(auth()->id())) {  //آخرین مقدار وضعیت در حال انتظار کاربر پیدا کن اگر وجود داشت نتونه درخواست جدیدی ارسال کنه
            Generate::newFeedback('ناموفق', 'شما یک در خواست تسویه در حال انتظار دارد، و نمیتوانید در خواست جدیدی فعلا ثبت کنید', 'error');
            return to_route('settlements.index');
        }
        SettlementService::store($request);
        return to_route('settlements.index');
    } else {
        Generate::newFeedback("اطلاعات", "شما مدیر سایت هستید، و لازم به درخواست تسویه حساب ندارید :)", "info");
        return to_route('settlements.index');
    }
}

public function edit($settlement_id)
{
    $this->authorize('manage', Settlement::class);  //permission SETTLEMENT
    $requestSettlement = $this->settlementRepo->findById($settlement_id);
    $settlement = $this->settlementRepo->getLastSettlement($requestSettlement->user_id);  //بتونه آخرین درخواست خودش ویرایش کنه ما بقی نتونه
    if ($settlement->id != $settlement_id) {  //آیدی آخرین درخواست کاربر مساوی نبود با همون درخواست و روی درخواست دیگری دکمه ویرایش کلیک کرده بود
        Generate::newFeedback('ناموفق', 'این درخواست تسویه قابل ویرایش نیست و بایگانی شده است. فقط آخرین درخواست تسویه هر کاربر قابل ویرایش است.', 'error');
        return to_route('settlements.index');
    }
    return view("Payment::settlements.edit", compact('settlement'));
//
}

public function update(SettlementRequest $request, $settlement_id)
{
    $this->authorize('manage', Settlement::class);  //permission SETTLEMENT
    $requestSettlement = $this->settlementRepo->findById($settlement_id);
    $settlement = $this->settlementRepo->getLastSettlement($requestSettlement->user_id);  //بتونه آخرین درخواست خودش ویرایش کنه ما بقی نتونه
    if ($settlement->id != $settlement_id) {  //آیدی آخرین درخواست کاربر مساوی نبود با همون درخواست و روی درخواست دیگری دکمه ویرایش کلیک کرده بود
        Generate::newFeedback('ناموفق', 'این درخواست تسویه قابل ویرایش نیست و بایگانی شده است. فقط آخرین درخواست تسویه هر کاربر قابل ویرایش است.', 'error');
        return to_route('settlements.index');
    }
    SettlementService::update($settlement_id, $request);  //update Settlement + update status
    return to_route('settlements.index');
}







//-------------------- modules/Webamooz/Payment/Policies/SettlementPolicy.php
public function index($user)
{
    if ($user->hasAnyPermission([Permission::PERMISSION_MANAGE_SETTLEMENTS, Permission::PERMISSION_TEACH])) return true;
    return null;
}

public function manage($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_SETTLEMENTS)) return true;
    return null;
}

public function store($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_TEACH)) return true;
    return null;
}





//-------------------- modules/Webamooz/Payment/Resources/Views/settlements/index.blade.php
    @can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_SETTLEMENTS)
        <th>عملیات</th>
    @endcan
</tr>
</thead>
<tbody>
@foreach($settlements as $settlement)
    <tr role="row">
        </td>
            @can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_SETTLEMENTS)
            <td>
                <a href="{{ route('settlements.edit' , $settlement->id) }}" class="item-edit btn_info_customize mlg-15 " title="ویرایش"></a>
            </td>
        @endcan
    </tr>
@endforeach





































//--------------------------------------------------------------------------------- Lesson 174 (Initial discount module)
1) php artisan make:model Discount -m
2) php artisan db:seed  --class=Webamooz\RolePermissions\Database\Seeders\RolePermissionTableSeeder




//-------------------- composer.json
"autoload": {
    "psr-4": {
        "Webamooz\\Discount\\" : "modules/Webamooz/Discount/",
    }
},




//-------------------- config/app.php
\Webamooz\Discount\Providers\DiscountServiceProvider::class,






//-------------------- modules/Webamooz/Discount/Providers/DiscountServiceProvider.php
private string $namespace = "Webamooz\Discount\Http\Controllers";

public function register()
{
    Route::middleware(['web'])->namespace($this->namespace)->group(__DIR__ . '/../Routes/discount_routes.php');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Discounts');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
}

public function boot()
{
    config()->set('sidebar.items.discounts', [
        "icon" => "i-discounts",
        "title" => "تخفیف ها",
        "url" => route('discounts.index'),
        "permissions" => Permission::PERMISSION_MANAGE_DISCOUNT,
    ]);
}







//-------------------- modules/Webamooz/Discount/Routes/discount_routes.php
namespace Webamooz\Discount\Routes;
use Illuminate\Support\Facades\Route;
use Webamooz\Discount\Http\Controllers\DiscountController;

Route::group(["middleware" => "auth"], function ($router) {
    $router->get('/discounts', [
        "uses" => "DiscountController@index",
        "as" => "discounts.index"
    ]);
});






//-------------------- Database/Migrations/2024_08_18_095416_create_discounts_table.php
public function up()
{
    Schema::create('discounts', function (Blueprint $table) {
        $table->id();
        $table->string('code')->nullable();  //کد تخفیف
        $table->foreignId('user_id')->constrained();
        $table->unsignedTinyInteger('percent');  //درصد تخفیف
        $table->unsignedBigInteger('usage_limitation')->nullable();  //تعداد محدودیت افراد برای استفاده از کد تخفیف + میتونه نال باش و نامحدود
        $table->timestamp('expire_at')->nullable();  //تاریخ انقضا + اگر نال بود محدودیت زمانی نداره
        $table->string('link', 300)->nullable();  //لینک اطلاعات بیشتر
        $table->string('description')->nullable();  //توضیحات
        $table->enum('type', [\Webamooz\Discount\Models\Discount::$types])
            ->default(\Webamooz\Discount\Models\Discount::TYPE_ALL);
        $table->unsignedBigInteger('uses')->default(0);  //تا چند نفر تا الان از این کد تخفیف استفاده کردن
        $table->timestamps();
    });

    Schema::create('discountables', function (Blueprint $table) {
        $table->foreignId('discount_id');  //آیدی اون تخفیف
        $table->foreignId('discountable_id');  //آیدی تخفیف برای دوره یا محصول یا ی دسته بندی مثل وب
        $table->string('discountable_type');  //اسم مادل برای تخفیف محصول یا دوره یا ی دسته بندی مثل فرانت اند
        //برای انتخاب پرایمری میاد اسمش میشه نام سه تا ستون که زیاد و خطا میده مای اسکول میایم یک اسم تعریف میکنیم این در حالت آرایه خطا میده نه تکی
        $table->primary(['discount_id', 'discountable_id', 'discountable_type'], 'discountable_key');
    });
}

public function down()
{
    Schema::dropIfExists('discounts');
    Schema::dropIfExists('discountables');
}





//-------------------- modules/Webamooz/Discount/Models/Discount.php
const TYPE_ALL = 'all';
const TYPE_SPECIAL = 'special';
public static array $types = [
    self::TYPE_ALL,
    self::TYPE_SPECIAL,
];

protected $fillable = [
    'user_id',
    'code',
    'percent',
    'usage_limitation',
    'expire_at',
    'link',
    'description',
    'uses',
    'discount_id',
    'discountable_id',
    'discountable_type',
];

protected $casts = [
    "expire_at" => "datetime"
];


public function courses()
{
    return $this->morphedByMany(Course::class, 'discountable');  //discountable = name relation -> Model + able
}








//-------------------- modules/Webamooz/Course/Models/Course.php
public function discounts()
{
    return $this->morphToMany(Discount::class , 'discountable'); //1)Model  2)name relation(discountable) Model + able
}




//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
const PERMISSION_MANAGE_DISCOUNT = 'manage discounts';

public static array $permissions = [  //نمایش لیست بعد سیدر در ویو
    self::PERMISSION_SUPER_ADMIN,
    self::PERMISSION_TEACH,
    self::PERMISSION_MANAGE_DISCOUNT,
];





































//--------------------------------------------------------------------------------------- Lesson 175 (Discounts index 1)
1) URL -> https://github.com/behzadi/persianDatepicker  //Download File Zip
2) Move css,js file in -> public/assets/persianDatePicker




//-------------------- modules/Webamooz/Discount/Http/Controllers/DiscountController.php
public function index(CourseRepository $courseRepo)
{
    $courses = $courseRepo->getAll(Course::CONFIRMATION_STATUS_ACCEPTED);
    return view('Discounts::index', compact('courses'));
}



//-------------------- modules/Webamooz/Course/Repositories/CourseRepository.php
public function getAll(string $status = null)
{
    $query = Course::query();
    if ($status) {  //not null
        return $query->where('confirmation_status', $status)->get();
    }
    return $query->latest()->get();
}



//-------------------- modules/Webamooz/Discount/Resources/Views/index.blade.php
<p class="box__title mt-5">این تخفیف برای</p>
<div class="notificationGroup">
    <input id="discounts-field-1" class="discounts-field-pn" name="discounts-field" type="radio" value="all">
    <label for="discounts-field-1">همه دوره ها</label>
</div>

<div class="notificationGroup">
    <input id="discounts-field-2" class="discounts-field-pn" name="discounts-field" type="radio" value="special">
    <label for="discounts-field-2">دوره خاص</label>
</div>

<select name="">
    @foreach($courses as $course)
        <option value="{{ $course->id }}">{{ $course->title }}</option>
    @endforeach
</select>




































//--------------------------------------------------------------------------------------- Lesson 176 (Discounts index 2)
1) URL -> https://select2.org/getting-started/installation



//-------------------- modules/Webamooz/Discount/Resources/Views/index.blade.php
@extends('Dashboard::master')

@section('title' , 'تخفیف ها')
@section('breadcrumb')
    <li><a href="{{ route('discounts.index') }}" title="تخفیف ها">تخفیف ها</a></li>
@endsection

@section('content')
    <div class="main-content padding-0 discounts">
        <div class="row no-gutters  ">
            <div class="col-8 margin-left-10 margin-bottom-15 border-radius-3">
                <p class="box__title">تخفیف ها</p>
                <div class="table__box">
                    <div class="table-box">
                        <table class="table">
                            <thead role="rowgroup">
                            <tr role="row" class="title-row">
                                <th>شناسه</th>
                                <th>درصد</th>
                                <th>محدودیت زمانی</th>
                                <th>توضیحات</th>
                                <th>استفاده شده</th>
                                <th>عملیات</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr role="row" class="">
                                <td><a href="">1</a></td>
                                <td><a href="">50%</a></td>
                                <td>2 ساعت دیگر</td>
                                <td>مناسبت عید نوروز</td>
                                <td>0 نفر</td>
                                <td>
                                    <a href="" class="item-delete mlg-15"></a>
                                    <a href="edit-discount.html" class="item-edit " title="ویرایش"></a>
                                </td>
                            </tr>

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-4 bg-white">
                <p class="box__title">ایجاد تخفیف جدید</p>
                <form action="" method="post" class="padding-30">

                    <x-input type="text" placeholder="کد تخفیف" name="code" required />
                    <x-input type="number" placeholder="درصد تخفیف" name="percent" required />
                    <x-input type="number" placeholder="محدودیت افراد" name="usage_limitation" />
                    <x-input type="text" placeholder="محدودیت زمانی به ساعت" name="expire_at" id="expire_at" />

                    <p class="box__title mt-5">این تخفیف برای</p>
                    <div class="notificationGroup">
                        <input id="discounts-field-1" class="discounts-field-pn" name="discounts-field" type="radio" value="all">
                        <label for="discounts-field-1">همه دوره ها</label>
                    </div>

                    <div class="notificationGroup">
                        <input id="discounts-field-2" class="discounts-field-pn" name="discounts-field" type="radio" value="special">
                        <label for="discounts-field-2">دوره خاص</label>
                    </div>

                    <div id="selectCourseContainer" class="d-none">
                        <select class="mySelect2" name="courses[]" multiple>
                            @foreach($courses as $course)
                                <option value="{{ $course->id }}">{{ $course->title }}</option>
                            @endforeach
                        </select>
                    </div>

                    <x-input type="text" placeholder="لینک اطلاعات بیشتر" name="link" />
                    <x-input type="text" placeholder="توضیحات" class="margin-bottom-15" name="description" />

                    <button type="submit" class="btn btn-webamooz_net mt-5">اضافه کردن</button>
                </form>
            </div>
        </div>
    </div>
@endsection

@section('css')
    <link type="text/css" rel="stylesheet" href="{{ asset('assets/persianDatePicker/css/persianDatepicker-default.css') }}" />
    <link type="text/css" rel="stylesheet" href="{{ asset('assets/persianDatePicker/css/persianDatepicker-dark.css') }}" />
    <link type="text/css" rel="stylesheet" href="{{ asset('assets/persianDatePicker/css/persianDatepicker-latoja.css') }}" />
    <link type="text/css" rel="stylesheet" href="{{ asset('assets/persianDatePicker/css/persianDatepicker-lightorang.css') }}" />
    <link type="text/css" rel="stylesheet" href="{{ asset('assets/persianDatePicker/css/persianDatepicker-melon.css') }}" />
    <link type="text/css" rel="stylesheet" href="{{ asset('assets/select2/css/selet2.min.css') }}" />
@endsection

@section('js')
    <!----- Persian Date Picker ----->
    <script src="{{ asset('assets/select2/js/select2.min.js') }}"></script>
    <script>
        $('.mySelect2').select2({
            placeholder:"یک یا چند دوره را انتخاب کنید..."
        });
    </script>

    <!----- Persian Date Picker ----->
    <script src="{{ asset('assets/persianDatePicker/js/persianDatepicker.min.js') }}"></script>
    {{----- Use Default Theme With Javascript -----}}
    {{--<script type="text/javascript">
        $(function() {
            $("#expire_at").persianDatepicker();
        });
    </script>--}}
    {{----- Use Other Theme And Customize With JQuery -----}}
    <script>
        $("#expire_at").persianDatepicker({
            months: ["فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند"],
            dowTitle: ["شنبه", "یکشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنج شنبه", "جمعه"],
            shortDowTitle: ["ش", "ی", "د", "س", "چ", "پ", "ج"],
            showGregorianDate: !1,
            persianNumbers: !0,
            formatDate: "YYYY/MM/DD hh:mm",  //default -> "YYYY/MM/DD",
            selectedBefore: !1,
            selectedDate: null,
            startDate: null,
            endDate: null,
            prevArrow: '\u25c4',
            nextArrow: '\u25ba',
            theme: 'dark',
            alwaysShow: !1,
            selectableYears: null,
            selectableMonths: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
            //----- Customize the size
            cellWidth: 28, // by px
            cellHeight: 23, // by px
            fontSize: 14, // by px
            isRTL: !1,
            calendarPosition: {
                x: 0,
                y: 0,
            },
            onShow: function () { },
            onHide: function () { },
            onSelect: function () { },
            onRender: function () { }
        });
    </script>
@endsection




//-------------------- public/panel/js/js.js
$('#discounts-field-1').on('click', function (e) {
    $('#selectCourseContainer').addClass('d-none')
});

$('#discounts-field-2').on('click', function (e) {
    $('#selectCourseContainer').removeClass('d-none')
});
































//------------------------------------------------------------------------------------------ Lesson 177 (Discount store)
1) php artisan make:request DiscountRequest
2) php artisan make:rule ValidJalaliDate
3) ($request->all()->array + $request->object





//-------------------- modules/Webamooz/Discount/Http/Controllers/DiscountController.php
private DiscountRepo $discountRepo;

public function __construct(DiscountRepo $discountRepo)
{
    $this->discountRepo = $discountRepo;
}

public function index(CourseRepository $courseRepo)
{
    $discounts = $this->discountRepo->paginate(12);
    $courses = $courseRepo->getAll(Course::CONFIRMATION_STATUS_ACCEPTED);
    return view('Discounts::index', compact('discounts', 'courses'));
}

public function store(DiscountRequest $request)
{
    $this->discountRepo->store($request->all());  //($request->all()->array  +  $request->object
    Generate::newFeedback();
    return back();
}





//-------------------- modules/Webamooz/Discount/Repositories/DiscountRepo.php
public function paginate($count = 10)
{
    return Discount::query()->latest()->paginate($count);
}

public function store($data)
{
    Discount::create([
        "user_id" => auth()->id(),
        "code" => $data["code"],
        "percent" => $data["percent"],
        "usage_limitation" => $data["usage_limitation"],
        "expire_at" => Jalalian::fromFormat("Y/m/d H:i", $data['expire_at'])->toCarbon(),
        "link" => $data["link"],
        "description" => $data["description"],
        "uses" => 0,  //تعداد افرادی که استفاده کردن از کد تخفیف در حالت ایجاد صفر
    ]);
}





//-------------------- modules/Webamooz/Discount/Http/Requests/DiscountRequest.php
public function rules()
{
    return [
        'code' => ['nullable', 'string', 'max:50', 'unique:discounts,code'],
        'percent' => "required|numeric|min:1|max:100",
        'usage_limitation' => "nullable|numeric|min:1|max:1000000000",
        'expire_at' => ["nullable", new ValidJalaliDate()],
        "courses" => "nullable|array",
        'link' => "nullable|url",
        'description' => "nullable|string",
    ];
}

public function attributes()
{
    return [
        "code" => "کد تخفیف",
        "percent" => "درصد تخفیف",
        "usage_limitation" => "محدودیت افراد",
        "link" => "لینک اطلاعات",
    ];
}





//-------------------- modules/Webamooz/Discount/Rules/ValidJalaliDate.php
public $error;
public function __construct()
{
    //
}

public function passes($attribute, $value)
{
    try {
        Jalalian::fromFormat("Y/m/d H:i:s", $value)->toCarbon();
        return true;

    } catch (\Exception $exception) {
        $this->error = $exception->getMessage() . " - {$value}";
        return false;
    }
}

public function message()
{
    return 'یک تاریخ معتبر شمسی انتخاب کنید' . "({$this->error})";
}



//-------------------- modules/Webamooz/Discount/Models/Discount.php
protected $casts = [
    "expire_at" => "datetime"
];



































//---------------------------------------------------------------------- Lesson 178 (Select special courses for dicount)
//-------------------- modules/Webamooz/Discount/Providers/DiscountServiceProvider.php
public function register()
{
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang/');  //file ترجمه کلممات به صورت جیسون
}



//-------------------- modules/Webamooz/Discount/Database/Migrations/2024_08_18_095416_create_discounts_table.php
table->enum('type', [\Webamooz\Discount\Models\Discount::$types])
    ->default(\Webamooz\Discount\Models\Discount::TYPE_ALL);




//-------------------- modules/Webamooz/Discount/Models/Discount.php
const TYPE_ALL = 'all';
const TYPE_SPECIAL = 'special';
public static array $types = [
    self::TYPE_ALL,
    self::TYPE_SPECIAL,
];




//-------------------- modules/Webamooz/Discount/Repositories/DiscountRepo.php
public function store($data)
{
    $discount = Discount::create([
        "user_id" => auth()->id(),
        "code" => $data["code"],
        "percent" => $data["percent"],
        "usage_limitation" => $data["usage_limitation"],
        "expire_at" => $data['expire_at'] ? Jalalian::fromFormat("Y/m/d H:i", $data['expire_at'])->toCarbon() : null,
        "link" => $data["link"],
        "description" => $data["description"],
        "type" => $data["type"],
        "uses" => 0,  //تعداد افرادی که استفاده کردن از کد تخفیف در حالت ایجاد صفر
    ]);

    if ($discount->type == Discount::TYPE_SPECIAL) {
        $discount->courses()->sync($data['courses']);
    }
}



//-------------------- modules/Webamooz/Discount/Lang/fa.json
{
    "all": "همه دوره ها",
    "special": "دوره های خاص"
}




























//-------------------------------------------------------------------------------- Lesson 179 (Edit and delete discount)
//-------------------- modules/Webamooz/Discount/Routes/discount_routes.php
$router->get('/discounts/{discount}/edit', [DiscountController::class, 'edit'])->name('discounts.edit');
$router->patch('/discounts/{discount}', [DiscountController::class, 'update'])->name('discounts.update');
$router->delete('/discounts/{discount}', [DiscountController::class, 'destroy'])->name('discounts.destroy');




//-------------------- modules/Webamooz/Discount/Resources/Views/index.blade.php
<td>
    <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
       onclick="deleteItem(event , '{{ route('discounts.destroy' , $discount->id) }}')"></a>
    <a href="{{ route('discounts.edit' , $discount->id) }}" class="item-edit btn_info_customize mlg-15" title="ویرایش"></a>
</td>





//-------------------- modules/Webamooz/Discount/Http/Controllers/DiscountController.php
public function edit(Discount $discount, CourseRepository $courseRepo)
{
    $courses = $courseRepo->getAll(Course::CONFIRMATION_STATUS_ACCEPTED);
    return view("Discounts::edit", compact('discount', 'courses'));
}

public function update(DiscountRequest $request, Discount $discount)
{
    $this->discountRepo->update($discount, $request->all());
    Generate::newFeedback();
    return to_route('discounts.index');
}

public function destroy(Discount $discount)
{
    $discount->delete();
    return AjaxResponses::successResponse("تخفیف با موفقیت حذف شد");
}







//-------------------- modules/Webamooz/Discount/Repositories/DiscountRepo.php
public function update($discount, array $data)
{
    Discount::query()->where('id' , $discount->id)->update([
        "code" => $data["code"],
        "percent" => $data["percent"],
        "usage_limitation" => $data["usage_limitation"],
        "expire_at" => $data['expire_at'] ? Jalalian::fromFormat("Y/m/d H:i:s", $data['expire_at'])->toCarbon() : null,
        "link" => $data["link"],
        "description" => $data["description"],
        "type" => $data["type"],
    ]);
    if ($discount->type == Discount::TYPE_SPECIAL) {
        $discount->courses()->sync($data['courses']);
    }else {
        $discount->courses()->sync([]);  //اگر حالت دوره ویژه تبدیل کرد به همه دوره ها بیا مقدار های جدول واسط حذف کن یا آرایه خالی
    }
}




//-------------------- modules/Webamooz/Discount/Http/Requests/DiscountRequest.php
public function rules()
{
    $rules = [
        'code' => ['nullable', 'string', 'max:50', 'unique:discounts,code'],
        'percent' => "required|numeric|min:1|max:100",
        'usage_limitation' => "nullable|numeric|min:1|max:1000000000",
        'expire_at' => ["nullable", new ValidJalaliDate()],
        "courses" => "nullable|array",
        'link' => "nullable|url",
        'description' => "nullable|string",
        'type' => "nullable",
    ];

    if (request()->method() == 'PATCH') {  //request()->getMethod() == 'PATCH
        //request()->route('course') -> categories/{category} -> میاد میره درون روت و پارامتری که هست یا همون آیدی میگره میگه غیر این آیدی
        $rules['code'] = ['nullable', 'string', 'max:50', 'unique:discounts,code,' . request()->route('discount')->id];
    }

    return $rules;
}

public function attributes()
{
    return [
        "code" => "کد تخفیف",
        "percent" => "درصد تخفیف",
        "usage_limitation" => "محدودیت افراد",
        "link" => "لینک اطلاعات",
    ];
}







//-------------------- modules/Webamooz/Discount/Resources/Views/edit.blade.php
@extends('Dashboard::master')

@section('title' , 'ویرایش تخفیف')
@section('breadcrumb')
    <li><a href="{{ route('discounts.index') }}" title="تخفیف ها">تخفیف ها</a></li>
    <li><a href="{{ route('discounts.edit' , $discount->id) }}" title="ویرایش تخفیف">ویرایش تخفیف</a></li>
@endsection

@section('content')
    <div class="main-content padding-0 discounts">
        <div class="row no-gutters  ">
            <div class="col-6 offset-3 bg-white margin_auto">
                <p class="box__title">ویرایش کد تخفیف</p>
                <form action="{{ route('discounts.update' , $discount->id) }}" method="post" class="padding-30">
                    @csrf
                    @method('PATCH')

                    <x-input type="text" placeholder="کد تخفیف" name="code" value="{{ $discount->code }}"/>
                    <x-input type="number" placeholder="درصد تخفیف" name="percent" required  value="{{ $discount->percent }}"/>
                    <x-input type="number" placeholder="محدودیت افراد" name="usage_limitation"  value="{{ $discount->usage_limitation }}"/>
                    <x-input type="text" placeholder="محدودیت زمانی به ساعت" name="expire_at" id="expire_at"
                             value="{{ $discount->expire_at ? str_replace('-' , '/' ,\App\Helper\Generate::createFromCarbon($discount->expire_at)) : null }}"/>

                    <p class="box__title mt-5">این تخفیف برای</p>
                    <div class="notificationGroup">
                        <input id="discounts-field-1" class="discounts-field-pn" name="type" type="radio" value="all"
                               @if($discount->type == \Webamooz\Discount\Models\Discount::TYPE_ALL) checked @endif>
                        <label for="discounts-field-1">همه دوره ها</label>
                    </div>

                    <div class="notificationGroup">
                        <input id="discounts-field-2" class="discounts-field-pn" name="type" type="radio" value="special"
                        @if($discount->type == \Webamooz\Discount\Models\Discount::TYPE_SPECIAL) checked @endif>
                        <label for="discounts-field-2">دوره خاص</label>
                    </div>

                    <div id="selectCourseContainer" class="{{ $discount->type == \Webamooz\Discount\Models\Discount::TYPE_ALL ? 'd-none' : '' }}" >
                        <select class="mySelect2" name="courses[]" multiple>
                            @foreach($courses as $course)
                                <option {{ $discount->courses->contains($course->id) ? 'selected' : '' }} value="{{ $course->id }}">{{ $course->title }}</option>
                            @endforeach
                        </select>
                    </div>

                    <x-input type="text" placeholder="لینک اطلاعات بیشتر" name="link" value="{{ $discount->link }}"/>
                    <x-input type="text" placeholder="توضیحات" class="margin-bottom-15" name="description" value="{{ $discount->description }}"/>

                    <button type="submit" class="btn btn-webamooz_net mt-5">به روزرسانی</button>
                </form>
            </div>
        </div>
    </div>
@endsection

@section('css')
    <link type="text/css" rel="stylesheet"
          href="{{ asset('assets/persianDatePicker/css/persianDatepicker-default.css') }}"/>
    <link type="text/css" rel="stylesheet"
          href="{{ asset('assets/persianDatePicker/css/persianDatepicker-dark.css') }}"/>
    <link type="text/css" rel="stylesheet"
          href="{{ asset('assets/persianDatePicker/css/persianDatepicker-latoja.css') }}"/>
    <link type="text/css" rel="stylesheet"
          href="{{ asset('assets/persianDatePicker/css/persianDatepicker-lightorang.css') }}"/>
    <link type="text/css" rel="stylesheet"
          href="{{ asset('assets/persianDatePicker/css/persianDatepicker-melon.css') }}"/>
    <link type="text/css" rel="stylesheet" href="{{ asset('assets/select2/css/selet2.min.css') }}"/>
@endsection

@section('js')
    <!----- Persian Date Picker ----->
    <script src="{{ asset('assets/select2/js/select2.min.js') }}"></script>
    <script>
        $('.mySelect2').select2({
            placeholder: "یک یا چند دوره را انتخاب کنید..."
        });
    </script>

    <!----- Persian Date Picker ----->
    <script src="{{ asset('assets/persianDatePicker/js/persianDatepicker.min.js') }}"></script>
    {{----- Use Default Theme With Javascript -----}}
    {{--<script type="text/javascript">
        $(function() {
            $("#expire_at").persianDatepicker({
                formatDate: "YYYY/MM/DD hh:mm",
            });
        });
    </script>--}}
    {{----- Use Other Theme And Customize With JQuery -----}}
    <script>
        $("#expire_at").persianDatepicker({
            months: ["فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند"],
            dowTitle: ["شنبه", "یکشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنج شنبه", "جمعه"],
            shortDowTitle: ["ش", "ی", "د", "س", "چ", "پ", "ج"],
            showGregorianDate: !1,
            persianNumbers: !0,
            formatDate: "YYYY/0M/DD hh:mm:ss",  //رقم ماه به صورت دو رقمی کامل مشخص شود <- 0M
            selectedBefore: !1,
            selectedDate: null,
            startDate: null,
            endDate: null,
            prevArrow: '\u25c4',
            nextArrow: '\u25ba',
            theme: 'dark',
            alwaysShow: !1,
            selectableYears: null,
            selectableMonths: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
            //----- Customize the size
            cellWidth: 28, // by px
            cellHeight: 23, // by px
            fontSize: 14, // by px
            isRTL: !1,
            calendarPosition: {
                x: 0,
                y: 0,
            },
            onShow: function () {
            },
            onHide: function () {
            },
            onSelect: function () {
            },
            onRender: function () {
            }
        });
    </script>
@endsection
































//------------------------------------------------------------------------------------ Lesson 180 (Policy for discounts)
1) php artisan make:policy DiscountPolicy



//-------------------- modules/Webamooz/Discount/Providers/DiscountServiceProvider.php
public function register()
{
    Route::middleware(['web'])->namespace($this->namespace)->group(__DIR__ . '/../Routes/discount_routes.php');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Discounts');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang/');  //file ترجمه کلممات به صورت جیسون
    Gate::policy(Discount::class, DiscountPolicy::class);  //Model::class , ModelPolicy::class
}




//-------------------- modules/Webamooz/Discount/Http/Controllers/DiscountController.php
public function index(CourseRepository $courseRepo)
{
    $this->authorize('manage', Discount::class);
    $discounts = $this->discountRepo->paginate(12);
    $courses = $courseRepo->getAll(Course::CONFIRMATION_STATUS_ACCEPTED);
    return view('Discounts::index', compact('discounts', 'courses'));
}

public function store(DiscountRequest $request)
{
    $this->authorize('manage', Discount::class);
    $this->discountRepo->store($request->all());  //($request->all()->array  +  $request->object
    Generate::newFeedback();
    return back();
}

public function edit(Discount $discount, CourseRepository $courseRepo)
{
    $this->authorize('manage', Discount::class);
    $courses = $courseRepo->getAll(Course::CONFIRMATION_STATUS_ACCEPTED);
    return view("Discounts::edit", compact('discount', 'courses'));
}

public function update(DiscountRequest $request, Discount $discount)
{
    $this->authorize('manage', Discount::class);
    $this->discountRepo->update($discount, $request->all());
    Generate::newFeedback();
    return to_route('discounts.index');
}

public function destroy(Discount $discount)
{
    $this->authorize('manage', Discount::class);
    $discount->delete();
    return AjaxResponses::successResponse("تخفیف با موفقیت حذف شد");
}




//-------------------- modules/Webamooz/Discount/Policies/DiscountPolicy.php
public function manage($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_DISCOUNT)) return true;  //hasAnyPermission->array
    return null;
}




























//---------------------------------------------------------------------------------------- Lesson 181 (Untitled Project)
//-------------------- modules/Webamooz/Course/Models/Course.php
public function getDiscountPercent()  //discount price course -> چند درصد تخفیف داره
{
    $discountRepo = new DiscountRepo();
    $percent = 0;
    $SpecificDiscount = $discountRepo->getCourseBiggerDiscount($this->id);
    if ($SpecificDiscount) $percent = $SpecificDiscount->percent;

    $globalDiscount = $discountRepo->getGlobalBiggerDiscount();
    if ($globalDiscount && $globalDiscount->percent > $percent) $percent = $globalDiscount->percent;
    return $percent;
    //اگر تخفیف روی همه وجود داشت و بزرگتر از تخفیف در حالت خاص که اونم اگر وجود داشت بود بیا این تخفیف روی همه انتخاب کن
}

public function getDiscountAmount()  //discount amount -> چه قدر تخفیف داره تا الان
{
    return $this->price * ((float)('0.' . $this->getDiscountPercent()));  //1,000,000 * 0.18 = 180,000
}

public function getFinalPrice()
{
    return $this->price - $this->getDiscountAmount();
}



//-------------------- modules/Webamooz/Front/Resources/Views/layouts/singleCourseBox.blade.php
<div class="col">
    <a href="{{ $courseItem->path() }}">
        <div class="course-status">@lang($courseItem->status)</div>
        @if ($courseItem->getDiscountPercent() && $courseItem->price > 0)
            <div class="discountBadge"><p>{{ $courseItem->getDiscountPercent() }}%</p>تخفیف</div>
        @endif
        <div class="card-img"><img src="{{ $courseItem->media->thumb }}" alt="{{ $courseItem->title }}"></div>
        <div class="card-title"><h2>{{ $courseItem->title }}</h2></div>
        <div class="card-body">
            <img src="{{ $courseItem->teacher->thumb }}" alt="{{ $courseItem->teacher->name }}">
            <span>{{ $courseItem->teacher->name }}</span>
        </div>
        <div class="card-details">
            <div class="time">{{ $courseItem->formattedDurationTimeLesson() }}</div>
            <div class="price">
                @if ($courseItem->getDiscountPercent() && $courseItem->price > 0)
                    <div class="discountPrice">{{ number_format($courseItem->price) }}</div>
                @endif

                @if ($courseItem->price == 0)
                    <div class="endPrice">رایگان</div>
                @else
                    <div class="endPrice">{{ number_format($courseItem->getFinalPrice()) }}</div>
                @endif
            </div>
        </div>
    </a>
</div>





//-------------------- modules/Webamooz/Discount/Repositories/DiscountRepo.php
public function getValidDiscountQuery($type, $course_id = null)
{
    $query = Discount::query()
        ->where('type', $type)
        ->where('expire_at', '>', now());  //تاریخ انتضا مثلا برای 7 روز دیگ و باید بزرگتر از تاریخ الان باشد

    if ($course_id) $query->whereHas('courses', function ($q) use ($course_id) {
        $q->where('id', $course_id);  //Course ->where('id' , $course_id) -> میره توی ریلیشن تخففیف و جدول واسط اونایی که آیدی دوره خاص انتخاب کردیم میگیره با آیدی دوره مقایسه
    });

    $query->where(function ($query) {
        $query->where("usage_limitation", ">", "0")  //یا نال باش تعداد نامحدود + یا تعداد محدود بزگتر از صفر باشن بتونن نمایش بده
        ->orWhereNull("usage_limitation");  //این شرط اگر وجود داشته باشد میاد شرط بالایی فقط خنثی میکنه و روی بقیه تاثیری نداره
    })->orderByDesc("percent");
    return $query;
}

public function getGlobalBiggerDiscount()  //بزرگترین تخفیفی که در بین همه تخفیف ها
{
    return $this->getValidDiscountQuery(Discount::TYPE_ALL)->first();
}

public function getCourseBiggerDiscount($course_id)  //Model Course -> methode (getDiscountPercent)
{
    return $this->getValidDiscountQuery(Discount::TYPE_SPECIAL, $course_id)->first();
}































//------------------------------------------------------------------------------------ Lesson 182 (Check discount code)
1) code -> وقتی کد تخفیف مینویسیم دیگ نباید روی کل سایت اعمال بشه میاد برای تعدادی از افراد روی ی سری دوره خاص یا هر دوره ای مجاز ی بار استفاده کنه




//-------------------- modules/Webamooz/Discount/Routes/discount_routes.php
$router->get("/discounts/{code}/{course}/check", [DiscountController::class, 'check'])->name('discounts.check');




//-------------------- modules/Webamooz/Discount/Http/Controllers/DiscountController.php
public function check($code, Course $course)
{
    $discount = $this->discountRepo->getValidDiscountByCode($code, $course->id);

    if ($discount) {
        $discountAmount = DiscountService::calculateDiscountAmount($course->price, $discount->percent);  //مبلغ تخفیف
        $payableAmount = $course->price - $discountAmount;  //قابل پرداخت
        $discountPercent = $discount->percent;  //درصد تخفیف

        $response = [
            "status" => "valid",
            "payableAmount" => $payableAmount,
            "discountAmount" => $discountAmount,
            "discountPercent" => $discountPercent,
        ];
        return response()->json($response);

    } else {
        return response()->json(["status" => "invalid"])->setStatusCode(422);
    }
}




//-------------------- modules/Webamooz/Discount/Repositories/DiscountRepo.php
public function getValidDiscountByCode($code, $course_id)  //درست بود کد تخفیف بر روی دوره در فرانت سایت
{
    return Discount::query()
        ->where('code', $code)
        ->where(function ($query) use ($course_id) {
            $query->whereHas("courses", function ($q) use ($course_id) {
                return $q->where('id', $course_id);
            })->orWhereDoesntHave('courses');  //orWhereDoesntHave -> یا اگر ریلیشنی بر قرار نبود و این کد تخفیف سراسری بود و برای دوره خاصی نبود
        })->first();
}





//-------------------- modules/Webamooz/Discount/Services/DiscountService.php
public static function calculateDiscountAmount($total, $percent)  //$total -> price Course  +  $percent -> discount
{
    return $total * ((float)('0.' . $percent));
}




//-------------------- modules/Webamooz/Discount/Repositories/DiscountRepo.php
<div id="Modal3" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <p>کد تخفیف را وارد کنید</p>
            <div class="close">&times;</div>
        </div>
        <div class="modal-body">
            <form method="post" action="{{ route('courses.buy' , $course->id) }}">
                @csrf
                <div>
                    <input type="text" name="code" id="code" class="txt" placeholder="کد تخفیف را وارد کنید">
                    <p id="response"></p>
                </div>
                <button type="button" class="btn i-t " onclick="checkDiscountCode()">اعمال
                    <img src="/img/loading.gif" alt="" id="loading" class="loading d-none">
                </button>

                <table class="table text-center text-black table-bordered table-striped">
                    <tbody>
                    <tr>
                        <th>قیمت کل دوره</th>
                        <td> {{ $course->getFormattedPrice() }} تومان</td>
                    </tr>
                    <tr>
                        <th>درصد تخفیف</th>
                        <td>
                            <span id="discountPercent" data-value="{{ $course->getDiscountPercent() }}">
                                {{ $course->getDiscountPercent() }}
                            </span>%
                        </td>
                    </tr>
                    <tr>
                        <th> مبلغ تخفیف</th>
                        <td class="text-red">
                            <span id="discountAmount" data-value="{{ $course->getDiscountAmount() }}">
                                {{ $course->getFormattedDiscountAmount() }}</span> تومان
                        </td>
                    </tr>
                    <tr>
                        <th> قابل پرداخت</th>
                        <td class="text-blue">
                            <span id="payableAmount" data-value="{{ $course->getFinalPrice() }}">
                                {{ $course->getFormattedFinalPrice() }}</span> تومان
                        </td>
                    </tr>
                    </tbody>
                </table>
                <button type="submit" class="btn btn i-t ">پرداخت آنلاین</button>
            </form>
        </div>
    </div>
</div>

@section('js')
    <script src="{{ asset('/js/modal.js') }}"></script>
    <script>
        function checkDiscountCode() {

            const code = $("#code").val();
            const url = "{{ route('discounts.check' , ['code' , $course->id]) }}";
            $.get(url.replace("code", code))
                .done(function (data) {  //data -> Controller check
                    $("#discountPercent").text(data.discountPercent);
                    $("#discountAmount").text(data.discountAmount);
                    $("#payableAmount").text(data.payableAmount);
                })

                .fail(function (data) {

                });
        }
    </script>
@endsection


































//---------------------------------------------------------------------------- Lesson 183 (Show check discount response)
1) $router->get("/discounts/{code}/{course}/check", [DiscountController::class, 'check'])->name('discounts.check')->middleware('throttle:6,1');
2) //middleware('throttle:(numberRequest چند بار درخواست میتونه بده),(minutes محاسبه درخواست ها در دقیقه)')




//-------------------- modules/Webamooz/Discount/Routes/discount_routes.php
//middleware('throttle:(numberRequest چند بار درخواست میتونه بده),(minutes محاسبه درخواست ها در دقیقه)')
$router->get("/discounts/{code}/{course}/check", [DiscountController::class, 'check'])->name('discounts.check')->middleware('throttle:6,1');




//-------------------- modules/Webamooz/Front/Resources/Views/singleCourse.blade.php
<div>
    <input type="text" name="code" id="code" class="txt" placeholder="کد تخفیف را وارد کنید">
    <span id="response"></span>  //show error
</div>
<button type="button" class="btn i-t " onclick="checkDiscountCode()">اعمال
    <img src="{{ asset('img/loading.gif') }}" alt="" id="loading" class="loading d-none">
</button>


<script>
    function checkDiscountCode() {

        $("#loading").removeClass('d-none');
        const code = $("#code").val();
        const url = "{{ route('discounts.check' , ['code' , $course->id]) }}";

        $.get(url.replace("code", code))
            .done(function (data) {  //data -> Controller check
                $("#discountPercent").text(data.discountPercent);
                $("#discountAmount").text(data.discountAmount);
                $("#payableAmount").text(data.payableAmount);
                $("#response").text("کد تخفیف با موفقیت اعمال شد").removeClass('text-danger_custom').addClass('text-success_custom');
            })

            .fail(function (data) {
                $("#response").text("کد وارد شده، برای این درس معتبر نیست").removeClass('text-success_custom').addClass('text-danger_custom');
            })

            .always(function () {  //میاد همیشه اجرا میش وقتی کلیک کردیم ی چند صدوم ثانیه ای نمایش میده
                $("#loading").addClass('d-none');
            })
            /*.beforeSend(function (){  //عملیات قبل ارسال
                $("#code").val('')
            })*/;
    }
</script>




























//--------------------------------------------------------------------- Lesson 184 (Apply discount code to final amount)
//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function buy($course_id, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    if (!$this->courseCanBePurchased($course)) {  //اگر دوره قابل خریداری نیست
        return back();
    }

    if (!$this->authUserCanPurchasedCourse($course)) {  //کسایی که دوره خریدن یا دسترسی دارن مثل ادمین و مدرس
        return back();
    }

    $amount = $course->getFinalPrice(\request()->code);  //مقدار نهایی که اگر تخفیفی داشه باشد ازش کم میشه
    if ($amount <= 0) {  //course free
        $courseRepository->addStudentToCourse($course, auth()->id());  //برای زمانی که دوره ای رایگان یا با تخفیف میش عددش صفر نیازی نیست بره درگاه پرداخت
        $this->newFeedback("عملیات موفقیت آمیز", "شما با موفقیت در دوره عضو شدید", "success");
        return redirect($course->path());
    }
    dd(number_format($amount), $course, auth()->user(), $course->teacher_id);
    $payment = PaymentService::generate($amount, $course, auth()->user(), $course->teacher_id);
    resolve(Gateway::class)->redirect($payment->invoice_id);
}




//-------------------- modules/Webamooz/Course/Models/Course.php
public function getFinalPrice($code = null)
{
    $amount = $this->price - $this->getDiscountAmount();

    if ($code) {  //اگر کد تخفیفی کاربر وارد کرد
        $discountRepo = new DiscountRepo();
        $discount = $discountRepo->getValidDiscountByCode($code, $this->id);
        if ($discount) {  //اگر کد تخفیف صحیح بود
            $amount = $amount - DiscountService::calculateDiscountAmount($amount, $discount->percent);
        }
    }
    return $amount;
}






























//------------------------------------------------------------ Lesson 185 (Create relation between payment and discount)
1) php artisan make:migration create_discounts_payments_table --create
2) php artisan migrate



//-------------------- modules/Webamooz/Payment/Models/Payment.php
public function discounts()  //هر دوره تعداد زیادی تخفیف(تا دو تا تخفیف سراسری و کد تخفیفی)
{
    return $this->belongsToMany(Discount::class, 'discount_payment');
}




//-------------------- modules/Webamooz/Discount/Models/Discount.php
public function payments()  //هر تخفیف برای تعداد زیادی دوره(تا دو تا تخفیف سراسری و کد تخفیفی)
{
    return $this->belongsToMany(Payment::class, 'discount_payment');
}




//-------------------- modules/Webamooz/Discount/Database/Migrations/2024_08_22_195812_create_discounts_payments_table.php
Schema::create('discount_payment', function (Blueprint $table) {
    $table->id();
    $table->foreignId('discount_id');
    $table->foreignId('payment_id');
    $table->timestamps();
    $table->foreign('discount_id')->references('id')->on('discounts')->onDelete('CASCADE');
    $table->foreign('payment_id')->references('id')->on('payments')->onDelete('CASCADE');
});

























//------------------------------------------------------------------------- Lesson 186 (Save used discounts for payment)
//-------------------- modules/Webamooz/Course/Models/Course.php
public function getDiscount()  //discount price course -> چند درصد تخفیف داره
{
    $discountRepo = new DiscountRepo();
    $discount = $discountRepo->getCourseBiggerDiscount($this->id);  //courseDiscount -> تخفیف های دارای کد تخفیف برای دوره خاص یا همه دوره ها
    $globalDiscount = $discountRepo->getGlobalBiggerDiscount();

    if ($discount == null && $globalDiscount == null) return null;  //اگر کد تخفیفی یا تخفیفی سراسری هر دو وجود نداشت نال برگردون
    if ($discount == null && $globalDiscount != null) return $globalDiscount;  //اگر کد تخفیفی نداشت و تخفیفی سراسری برگردون
    if ($discount != null && $globalDiscount == null) return $discount;  //اگر تخفیف سراسری نداشت بیا کد تخفیف برگردون

    if ($globalDiscount->percent > $discount->percent) return $globalDiscount;  //اگر هر دو داشت مقایسه کن اگر تخفیفی سراسری درصدش بیشتر بود برگردون
    return $discount;  //اگر هر دو داشت مقایسه کن اگر کد تخفیف درصدش بیشتر بود برگردون
}

public function getDiscountPercent()
{
    $discount = $this->getDiscount();
    if ($discount) return $discount->percent;
    return 0;
}

public function getDiscountAmount($percent = null)  //discount amount -> چه قدر تخفیف داره تا الان
{
    if (is_null($percent)) {
        $discount = $this->getDiscount();
        $percent = $discount ? $discount->percent : 0;
    }
    return DiscountService::calculateDiscountAmount($this->price, $percent);
//      return $this->price * ((float)('0.' . $this->getDiscount()));  //1,000,000 * 0.18 = 180,000
}

public function getFinalPrice($code = null, $withDiscounts = false)  //یا تخفیفی سراسری ثبت میشه یا کد تخفیف هر دو با هم نمیشه
{
    $discounts = [];
    $discount = $this->getDiscount();

    $amount = $this->price;  //اول قسمت اصلی دوره مگر در خط پایین تخفیفی وجود داشته باشد
    if ($discount) {
        $discounts[] = $discount;  //تخفیف سراسری اگر وجود داشت میریزه درون یک آرایه
        $amount = $this->price - $this->getDiscountAmount($discount->percent);
    }

    if ($code) {  //اگر کد تخفیفی کاربر وارد کرد
        $discountRepo = new DiscountRepo();
        $discountFromCode = $discountRepo->getValidDiscountByCode($code, $this->id);
        if ($discountFromCode) {  //اگر کد تخفیف صحیح بود
            $discounts[] = $discountFromCode;  //کد تخفیف اگر وجود داشت و صحیح بود میریزه درون یک آرایه
            $amount = $amount - DiscountService::calculateDiscountAmount($amount, $discountFromCode->percent);  //ممکن تخفیف سراسری باش و کد تخفیفی قبلی رو این اجرا بشه
        }
    }
    if ($withDiscounts) {  //اگر همراه تخفیف بود بیا هر دو بگیر هم قیمت و لیست تخفیفات
        return [$amount, $discounts];
    }
    return $amount;
}





//-------------------- modules/Webamooz/Discount/Http/Controllers/DiscountController.php
public function check($code, Course $course)
{
    $discount = $this->discountRepo->getValidDiscountByCode($code, $course->id);

    $amount = $course->price - $course->getDiscountAmount();  //اگر دوره ای تخفیف سراسری داشت میاد از قیمت تخفیفی کد تخفیف میده
    if ($discount) {
        $discountAmount = DiscountService::calculateDiscountAmount($amount, $discount->percent);  //مبلغ تخفیف
        $payableAmount = $amount - $discountAmount;  //قابل پرداخت
        $discountPercent = $discount->percent;  //درصد تخفیف

        $response = [
            "status" => "valid",
            "payableAmount" => $payableAmount,
            "discountAmount" => $discountAmount,
            "discountPercent" => $discountPercent,
        ];
        return response()->json($response);

    } else {
        return response()->json(["status" => "invalid"])->setStatusCode(422);
    }
}





//-------------------- modules/Webamooz/Course/Http/Controllers/CourseController.php
public function buy($course_id, CourseRepository $courseRepository)
{
    $course = $courseRepository->findById($course_id);
    if (!$this->courseCanBePurchased($course)) {  //اگر دوره قابل خریداری نیست
        return back();
    }

    if (!$this->authUserCanPurchasedCourse($course)) {  //کسایی که دوره خریدن یا دسترسی دارن مثل ادمین و مدرس
        return back();
    }

    //[$amount, $discounts] -> چون آرایه صفر و یک میاد درون ایندکس صفر قیمت و درون ایندکس یک مقدار تخفیفی که حداکثر دو تا و از نوع آرایه مقدار ولیو
    [$amount, $discounts] = $course->getFinalPrice(\request()->code , true);  //مقدار نهایی که اگر تخفیفی داشه باشد ازش کم میشه + همرااه تخفیف اگر بود لیست آیدی دو تا تخفیفی حداکثر
    if ($amount <= 0) {  //course free
        $courseRepository->addStudentToCourse($course, auth()->id());  //برای زمانی که دوره ای رایگان یا با تخفیف میش عددش صفر نیازی نیست بره درگاه پرداخت
        $this->newFeedback("عملیات موفقیت آمیز", "شما با موفقیت در دوره عضو شدید", "success");
        return redirect($course->path());
    }
//        dd(number_format($amount), $course, auth()->user(), $course->teacher_id ,$discounts);
    $payment = PaymentService::generate($amount, $course, auth()->user(), $course->teacher_id, $discounts);
    resolve(Gateway::class)->redirect($payment->invoice_id);
}





//-------------------- modules/Webamooz/Payment/Service/PaymentService.php
public static function generate($amount, $paymentable, User $buyer, $seller_id = null, $discounts = [])  //$paymentable -> $course
{
    if ($amount <= 0 || is_null($paymentable->id) || is_null($buyer->id)) return false;
    $gateway = resolve(Gateway::class);
    $invoiceId = $gateway->request($amount, $paymentable->title);
    if (is_array($invoiceId)) {
        //todo
        dd($invoiceId);
    }

    if (!is_null($paymentable->percent)) {
        $seller_percent = $paymentable->percent;
        $seller_share = ($amount / 100) * $seller_percent;
        $site_share = $amount - $seller_share;  //($amount / 100) * (100 - $seller_percent)

    } else {
        $seller_percent = $seller_share = 0;
        $site_share = $amount;  //اگر دوره ای رایگان کل قیمت برای سایت
    }

    return resolve(PaymentRepositories::class)->store([
        'buyer_id' => $buyer->id,
        'seller_id' => $seller_id,
        'paymentable_id' => $paymentable->id,
        'paymentable_type' => get_class($paymentable),
        'amount' => $amount,
        'invoice_id' => $invoiceId,
        'gateway' => $gateway->getName(),
        'status' => Payment::STATUS_PENDING,
        'seller_percent' => $seller_percent,
        'seller_share' => $seller_share,
        'site_share' => $site_share,
    ], $discounts);
}






//-------------------- modules/Webamooz/Payment/Repositories/PaymentRepositories.php
public function store($data, $discounts = [])
{
    $payment = Payment::create([
        'buyer_id' => $data['buyer_id'],
        'seller_id' => $data['seller_id'],
        'paymentable_id' => $data['paymentable_id'],
        'paymentable_type' => $data['paymentable_type'],
        'amount' => $data['amount'],
        'invoice_id' => $data['invoice_id'],
        'gateway' => $data['gateway'],
        'status' => $data['status'],
        'seller_percent' => $data['seller_percent'],
        'seller_share' => $data['seller_share'],
        'site_share' => $data['site_share'],
    ]);
    foreach ($discounts as $discount) {
        $discountIds[] = $discount->id;  //میاد آیدی های تخفیف مثل سراسری یا کد تخفیفی میریزه درون آرایه نهایتا دو تا تخفیف
    }
    if (isset($discountIds)) {
        $payment->discounts()->sync($discountIds);
    }

    return $payment;
}




//-------------------- modules/Webamooz/Payment/Models/Payment.php
public function discounts()  //هر دوره تعداد زیادی تخفیف(تا دو تا تخفیف سراسری و کد تخفیفی)
{
    return $this->belongsToMany(Discount::class, 'discount_payment');  //withTimestamps -> set created_at+updated_at
}









































//-------------------------------------------------------------- Lesson 187 (Update Discounts After Successfull payment)
1) php artisan make:listener updateUserDiscountForPayment



//-------------------- modules/Webamooz/Discount/Providers/DiscountServiceProvider.php
public function register()
{
    $this->app->register(EventServiceProvider::class);  //ریجستر بکنه ایونت سرویس پروایدر به این قسمت در پروژه
}



//-------------------- modules/Webamooz/Discount/Providers/EventServiceProvider.php
protected $listen = [
    PaymentWasSuccessful::class => [  //event -> connect event to listeners in all project
        updateUserDiscountForPayment::class,  //listener
    ]
];



//-------------------- modules/Webamooz/Discount/Listeners/updateUserDiscountForPayment.php
public function handle($event)  //$event -> $payment
{
    foreach ($event->payment->discounts as $discount) {
        $discount->uses += 1;
        if (!is_null($discount->usage_limitation)) {  //اگر تعداد محدودیت افزاد نال یا نامحدود نیست بیا یکی کم کن
            $discount->usage_limitation -= 1;
        }
        $discount->save();
    }
}


































//-------------------------------------------------------------------------------------------- Lesson 188 (Fix some bug)
1) //$payableAmount -> اگر دوره ای تخفیفی سراسری داشت و ما کد تخفیفی زدیم میاد از مقدار تخفیفی سراسری خورده اعمال مکینه نه قسمت اولیه دوره



//-------------------- modules/Webamooz/Discount/Http/Controllers/DiscountController.php
public function check($code, Course $course)
{
    $discount = $this->discountRepo->getValidDiscountByCode($code, $course->id);

    if ($discount) {
        $discountAmount = DiscountService::calculateDiscountAmount($course->getFinalPrice(), $discount->percent);  //مبلغ تخفیف
        //$payableAmount -> اگر دوره ای تخفیفی سراسری داشت و ما کد تخفیفی زدیم میاد از مقدار تخفیفی سراسری خورده اعمال مکینه نه قسمت اولیه دوره
        $payableAmount = $course->getFinalPrice() - $discountAmount;  //قابل پرداخت
        $discountPercent = $discount->percent;  //درصد تخفیف

        $response = [
            "status" => "valid",
            "payableAmount" => $payableAmount,
            "discountAmount" => $discountAmount,
            "discountPercent" => $discountPercent,
        ];
        return response()->json($response);

    } else {
        return response()->json(["status" => "invalid"])->setStatusCode(422);
    }
}







//-------------------- modules/Webamooz/Front/Resources/Views/singleCourse.blade.php
<table class="table text-center text-black table-bordered table-striped">
    <tbody>
    <tr>
        <th>قیمت کل دوره</th>
        <td> {{ $course->getFormattedPrice() }} تومان</td>
    </tr>
    <tr>
        <th>درصد تخفیف</th>
        <td>
            <span id="discountPercent" data-value="{{ $course->getDiscountPercent() }}">
                {{ $course->getDiscountPercent() }}
            </span>%
        </td>
    </tr>
    <tr>
        <th> مبلغ تخفیف</th>
        <td class="text-red">
            <span id="discountAmount" data-value="{{ $course->getDiscountAmount() }}">
                {{ $course->getFormattedDiscountAmount() }}</span> تومان
        </td>
    </tr>
    <tr>
        <th> قابل پرداخت</th>
        <td class="text-blue">
            <span id="payableAmount" data-value="{{ $course->getFinalPrice() }}">
                {{ $course->getFormattedFinalPrice() }}</span> تومان
        </td>
    </tr>
    </tbody>
</table>


<script>
    function checkDiscountCode() {

        $("#loading").removeClass('d-none');
        const code = $("#code").val();
        const url = "{{ route('discounts.check' , ['code' , $course->id]) }}";

        $.get(url.replace("code", code))
            .done(function (data) {  //data -> Controller check
                $("#discountPercent").text(parseInt($("#discountPercent").attr('data-value')) + data.discountPercent);  //درصد تخفیف سراسری قبلی با درصد تخفیف جدیدی جمع
                $("#discountAmount").text(parseInt($("#discountAmount").attr('data-value')) + data.discountAmount);  //مبلغ تخفیف سراسری با مبلغ کد تخفیف جمع
                $("#payableAmount").text(parseInt($("#payableAmount").attr('data-value')) - data.discountAmount);  //قیمت نهایی تخفیف سراسری از کد تخفیف منفی
                $("#response").text("کد تخفیف با موفقیت اعمال شد").removeClass('text-danger_custom').addClass('text-success_custom');
            })

            .fail(function (data) {
                $("#response").text("کد وارد شده، برای این درس معتبر نیست").removeClass('text-success_custom').addClass('text-danger_custom');
            })

            .always(function () {  //میاد همیشه اجرا میش وقتی کلیک کردیم ی چند صدوم ثانیه ای نمایش میده
                $("#loading").addClass('d-none');
            })
        /*.beforeSend(function (){  //عملیات قبل ارسال
            $("#code").val('')
        })*/;
    }
</script>

































//----------------------------------------------------------------------------------- Lesson 189 (Inital tickets module)
//-------------------- modules/Webamooz/Ticket/Providers/TicketServiceProvider.php
public function register()
{

}
public function boot()
{

}



//-------------------- composer.json
"autoload": {
    "psr-4": {
        "App\\": "app/",
        "Webamooz\\Common\\": "modules/Webamooz/Common/",
        "Webamooz\\User\\": "modules/Webamooz/User/",
        "Webamooz\\Dashboard\\": "modules/Webamooz/Dashboard/",
        "Webamooz\\Category\\": "modules/Webamooz/Category/",
        "Webamooz\\RolePermissions\\": "modules/Webamooz/RolePermissions/",
        "Webamooz\\Course\\": "modules/Webamooz/Course/",
        "Webamooz\\Media\\" : "modules/Webamooz/Media/",
        "Webamooz\\Front\\" : "modules/Webamooz/Front/",
        "Webamooz\\Payment\\" : "modules/Webamooz/Payment/",
        "Webamooz\\Discount\\" : "modules/Webamooz/Discount/",
        "Webamooz\\Ticket\\" : "modules/Webamooz/Ticket/",
        "Database\\Factories\\": "database/factories/",
        "Database\\Seeders\\": "database/seeders/"
    }
},



//-------------------- config/app.php
 'providers' => [
        \Webamooz\Discount\Providers\DiscountServiceProvider::class,
        \Webamooz\Ticket\Providers\TicketServiceProvider::class,
    ],





































//---------------------------------------------------------------------------------- Lesson 190 (Migrations for tickets)
1) php artisan make:migration create_tickets_table --create
2) php artisan make:migration create_ticket_replies_table --create



//-------------------- modules/Webamooz/Ticket/Database/Migrations/2024_08_24_193451_create_tickets_table.php
Schema::create('tickets', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained()->onDelete('CASCADE');
    $table->foreignId('ticketable_id');  //Model + able + _id
    $table->string('ticketable_type');  //Model + able + _type
    $table->string('title');
    $table->enum('status', [\Webamooz\Ticket\Models\Ticket::$statuses])
        ->default(\Webamooz\Ticket\Models\Ticket::STATUS_OPEN);
    $table->timestamps();
//  $table->foreign('user_id')->references('id')->on('users')->onDelete('CASCADE');
});




//-------------------- Database/Migrations/2024_08_24_193739_create_ticket_replies_table.php
Schema::create('ticket_replies', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained();
    $table->foreignId('ticket_id');
    $table->foreignId('media_id')->nullable();
    $table->text('body');
    $table->timestamps();
    $table->foreign('ticket_id')->references('id')->on('tickets')->onDelete('cascade');
    $table->foreign('media_id')->references('id')->on('media')->onDelete('set null');  //اگر مدیا یا عکس حذف شد این قسمت نال کن و حذف نکن تیکت
});
























//-------------------------------------------------------------------------------- Lesson 191 (Models for ticket module)
1) Model Ticker -> relation replies -> //هر کامنت متعلق به یک وبلاگ و هر وبلاگ کلی کامنت داره + هر پاسخ متعلق به یک تیکت و هر تیکت کلی پاسخ دارد



//-------------------- modules/Webamooz/Ticket/Models/Ticket.php
const STATUS_OPEN = 'open';
const STATUS_CLOSE = 'close';
const STATUS_PENDING = 'pending';
public static array $statuses = [
    self::STATUS_OPEN,
    self::STATUS_CLOSE,
    self::STATUS_PENDING
];

protected $fillable = [
    //---------- tickets
    'user_id',
    'ticketable_id',
    'ticketable_type',
    'title',
    'status',
];

public function user()
{
    return $this->belongsTo(User::class);
}

public function ticketable()
{
    return $this->morphTo();  //یک نام میدیم برای پلی مورفی (اختیاری)
}

public function replies()  //هر کامنت متعلق به یک وبلاگ و هر وبلاگ کلی کامنت داره + هر پاسخ متعلق به یک تیکت و هر تیکت کلی پاسخ دارد
{
    $this->hasMany(Reply::class);  //هر تیکت میتونه تعداد زیادی پاسخ داشته باشد
}







//-------------------- modules/Webamooz/Ticket/Models/Reply.php
protected $fillable = [
    'user_id',
    'ticket_id',
    'media_id',
    'body',
];

public function user()
{
    return $this->belongsTo(User::class);
}

public function ticket()
{
    return $this->belongsTo(Ticket::class);  //هر پاسخ میتونه برای یک تیکت باشد
}

public function media()
{
    return $this->belongsTo(Media::class);
}






//-------------------- modules/Webamooz/Course/Models/Course.php
public function tickets()
{
    return $this->morphMany(Ticket::class, 'ticketable');  //1)Model  2)name relation (paymentable) اسم ستون درون پیمنت
}





//-------------------- modules/Webamooz/User/Models/User.php
public function tickets()
{
    return $this->hasMany(Ticket::class);
}

public function ticketReplies()
{
    return $this->hasMany(Reply::class);
}




























//------------------------------------------------------- Lesson 192 (Route, controllers and policies for ticket module)
1) php artisan make:policy TicketPolicy
2) php artisan db:seed --class=Webamooz\RolePermissions\Database\Seeders\RolePermissionTableSeeder




//-------------------- modules/Webamooz/Ticket/Providers/TicketServiceProvider.php
private $namespace = "Webamooz\Ticket\Http\Controller";
public function register()
{
    Route::middleware(['web'])->namespace($this->namespace)->group(__DIR__ . '/../Routes/ticket_route.php');
//  $this->loadRoutesFrom(__DIR__ . '/../Routes/ticket_route.php');  //روش بالا بهتر چون همینجا میدلور و نیم اسپیس میدیم
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', "Tickets");
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang/');
    Gate::policy(Ticket::class, TicketPolicy::class);  //1)Model , 2)Policy
    Gate::policy(Reply::class, ReplyPolicy::class);   //1)Model , 2)Policy
}


public function boot()
{
    config()->set('sidebar.items.tickets', [
        "icon" => "i-tickets",
        "title" => "تیکت های پشتیبانی",
        "url" => route('tickets.index'),
    ]);
}






//-------------------- modules/Webamooz/Ticket/Routes/ticket_route.php
Route::resource('tickets', TicketController::class);





//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function index()
{
    $this->authorize('manage', Ticket::class);
    return "Ticket Index";
}




//-------------------- modules/Webamooz/Ticket/Policies/TicketPolicy.php
public function manage($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_Ticket)) return true;
    return null;
}



//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
const PERMISSION_MANAGE_Ticket = 'manage tickets';

public static array $permissions = [  //نمایش لیست بعد سیدر در ویو
    self::PERMISSION_MANAGE_Ticket,
];





































//-------------------------------------------------------------------------------------- Lesson 193 (Create ticket view)
//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
private $ticketRepo;
public function __construct(TicketRepositories $ticketRepositories)
{
    $this->ticketRepo = $ticketRepositories;
}

public function index()
{
    $tickets =  $this->ticketRepo->paginateAll(12);
    return view("Tickets::index" , compact('tickets'));
}





//-------------------- modules/Webamooz/Ticket/Repositories/TicketRepositories.php
public function paginateAll($count = 10)
{
    return Ticket::query()->latest()->paginate($count);
}





//-------------------- modules/Webamooz/Ticket/Resources/Views/create.blade.php
@extends('Dashboard::master')

@section('title' , 'ایجاد تیکت')
@section('breadcrumb')
    <li><a href="{{ route('tickets.index') }}">تیکت ها</a></li>
    <li><a href="{{ route('tickets.create') }}" class="is-active">ارسال تیکت جدید</a></li>
@endsection

@section('content')
    <div class="main-content padding-0">
        <p class="box__title">ایجاد تیکت جدید</p>
        <div class="row no-gutters bg-white">
            <div class="col-12">
                <form action="{{ route('tickets.store') }}" class="padding-30">
                    @csrf
                    <x-input type="text" class="text" placeholder="عنوان تیکت" name="title" required />
                    <x-textarea placeholder="متن تیکت" class="text" name="body" required />

                    <x-file type="file" placeholder="آپلود فایل پیوست" name="attachment" />
                    <button class="btn btn-webamooz_net">ایجاد تیکت</button>
                </form>
            </div>
        </div>
    </div>
@endsection

@section('js')
    <script src="{{ asset('panel/js/tagsInput.js') }}"></script>
@endsection





































//------------------------------------------------------------------------------- Lesson 194 (Ticket request validation)
1) php artisan make:request TicketRequest



//-------------------- modules/Webamooz/Ticket/Http/Requests/TicketRequest.php
public function authorize()
{
    return auth()->check() == true;
}

public function rules()
{
    return [
        'title' => "required|string|min:3|max:500",
        'body' => "required|string",
        'attachment' => "nullable|file|mimes:png,jpg,jpeg,avi,mkv,mp4,zip,rar|max:10240",  //10M -> 10240
    ];
}

public function attributes()
{
    return [
        'title' => 'عنوان تیکت',
        'body' => 'متن تیکت',
        'attachment' => 'فایل پیوست',
    ];
}

public function messages()
{
    return [
      'attachment.max' => "فایل پیوست نباید بزرگتر از 10 مگابایت باشد."
    ];
}





//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function store(TicketRequest $request)
{
    dd($request->all());
}































//-------------------------------------------------------------------------------- Lesson 195 (Store ticket in database)
//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function create(CourseRepository $courseRepo)
{
    $courses = $courseRepo->getAll(Course::CONFIRMATION_STATUS_ACCEPTED);
    return view('Tickets::create', compact('courses'));
}

public function store(TicketRequest $request)
{
    $ticket = $this->ticketRepo->store($request);
    Generate::newFeedback();
    return to_route('tickets.index');
}





//-------------------- modules/Webamooz/Ticket/Database/Repositories/TicketRepositories.php
public function paginateAll($count = 10)
{
    return Ticket::query()->latest()->paginate($count);
}

public function store($request)
{
    $course = (new CourseRepository())->findById($request->course);  //object Course
    return Ticket::create([
        'user_id' => auth()->user()->id,
        'title' => $request->title,
        'ticketable_id' => $request->course,  //Relationship One To Many
        'ticketable_type' => get_class($course),  //object + Relationship One To Many
    ]);
}





/-------------------- modules/Webamooz/Ticket/Resources/Views/create.blade.php
@extends('Dashboard::master')

@section('title' , 'ایجاد تیکت')
@section('breadcrumb')
    <li><a href="{{ route('tickets.index') }}">تیکت ها</a></li>
    <li><a href="{{ route('tickets.create') }}" class="is-active">ارسال تیکت جدید</a></li>
@endsection

@section('content')
    <div class="main-content padding-0">
        <p class="box__title">ایجاد تیکت جدید</p>
        <div class="row no-gutters bg-white">
            <div class="col-12">
                <form action="{{ route('tickets.store') }}" class="padding-30" method="POST" enctype="multipart/form-data">
                    @csrf
                    <x-input type="text" class="text" placeholder="عنوان تیکت" name="title" required />

                    <span style="margin-top: 10px !important;margin-bottom: 3px!important;">انتخاب دوره</span>
                    <x-select name="course" class="m-0">
                        @foreach($courses as $course)
                            <option value="{{ $course->id }}">{{ $course->title }}</option>
                        @endforeach
                    </x-select>

                    <x-textarea placeholder="متن تیکت" class="text" name="body" />

                    <x-file type="file" placeholder="آپلود فایل پیوست" name="attachment" />
                    <button class="btn btn-webamooz_net">ایجاد تیکت</button>
                </form>
            </div>
        </div>
    </div>
@endsection

@section('js')
    <script src="{{ asset('panel/js/tagsInput.js') }}"></script>
@endsection
































//---------------------------------------------------------------- Lesson 196 (Store ticket reply and upload attachment)
//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function store(TicketRequest $request)
{
    $ticket = $this->ticketRepo->store($request);
    //----- reply
    ReplyService::store($ticket , $request->body , $request->attachment);
    Generate::newFeedback();
    return to_route('tickets.index');
}




//-------------------- modules/Webamooz/Ticket/Database/Repositories/TicketRepositories.php
public function store($request) :Model
{
    $course = (new CourseRepository())->findById($request->course);  //object Course
    return Ticket::create([
        'user_id' => auth()->user()->id,
        'title' => $request->title,
        'ticketable_id' => $request->course,  //Relationship One To Many
        'ticketable_type' => get_class($course),  //object + Relationship One To Many
    ]);
}




//-------------------- modules/Webamooz/Ticket/Services/ReplyService.php
public static function store(Ticket $ticket, $body, $attachment)
{
    $replyRepo = new ReplyRepositories();
    $media_id = null;
    if ($attachment && ($attachment instanceof UploadedFile)) {  //($attachment instanceof UploadedFile) -> اگر فایل ما آپلود شده بود و مقداری داشت
        $media_id = MediaFileService::privateUpload($attachment)->id;
    }
    return $replyRepo->store($ticket->id, $body, $media_id);
}





//-------------------- modules/Webamooz/Ticket/Database/Repositories/ReplyRepositories.php
public function store($ticket_id, $body, $media_id = null)
{
    return Reply::create([
        'user_id' => auth()->user()->id,
        'ticket_id' => $ticket_id,
        'media_id' => $media_id,
        'body' => $body,
    ]);
}




//-------------------- modules/Webamooz/Ticket/Models/Reply.php
protected $table = 'ticket_replies';  //اسم مادل و جدول چون حالت استاندارد نیست باید بهش اسم جدول جداگونه بدیم + tableStandard(Model+s)






























//--------------------------------------------------------------------------------------------- Lesson 197 (View ticket)
//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function show($ticket_id)
{
    $ticket = $this->ticketRepo->findByIdWithReply($ticket_id);
    return view('Tickets::show', compact('ticket'));
}



//-------------------- modules/Webamooz/Ticket/Database/Repositories/TicketRepositories.php
public function findByIdWithReply($ticket_id)
{
    return Ticket::query()->with('replies')->findOrFail($ticket_id);  //تیکت همراه ریپلای ها
}



//-------------------- modules/Webamooz/Ticket/Resources/Views/index.blade.php
<a href="{{ route('tickets.show' ,$ticket->id) }}" target="_blank" class="item-eye mlg-15 btn_warning_customize" title="مشاهده"></a>




//-------------------- modules/Webamooz/Ticket/Resources/Views/show.blade.php
@foreach($ticket->replies as $reply)
    <div class="transition-comment">
        <div class="transition-comment-header">
            <span><img src="{{ asset('img/profile.jpg') }}" class="logo-pic"></span>
            <span class="nav-comment-status">
            <p class="username"> کاربر : {{ $reply->user->name }}</p>
            <p class="comment-date">{{ $reply->created_at }}</p></span>
            <div></div>
        </div>
        <div class="transition-comment-body">
            <pre>{!! $reply->body !!}</pre>
            <div></div>
        </div>
    </div>
@endforeach




































//----------------------------------------------------------------------------------------- Lesson 198 (Reply to ticket)
//-------------------- modules/Webamooz/Ticket/Routes/ticket_route.php
Route::post('tickets/{ticket}/reply', [TicketController::class, 'reply'])->name('tickets.reply');



//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function reply(ReplyRequest $request, Ticket $ticket)
{
    ReplyService::store($ticket, $request->body, $request->attachment);
    Generate::newFeedback();
    return to_route('tickets.show', $ticket->id);
}




//-------------------- modules/Webamooz/Ticket/Http/Requests/ReplyRequest.php
public function rules()
{
    return [
        'body' => "required|string",
        'attachment' => "nullable|file|mimes:png,jpg,jpeg,avi,mkv,mp4,zip,rar|max:10240",  //10M -> 10240
    ];
}




//-------------------- modules/Webamooz/Ticket/Services/ReplyService.php
public static function store(Ticket $ticket, $body, $attachment)
{
    $replyRepo = new ReplyRepositories();
    $ticketRepo = new TicketRepositories();

    $media_id = null;
    if ($attachment && ($attachment instanceof UploadedFile)) {  //($attachment instanceof UploadedFile) -> اگر فایل ما آپلود شده بود و مقداری داشت
        $media_id = MediaFileService::privateUpload($attachment)->id;
    }

    $reply = $replyRepo->store($ticket->id, $body, $media_id);
    if ($reply->user_id != $ticket->user_id) {  //اگر کسی که به تیکت پاسخ داده کاربر ادمین یا مدرس دوره بیا وضعیت تیکت بزن بسته شده
        $ticketRepo->setStatus($ticket->id, Ticket::STATUS_REPLIED);  //وقتی ادمین پاسخ تیکت میده وضعیت به پاسخ داده شده
    }else {
        $ticketRepo->setStatus($ticket->id, Ticket::STATUS_OPEN);  //وقتی باز کاربر سوالی میپرسه وضعیت به پاسخ مشتری
    }
    return $reply;
}




//-------------------- modules/Webamooz/Ticket/Database/Repositories/TicketRepositories.php
public function setStatus($ticket_id, $status)
{
    return Ticket::query()->where("id", $ticket_id)->update([
        'status' => $status,
    ]);
}




//-------------------- modules/Webamooz/Ticket/Resources/Views/show.blade.php
<div class="answer-comment">
    <p class="p-answer-comment">ارسال پاسخ</p>
    <form action="{{ route('tickets.reply' , $ticket->id) }}" method="POST" enctype="multipart/form-data">
        @csrf
        <x-textarea class="textarea" placeholder="متن پاسخ به این تیکت" name="body" required />
        <x-file placeholder="آپلود فایل پیوست" name="attachment"/>
        <button type="submit" class="btn btn-webamooz_net">ارسال پاسخ</button>
    </form>
</div>




























//-------------------------------------------------------------------------------------------- Lesson 199 (Close ticket)
//-------------------- modules/Webamooz/Ticket/Routes/ticket_route.php
Route::get('/tickets/{ticket}/close', [TicketController::class, 'close'])->name('tickets.close');  //بیاد سمت سرور و عملیات انجام بده بدون نیاز فرم



//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function close(Ticket $ticket)
{
    $this->ticketRepo->setStatus($ticket->id, Ticket::STATUS_CLOSE);
    Generate::newFeedback();
    return to_route('tickets.index');
}



//-------------------- modules/Webamooz/Ticket/Resources/Views/index.blade.php
<td>
    @can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_TICKETS)
        <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"></a>
    @endcan
        <a href="{{ route('tickets.close' , $ticket->id) }}" onclick="return confirm('آیا می خواهید تیکت را ببندید?')"
           class="item-reject mlg-15 btn_red_customize" title="بستن تیکت"></a>
    <a href="{{ route('tickets.show' ,$ticket->id) }}" target="_blank" class="item-eye mlg-15 btn_warning_customize" title="مشاهده"></a>
</td>

























//------------------------------------------------------------------------------------------- Lesson 200 (Ticket policy)
//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function index()
{
    $tickets = $this->ticketRepo->paginateAll(12, auth()->id());

    if (auth()->user()->hasAnyPermission([Permission::PERMISSION_MANAGE_TICKETS, Permission::PERMISSION_SUPER_ADMIN])) {
        $tickets = $this->ticketRepo->paginateAll(12);
    }
    return view("Tickets::index", compact('tickets'));
}

public function show($ticket_id)
{
    $ticket = $this->ticketRepo->findByIdWithReply($ticket_id);
    $this->authorize('show' , $ticket);  //ادمین سایت یا پرمیژن مدیریت تیکت ها + کسی که این تیکت ساخته و آیدیش یکی
    return view('Tickets::show', compact('ticket'));
}


public function reply(ReplyRequest $request, Ticket $ticket)
{
    $this->authorize('show' , $ticket);  //ادمین سایت یا پرمیژن مدیریت تیکت ها + کسی که این تیکت ساخته و آیدیش یکی
    ReplyService::store($ticket, $request->body, $request->attachment);
    Generate::newFeedback();
    return to_route('tickets.show', $ticket->id);
}

public function close(Ticket $ticket)
{
    $this->authorize('show' , $ticket);  //ادمین سایت یا پرمیژن مدیریت تیکت ها + کسی که این تیکت ساخته و آیدیش یکی
    $this->ticketRepo->setStatus($ticket->id, Ticket::STATUS_CLOSE);
    Generate::newFeedback();
    return to_route('tickets.index');
}







//-------------------- modules/Webamooz/Ticket/Database/Repositories/TicketRepositories.php
public function paginateAll($count = 10, $user_id = null)
{
    $query = Ticket::query();
    if ($user_id) {
        return $query->where('user_id', $user_id)->paginate($count);
    }

    return $query->latest()->paginate($count);  //اگر آیدی کاربر نداشت یعنی برای ادمین یا مدیریت تیکت باید نمایش بدیم همه
}





//-------------------- modules/Webamooz/Ticket/Policies/TicketPolicy.php
public function show($user, $ticket)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_TICKETS)) return true;
    if ($ticket->user_id == $user->id) return true;
    return null;
}



































//------------------------------------------------------------------------------------------- Lesson 201 (Ticket delete)
//-------------------- modules/Webamooz/Ticket/Resources/Views/index.blade.php
@can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_TICKETS)
    <a href="" onclick="deleteItem(event, '{{ route('tickets.destroy' , $ticket->id) }}')"
       class="item-delete mlg-15 btn_red_customize" title="حذف"></a>
@endcan




//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function destroy(Ticket $ticket)
{
    $this->authorize('delete', $ticket);
    $this->ticketRepo->delete($ticket);
    return AjaxResponses::successResponse("تیکت با موفقیت حذف شد");
}




//-------------------- modules/Webamooz/Ticket/Database/Repositories/TicketRepositories.php
public function delete(Ticket $ticket)
{
//  $hasAttachmentsReply = $ticket->replies()->whereNotNull('media_id')->get();
    $hasAttachmentsReply = Reply::query()->where('ticket_id', $ticket->id)->whereNotNull('media_id')->with('media')->get();
    foreach ($hasAttachmentsReply as $reply) {
        $reply->media->delete();
    }
    $ticket->delete();
}



//-------------------- modules/Webamooz/Ticket/Policies/TicketPolicy.php
public function delete($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_TICKETS)) return true;
    return null;
}





























//------------------------------------------------------------------------------------- Lesson 202 (Download attachment)
//-------------------- modules/Webamooz/Ticket/Routes/ticket_route.php
Route::group(['middleware' => ['auth']], function ($router) {
    $router->resource('tickets', TicketController::class);
    $router->post('tickets/{ticket}/reply', [TicketController::class, 'reply'])->name('tickets.reply');
    $router->get('/tickets/{ticket}/close', [TicketController::class, 'close'])->name('tickets.close');  //بیاد سمت سرور و عملیات انجام بده بدون نیاز فرم
});



//-------------------- modules/Webamooz/Ticket/Resources/Views/show.blade.php
@foreach($ticket->replies as $reply)
    {{-- is-answer -> اگر آیدی کسی که تیکت زده نخالف آیدی پاسخ تیکت بود اون یک جواب --}}
    <div class="transition-comment {{ $reply->user_id == $ticket->user_id ? "" : "is-answer" }}">
        <div class="transition-comment-header">
            <span><img src="{{ $reply->user->thumb }}" class="logo-pic"></span>
            <span class="nav-comment-status">
            <p class="username"> کاربر : {{ $reply->user->name }}</p>
            <p class="comment-date">{{ $reply->created_at }}</p></span>
            <div></div>
        </div>
        <div class="transition-comment-body">
            <pre>{!! $reply->body !!}

                @if ($reply->media_id)
                    <a href="{{ $reply->attachmentLink() }}" class="text-info_custom fw-bold m-0 p-0">دانلود فایل پیوست</a>
                @endif
            </pre>

        </div>
    </div>
@endforeach



//-------------------- modules/Webamooz/Ticket/Models/Reply.php
public function attachmentLink()
{
    if ($this->media_id) {
        return URL::temporarySignedRoute('media.download', now()->addMonths(4), ['media' => $this->media_id]);
    }
}































//--------------------------------------------------------------------------------------- Lesson 203 (Search in tickets)
//-------------------- modules/Webamooz/Ticket/Resources/Views/index.blade.php
<div class="tab__items">

    <a class="tab__item {{ request()->status == '' ? 'is-active' : '' }}" href="{{ route('tickets.index') }}">همه تیکت ها</a>

    @can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_TICKETS)
        <a class="tab__item {{ request()->status == 'open' ? 'is-active' : '' }}"
           href="?{{ request()->getQueryString() }}&status={{ \Webamooz\Ticket\Models\Ticket::STATUS_OPEN }}">جدید ها (خوانده نشده)</a>

        <a class="tab__item {{ request()->status == 'replied' ? 'is-active' : '' }}"
           href="?{{ request()->getQueryString() }}&status={{ \Webamooz\Ticket\Models\Ticket::STATUS_REPLIED }}">پاسخ داده شده ها</a>

        <a class="tab__item {{ request()->status == 'close' ? 'is-active' : '' }}"
           href="?{{ request()->getQueryString() }}&status={{ \Webamooz\Ticket\Models\Ticket::STATUS_CLOSE }}">بسته شده</a>
    @endcan

    <a class="tab__item" href="{{ route('tickets.create') }}">ارسال تیکت جدید</a>

</div>

@can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_TICKETS)
    <div class="bg-white padding-20">
        <div class="t-header-search">
            <form action="{{ route('tickets.index') }}" method="GET">
                <div class="t-header-searchbox font-size-13">
                    <input type="text" class="text search-input__box font-size-13" placeholder="جستجوی در تیکت ها">
                    <div class="t-header-search-content ">
                        <input type="text" class="text" placeholder="عنوان تیکت" name="title" value="{{ request()->title }}">
                        <input type="text" class="text" placeholder="ایمیل" name="email" value="{{ request()->email }}">
                        <input type="text" class="text " placeholder="نام و نام خانوادگی" name="name" value="{{ request()->name }}">
                        <input type="text" class="text mb-2-custom" placeholder="تاریخ مثال : 1403/06/08" name="date" value="{{ request()->date }}">
                        <button type="submit" class="btn btn-webamooz_net">جستجو</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
@endcan

<td>{{ str_replace('-' , '/' , \Morilog\Jalali\Jalalian::fromCarbon($ticket->updated_at)) }}</td>





//-------------------- modules/Webamooz/Ticket/Http/Controllers/TicketController.php
public function index(Request $req)
{
    $tickets = $this->ticketRepo->paginateAll(12, auth()->id());

    if (auth()->user()->hasAnyPermission([Permission::PERMISSION_MANAGE_TICKETS, Permission::PERMISSION_SUPER_ADMIN])) {
        $tickets = $this->ticketRepo
            ->joinUsers()
            ->searchTitle($req->title)
            ->searchEmail($req->email)
            ->searchName($req->name)
            ->searchDate(Generate::getDateJaliliToMiadi($req->date))
            ->searchStatus($req->status)
            ->paginate(12);
    }
    return view("Tickets::index", compact('tickets'));
}




//-------------------- modules/Webamooz/Ticket/Database/Repositories/TicketRepositories.php
private $query;
public function __construct()
{
    $this->query = Ticket::query();
}

public function paginateAll($count = 10, $user_id = null)
{
    $query = Ticket::query();
    if ($user_id) {
        return $query->where('user_id', $user_id)->paginate($count);
    }

    return $query->latest()->paginate($count);  //اگر آیدی کاربر نداشت یعنی برای ادمین یا مدیریت تیکت باید نمایش بدیم همه
}

public function joinUsers()
{
    //join -> One)روی چه جدولی میخوای جوین بزنی  two)مقدار جدولی که کوری زدیم ازش تیکت به کاربر کدوم ستون  three)مقدار ستون جدول جوین شده
    $this->query->join("users", 'tickets.user_id', 'users.id')->select('tickets.*', 'users.email', 'users.name');
    return $this;
}

public function searchTitle($title)
{
    if (!is_null($title))
        $this->query->where("tickets.title", "LIKE", "%" . $title . "%");
    return $this;
}

public function searchEmail($email)
{
    if (!is_null($email))
        $this->query->where('users.email', 'LIKE', '%' . $email . '%');
    return $this;  //مه میریزه درون اون کوری متفیر پرایوت و پشت هم وصل میشه دستورات کوری
}

public function searchName($name)
{
    if (!is_null($name))
        $this->query->where('users.name', 'LIKE', '%' . $name . '%');
    return $this;
}

public function searchDate($date)
{
    if (!is_null($date)) {
        $this->query->whereDate('tickets.updated_at', '=', $date);
    }
    return $this;
}

public function searchStatus($status)
{
    if (!is_null($status)) {
        $this->query->where('tickets.status', '=', $status);
    }
    return $this;
}

public function paginate($count = 10)
{
    return $this->query->latest()->paginate($count);
}






























//----------------------------------------------------------------------------------------- Lesson 204 (Composer update)
1) composer update
2) composer dumpo-autoload























//--------------------------------------------------------------------------------------- Lesson 205 (Tests for tickets)
//-------------------- phpunit.xml
<testsuite name="Feature">  <!-- Unit از چه نوع تستی فیچر یا یونیت -->
    <directory suffix="Test.php">./modules/Webamooz/Ticket/Tests/Feature</directory> <!-- ./modules/Webamooz/User/Tests/Feature آدرس -->
</testsuite>




//-------------------- modules/Webamooz/Ticket/Tests/Feature/TicketTest.php
class TicketTest extends TestCase
{

    use WithFaker, RefreshDatabase;

    public function test_user_can_see_tickets()
    {
        $this->actingAsUser();
        $this->get(route('tickets.index'))->assertOk();
    }

    public function test_user_can_see_create()
    {
        $this->actingAsUser();
        $this->get(route('tickets.create'))->assertOk();
    }

    public function test_user_can_store_ticket()
    {
        $this->actingAsUser();
        $this->createTicket();
        $this->assertEquals(1, Ticket::get()->count());
    }

    public function test_permitted_user_can_delete_ticket()
    {
        $this->actingAsAdmin();
        $this->createTicket();
        $this->assertEquals(1, Ticket::get()->count());

        $this->delete(route('tickets.destroy', 1))->assertOk();
    }

    public function test_user_can_not_delete_ticket()
    {
        $this->actingAsUser();
        $this->createTicket();
        $this->assertEquals(1, Ticket::get()->count());

        $this->delete(route('tickets.destroy', 1))->assertStatus(403);
    }


    //-------------------- User Create
    private function actingAsAdmin()
    {
        /*$user = User::create([
            'name' => 'mahdi',
            'email' => 'mahdi@gmail.com',
            'mobile' => '9398187800',
            'email_verified_at' => now(),
            'password' => \Hash::make('12aBC!@'),
            'remember_token' => Str::random(10),
        ]);*/
        $this->actingAs(User::factory()->create());  //actingAs -> authentication + factory(User::class))->create() -> create user
        $this->actingAs(User::factory()->create());
        $this->seed(RolePermissionTableSeeder::class);  //create permission + role
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_TICKETS);
    }

    public function actingAsUser()
    {
        $this->actingAs(User::factory()->create());  //actingAs -> authentication + factory(User::class))->create() -> create user
        $this->seed(RolePermissionTableSeeder::class);  //create permission + role
    }

    private function createTicket()
    {
        Ticket::create([
            'user_id' => auth()->user()->id,
            'title' => $this->faker->title(),
            'ticketable_id' => $this->faker->numberBetween(1, 4),  //Relationship One To Many
            'ticketable_type' => 'Webamooz\Course\Models\Course',  //object + Relationship One To Many
        ]);
//      $this->post(route('tickets.store'), ['title' => $this->faker->title(), 'course' => $this->faker->numberBetween(1, 4), 'body' => $this->faker->unique()->text()]);
    }

}























//------------------------------------------------------------------- Lesson 206 (Initial comments module and migration)
1) composer du
2) php artisan make:model Comment -m




//-------------------- composer.json
"autoload": {
    "psr-4": {
        "App\\": "app/",
        "Webamooz\\Comment\\": "modules/Webamooz/Comment/",
    }
},




//-------------------- config/app.php
\Webamooz\Comment\Providers\CommentServiceProvider::class,




//-------------------- modules/Webamooz/Comment/Providers/CommentServiceProvider.php
public function register()
{
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Comments');
}



//-------------------- modules/Webamooz/Comment/Database/Migrations/2024_08_29_132024_create_comments_table.php
public function up()
{
    Schema::create('comments', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->foreignId('comment_id')->nullable();
        $table->unsignedBigInteger('commentable_id');
        $table->string('commentable_type');
        $table->text('body');
        $table->enum('status', \Webamooz\Comment\Models\Comment::$statuses)
            ->default(\Webamooz\Comment\Models\Comment::STATUS_NEW);
        $table->timestamps();
        $table->foreign('comment_id')->references('id')->on('comments')->onDelete('cascade');
    });
}



//-------------------- modules/Webamooz/Comment/Models/Comment.php
const STATUS_NEW = 'new';
const STATUS_APPROVED = 'approved';
const STATUS_REJECTED = 'rejected';

public static array $statuses = [
    self::STATUS_NEW,
    self::STATUS_APPROVED,
    self::STATUS_REJECTED,
];

protected $fillable = [
    'user_id',
    'comment_id',
    'commentable_id',
    'commentable_type',
    'body',
    'status',
];




//-------------------- modules/Webamooz/User/Models/User.php
public function comments()
{
    return $this->hasMany(Comment::class);
}





































//-------------------------------------------------------------------------------------- Lesson 207 (Views for comments)
//-------------------- modules/Webamooz/Front/Resources/Views/singleCourse.blade.php
    @includeIf('Front::layouts.comments.index')
</main>
@endsection




//-------------------- modules/Webamooz/Front/Resources/Views/layouts/comments/index.blade.php
<div class="container">
    <div class="comments">
        {{-- Create From Comment --}}
        @include('Front::comments.create')

        <div class="comments-list">
            {{-- Modal Reply --}}
            @includeIf('Front::comments.reply')

            <ul class="comment-list-ul">
                <div class="div-btn-answer">
                    <button class="btn-answer">پاسخ به دیدگاه</button>
                </div>
                <li class="is-comment">
                    <div class="comment-header">
                        <div class="comment-header-avatar">
                            <img src="img/profile.jpg">
                        </div>
                        <div class="comment-header-detail">
                            <div class="comment-header-name">کاربر : گوگل گوگل گوگل گوگل</div>
                            <div class="comment-header-date">10 روز پیش</div>
                        </div>
                    </div>
                    <div class="comment-content">
                        <p>لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده
                            از طراحان گرافیک است. چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است و
                            برای شرایط فعلی تکنولوژی مورد نیاز و کاربردهای متنوع با هدف بهبود ابزارهای کاربردی می باشد.
                        </p>
                    </div>
                </li>



//-------------------- modules/Webamooz/Front/Resources/Views/layouts/comments/create.blade.php
<div class="comment-main">
    <div class="ct-header">
        <h3>نظرات ( 180 )</h3>
        <p>نظر خود را در مورد این مقاله مطرح کنید</p>
    </div>

    <form action="{{ route('comments.store' , $course->id) }}" method="POST">
        @csrf
        <div class="ct-row">
            <div class="ct-textarea">
                <x-textarea class="txt ct-textarea-field" name="body" placeholder="متن نظر را وارد نمایید" />
            </div>
        </div>
        <div class="ct-row">
            <div class="send-comment">
                <button type="submit" class="btn i-t">ثبت نظر</button>
            </div>
        </div>
    </form>
</div>




//-------------------- modules/Webamooz/Front/Resources/Views/comments/reply.blade.php
<div id="Modal2" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <p>ارسال پاسخ</p>
            <div class="close">&times;</div>
        </div>
        <div class="modal-body">
            <form action="" method="POST">
                @csrf
                <x-textarea class="txt hi-220px" name="body" placeholder="متن دیدگاه" />
                <button type="submit" class="btn i-t">ثبت پاسخ</button>
            </form>
        </div>

    </div>
</div>
































//---------------------------------------------------------------- Lesson 208 (Routes and controller for Comment module)
//-------------------- modules/Webamooz/Comment/Providers/CommentServiceProvider.php
protected string $namespace = "Webamooz\Comment\Http\Controllers";

public function register()
{
    Route::middleware(['web', 'auth'])->namespace($this->namespace)->group(__DIR__ . '/../Routes/comments_routes.php');
//      $this->.$this->loadRoutesFrom(__DIR__ . '/../Routes/comments_routes.php');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Comments');
}



//-------------------- modules/Webamooz/Comment/Routes/comments_routes.php
//commentable -> این کامنت میتونه برای قسمت های مختلفی باش مثل دوره و وبلاگ و آیدی و اسم مادل میگیره و پولی مورفیسم
Route::group([], function ($router) {
    $router->post('comments/{commentable}', [CommentController::class, 'store'])->name('comments.store');  //commentable -> id
});




























//------------------------------------------------------------------------------- Lesson 209 (Reolations and validation)
*) method_exists($value,"comments");  //One)درون آبجکت یا مادل دوره برو بگرد  Two)درون مادل بگرد ببین همچین متودی داره
1) php artisan make:request CommentRequest
2) php artisan make:Rule IsCommentable




//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function store(CommentRequest $request)
{
    //Webamooz\Course\Models\Course::find(1)
    $commentable = $request->commentable_type::findOrFail($request->commentable_id);  //از طریق مادل گرفتیم دیتا دوره مد نظر
    dd($commentable);
}




//-------------------- Http/Requests/CommentRequest.php
public function rules()
{
    return [
        'body' => ['required', 'string'],
        'commentable_id' => ['required', 'numeric'],
        'commentable_type' => ['required', 'string', new CommentableRule()]
    ];
}
public function attributes()
{
    return [
        'body' => 'متن نظر'
    ];
}




//-------------------- modules/Webamooz/Comment/Rules/CommentableRule.php
public function passes($attribute, $value)  //$attribute(nameInput)=commentable_type + $value=Webamooz\Course\Models\Course
{
    return class_exists($value) && method_exists($value,"comments");  //method_exists -> One)درون آبجکت یا مادل دوره برو بگرد  Two)درون مادل بگرد ببین همچین متودی داره
}

public function message()
{
    return 'The validation error message.';
}





//-------------------- modules/Webamooz/Comment/Models/Comment.php
public function commaneable()  //commaneable -> اسمی جز این اسم درون دیتابیس گذاشتیم بزاریم باید در مقدار اول (مورف تو) این نام قرار بدیم که بشناسه
{
    return $this->morphTo();  //One To Many + morphTo===belongsTo
}
public function user()
{
    return $this->belongsTo(User::class);
}




//-------------------- modules/Webamooz/Course/Models/Course.php
public function comments()  //Relationship One To Many + morphMany===hasMany
{
    return $this->morphMany(Comment::class , 'commentable');  //1)Model  2)name relation (paymentable) اسم ستون درون پیمنت
}


































//------------------------------------------------------------------------------------------ Lesson 210 (Store comments)
1) php artisan db:seed --class=Webamooz\RolePermissions\Database\Seeders\RolePermissionTableSeeder




//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
private CommentRepositories $commentRepo;
public function __construct(CommentRepositories $commentRepositories)
{
    $this->commentRepo = $commentRepositories;
}

public function store(CommentRequest $request)
{
     //Webamooz\Course\Models\Course::findOrFail(1)
     $commentable = $request->commentable_type::findOrFail($request->commentable_id);  //از طریق مادل گرفتیم دیتا دوره مد نظر
     $this->commentRepo->store($request->all());
     Generate::newFeedback("عملیات موفقیت آمیر" , "دیدگاه شما با موفقیت ثبت شد");
     return redirect($commentable->path());
}





//-------------------- modules/Webamooz/Comment/Database/Repositories/CommentRepositories.php
public function store($data)
{
    return Comment::create([
        'user_id' => auth()->user()->id,
        'comment_id' => array_key_exists('comment_id', $data) ? $data['comment_id'] : null,
        'commentable_id' => $data['commentable_id'],
        'commentable_type' => $data['commentable_type'],
        'body' => $data['body'],
        'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
            ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
    ]);
}





//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
const PERMISSION_MANAGE_COMMENTS = 'manage comments';
public static array $permissions = [  //نمایش لیست بعد سیدر در ویو
    self::PERMISSION_MANAGE_COMMENTS,
];





























//---------------------------------------------------------------------------------- Lesson 211 (Show approved comments)
//-------------------- modules/Webamooz/Front/Resources/Views/singleCourse.blade.php
    @includeIf('Front::comments.index' ,['commentable' => $course])
</main>




//-------------------- modules/Webamooz/Front/Resources/Views/comments/index.blade.php
<div class="comment-main">
    <div class="ct-header">
        <h3>نظرات ( 180 )</h3>
        <p>نظر خود را در مورد این مقاله مطرح کنید</p>
    </div>

    <form action="{{ route('comments.store') }}" method="POST">
        @csrf
        <input type="hidden" name="commentable_id" class="w-100" value="{{ $course->id }}">  {{-- get_class(object) --}}
        <input type="hidden" name="commentable_type" class="w-100" value="{{ get_class($course) }}">  {{-- get_class(object) --}}
        <div class="ct-row">
            <div class="ct-textarea">
                <x-textarea class="txt ct-textarea-field" name="body" placeholder="متن نظر را وارد نمایید" />
            </div>
        </div>
        <div class="ct-row">
            <div class="send-comment">
                <button type="submit" class="btn i-t">ثبت نظر</button>
            </div>
        </div>
    </form>
</div>




//-------------------- modules/Webamooz/Course/Models/Course.php
public function comments()  //Relationship One To Many + morphMany===hasMany
{
    return $this->morphMany(Comment::class, 'commentable');  //1)Model  2)name relation (paymentable) اسم ستون درون پیمنت
}

public function approvedComments()
{
    return $this->morphMany(Comment::class, 'commentable')->where('status', Comment::STATUS_APPROVED);
}




































//----------------------------------------------------------------------------------------- Lesson 212 (Comment replies)
1) php artisan make:rule ApprovedComment




//-------------------- modules/Webamooz/Front/Resources/Views/comments/index.blade.php
<div class="container">
    <div class="comments">
        {{-- Create From Comment --}}
        @include('Front::comments.create' , ['commentable' => $course])

        <div class="comments-list">
            {{-- Modal Reply --}}
            @includeIf('Front::comments.reply',['commentable' => $course])

            @foreach($commentable->approvedComments as $comment)  {{-- SingleCourse.blade.php -> @includeIf('Front::comments.index' ,['commentable' => $course]) --}}
            <ul class="comment-list-ul">
                <div class="div-btn-answer">
                    <button class="btn-answer" onclick="setCommentId({{ $comment->id }})">پاسخ به دیدگاه</button>
                </div>

                <li class="is-comment">
                    <div class="comment-header">
                        <div class="comment-header-avatar">
                            <img src="{{ $comment->user->thumb }}" alt="{{ $comment->user->name }}">
                        </div>
                        <div class="comment-header-detail">
                            <div class="comment-header-name"> کاربر : {{ $comment->user->name }}</div>
                            <div
                                class="comment-header-date">{{ \Morilog\Jalali\Jalalian::fromCarbon($comment->created_at) }}</div>
                        </div>
                    </div>
                    <div class="comment-content">
                        <p>{{ $comment->body }}</p>
                    </div>
                </li>

                @foreach ($comment->comments as $reply)
                    <li class="is-answer">
                        <div class="comment-header">
                            <div class="comment-header-avatar">
                                <img src="{{ $reply->user->thumb }}" alt="{{ $reply->user->name }}">
                            </div>
                            <div class="comment-header-detail">
                                <div class="comment-header-name"> کاربر : {{ $reply->user->name }}</div>
                                <div
                                    class="comment-header-date">{{ \Morilog\Jalali\Jalalian::fromCarbon($reply->created_at) }}</div>
                            </div>
                        </div>
                        <div class="comment-content">
                            <p>{{ $reply->body }}</p>
                        </div>
                    </li>
                @endforeach

            </ul>
            @endforeach

        </div>
    </div>
</div>






//-------------------- modules/Webamooz/Front/Resources/Views/comments/reply.blade.php
<div id="Modal2" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <p>ارسال پاسخ</p>
            <div class="close">&times;</div>
        </div>
        <div class="modal-body">
            <form action="{{ route('comments.store') }}" method="POST">
                @csrf
                <input type="hidden" id="comment_id" name="comment_id" value="">
                <input type="hidden" name="commentable_id" class="w-100" value="{{ $commentable->id }}">  {{-- get_class(object) --}}
                <input type="hidden" name="commentable_type" class="w-100" value="{{ get_class($commentable) }}">  {{-- get_class(object) --}}
                <x-textarea class="txt hi-220px" name="body" placeholder="متن دیدگاه" />

                <button type="submit" class="btn i-t">ثبت پاسخ</button>
            </form>
        </div>

    </div>
</div>





//-------------------- modules/Webamooz/Comment/Http/Requests/CommentRequest.php
public function rules()
{
    return [
        'body' => ['required', 'string'],
        'comment_id' => ['nullable', 'numeric' , new ApprovedComment()],
        'commentable_id' => ['required', 'numeric'],
        'commentable_type' => ['required', 'string', new CommentableRule()]
    ];
}





//-------------------- modules/Webamooz/Comment/Rules/ApprovedComment.php
public function passes($attribute, $value)  //$attribute(nameInput)=comment_id  +  $value=1
{
    $commentRepo = new CommentRepositories();
    return !is_null($commentRepo->findByIdApproved($value));  //$value=comment_id + اگر کامنت وضعیت تایید شده بود و نال نبود
}




//-------------------- modules/Webamooz/Comment/Database/Repositories/CommentRepositories.php
public function findByIdApproved($comment_id)
{
    return Comment::query()->where('status', Comment::STATUS_APPROVED)->where('id' , $comment_id)->first();
}





//-------------------- modules/Webamooz/Course/Models/Course.php
public function comments()  //Relationship One To Many + morphMany===hasMany
{
    return $this->morphMany(Comment::class, 'commentable');  //1)Model  2)name relation (paymentable) اسم ستون درون پیمنت
}

public function approvedComments()
{
    return $this->morphMany(Comment::class, 'commentable')
        ->where('status', Comment::STATUS_APPROVED)
        ->whereNull('comment_id')
        ->with('comments');  //جواب ها و پاسخ های این کانت بردار بیار
}




//-------------------- modules/Webamooz/Comment/Models/Comment.php
public function comment()  //parent(comment)
{
    return $this->belongsTo(Comment::class);
}

public function comments()  //child(replies)
{
    return $this->hasMany(Comment::class);
}




//-------------------- public/js/js.js
function setCommentId(commentableID)
{
    $('#comment_id').val(commentableID);
}








































//--------------------------------------------------------------------------------------- Lesson 213 (HasComments Trait)
//-------------------- modules/Webamooz/Course/Models/Course.php
use HasFactory, HasComments;



//-------------------- modules/Webamooz/Comment/Traits/HasComments.php
trait HasComments
{
    use HasRelationships;  //polymorphic,relations بشناسه روابط ما
    //method_exists($value,"comments");  //One)درون آبجکت یا مادل دوره برو بگرد  Two)درون مادل بگرد ببین همچین متودی داره
    public function comments()  //Relationship One To Many + morphMany===hasMany
    {
        return $this->morphMany(Comment::class, 'commentable');  //1)Model  2)name relation (paymentable) اسم ستون درون پیمنت
    }

    public function approvedComments()
    {
        return $this->morphMany(Comment::class, 'commentable')
            ->where('status', Comment::STATUS_APPROVED)
            ->whereNull('comment_id')
            ->with('comments');  //جواب ها و پاسخ های این کانت بردار بیار
    }
}































//----------------------------------------------------------------------------------- Lesson 214 (Inital comments panel)
//-------------------- modules/Webamooz/Comment/Routes/comments_routes.php
//----- Front Site
Route::group([], function ($router) {  //commentable -> این کامنت میتونه برای قسمت های مختلفی باش مثل دوره و وبلاگ و آیدی و اسم مادل میگیره و پولی مورفیسم
    $router->resource('comments', CommentController::class);
});

//----- Panel Admin
Route::group([], function ($router) {
    $router->get('/comments', ['uses' => 'CommentController@index' , 'as' => 'comments.index']);
});





//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function index()
{
    $comments = $this->commentRepo->paginate(12);
    return view('Comments::index', compact('comments'));
}


































//------------------------------------------------------------------------------------------ Lesson 215 (Comments index)
//-------------------- modules/Webamooz/Comment/Providers/CommentServiceProvider.php
protected string $namespace = "Webamooz\Comment\Http\Controllers";
public function register()
{
    Route::middleware(['web', 'auth'])->namespace($this->namespace)->group(__DIR__ . '/../Routes/comments_routes.php');
//  $this->.$this->loadRoutesFrom(__DIR__ . '/../Routes/comments_routes.php');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Comments');
    $this->loadJsonTranslationsFrom(__DIR__ . '/../Lang/');
}

public function boot()
{
    config()->set('sidebar.items.comments', [
        "icon" => "i-comments",
        "title" => "نظرات کاربران",
        "url" => route('comments.index'),
    ]);
}





//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function index()
{
    $comments = $this->commentRepo->paginate(12);
    return view('Comments::index', compact('comments'));
}





//-------------------- modules/Webamooz/Comment/Database/Repositories/CommentRepositories.php
public function paginate($count = 10)
{
    return Comment::query()->latest()->paginate($count);
}





//-------------------- modules/Webamooz/Comment/Resources/Views/index.blade.php
@extends('Dashboard::master')

@section('title' , 'لیست نظرات')
@section('breadcrumb')
    <li><a href="{{ route('comments.index') }}">نظرات</a></li>
@endsection

@section('content')
    <div class="main-content">
        <div class="tab__box">
            <div class="tab__items">
                <a class="tab__item is-active" href="{{ route('comments.index') }}"> همه نظرات</a>
                <a class="tab__item " href="">نظرات تاییده نشده</a>
                <a class="tab__item " href="">نظرات تاییده شده</a>
            </div>
        </div>
        <div class="bg-white padding-20">
            <div class="t-header-search">
                <form action="" onclick="event.preventDefault();">
                    @csrf
                    <div class="t-header-searchbox font-size-13">
                        <input type="text" class="text search-input__box font-size-13" placeholder="جستجوی در نظرات">
                        <div class="t-header-search-content ">
                            <input type="text"  class="text"  placeholder="قسمتی از متن">
                            <input type="text"  class="text"  placeholder="ایمیل">
                            <input type="text"  class="text margin-bottom-20"  placeholder="نام و نام خانوادگی">
                            <button type="submit" class="btn btn-webamooz_net mt-5">جستجو</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div class="table__box">
            <table class="table">
                <thead role="rowgroup">
                <tr role="row" class="title-row">
                    <th>شناسه</th>
                    <th>ارسال کننده</th>
                    <th>برای</th>
                    <th>دیدگاه</th>
                    <th>تاریخ</th>
                    <th>تعداد پاسخ ها</th>
                    <th>وضعیت</th>
                    <th>عملیات</th>
                </tr>
                </thead>
                <tbody>
                @foreach($comments as $index => $comment)
                    <tr role="row" >
                        <td><a href="">{{ $comments->firstItem() + $index }}</a></td>
                        <td><a href="">{{ $comment->user->name }}</a></td>
                        <td><a href="">{{ $comment->commentable->title }}</a></td>
                        <td>{{ \Illuminate\Support\Str::limit($comment->body , 50) }}</td>
                        <td>{{ \Morilog\Jalali\Jalalian::fromCarbon($comment->created_at) }}</td>
                        <td>{{ $comment->comments()->count() }}</td>
                        <td class="{{ $comment->getStatusCssClass() }}" style="font-weight: bold !important;">@lang($comment->status)</td>
                        <td>
                            <a href="" class="item-edit btn_info_customize mlg-15" title="ویرایش"></a>
                            <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"></a>
                            <a href="" target="_blank" class="item-eye mlg-15 btn_warning_customize" title="مشاهده"></a>
                            <a href="" class="item-confirm mlg-15 btn_success_customize" title="تایید شده"></a>
                            <a href="" class="item-reject mlg-15 btn_red_customize" title="رد شده"></a>
                        </td>
                    </tr>
                @endforeach
                </tbody>
            </table>
        </div>
    </div>
    </div>
@endsection




//-------------------- modules/Webamooz/Comment/Models/Comment.php
public function getStatusCssClass()
{
    if ($this->status == self::STATUS_NEW) return 'text-info_custom';
    elseif ($this->status == self::STATUS_APPROVED) return 'text-success_custom';
    elseif ($this->status == self::STATUS_REJECTED) return 'text-danger_custom';
}



//-------------------- modules/Webamooz/Comment/Lang/fa.json
{
    "new": "جدید",
    "approved": "تایید شده",
    "rejected": "رد شده"
}
































//---------------------------------------------------------------------------------- Lesson 216 (Delete comments part 1)
//-------------------- modules/Webamooz/Comment/Resources/Views/index.blade.php
<a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
    onclick="deleteItem(event , '{{ route('comments.destroy' , $comment->id) }}')"></a>



//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function destroy($comment_id)
{
    $comment = $this->commentRepo->findById($comment_id);
    $comment->delete();
    return AjaxResponses::successResponse('دیدگاه با موفقیت حذف شد');
}




//-------------------- modules/Webamooz/Comment/Database/Repositories/CommentRepositories.php
public function findById($comment_id)
{
    return Comment::query()->find($comment_id);
}































//------------------------------------------------------------------------- Lesson 217 (Add new reply count to comments)
//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function index()
{
    $comments = $this->commentRepo->paginateParents(12);  //paginateParents -> فقط نمایش کامنت ها
    return view('Comments::index', compact('comments'));
}




//-------------------- modules/Webamooz/Comment/Database/Repositories/CommentRepositories.php
public function paginateParents($count = 10)  //فقط کامنت ها نمایش بده نه پاسخ ها
{
    //withCount -> نمایش تعداد یک چیزی از طریق ریلیشن
    return Comment::query()->whereNull('comment_id')->withCount('notApprovedComments')->latest()->paginate($count);
}




//-------------------- modules/Webamooz/Comment/Models/Comment.php
public function notApprovedComments()  //پاسخ خای جدیدی یک کامنت
{
    return $this->hasMany(Comment::class)->where('status', self::STATUS_NEW);  //فقط پاسخ ها اگر وضعیت جدیدی داشت
}



//-------------------- modules/Webamooz/Comment/Resources/Views/index.blade.php
<td>{{ $comment->comments()->count() }} ({{ $comment->not_approved_comments_count }})</td>






























//------------------------------------------------------------------------------ Lesson 218 (Accept and reject comments)
//-------------------- modules/Webamooz/Comment/Routes/comments_routes.php
$router->patch('/comments/{comment}/reject', [CommentController::class, 'reject'])->name('comments.reject');
$router->patch('/comments/{comment}/accept', [CommentController::class, 'accept'])->name('comments.accept');



//-------------------- modules/Webamooz/Comment/Resources/Views/index.blade.php
<a href="" class="item-confirm mlg-15 btn_success_customize" title="تایید شده" onclick="updateConfirmationStatus(event ,
    '{{ route('comments.accept' , $comment->id) }}' , 'آیا از تایید این نظر اطمینان دارید؟' ,'تایید شده','confirmation_status')"></a>
<a href="" class="item-reject mlg-15 btn_red_customize" title="رد شده" onclick="updateConfirmationStatus(event,
    '{{ route('comments.reject' , $comment->id) }}' , 'آیا از رد این نظر اطمینان دارد؟' ,'رد شده', 'confirmation_status')"></a>




//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function reject($comment_id)
{
    $this->commentRepo->updateStatus($comment_id , Comment::STATUS_REJECTED);
    return AjaxResponses::successResponse('دیدگاه با موفقیت رد شد');
}

public function accept($comment_id)
{
    $this->commentRepo->updateStatus($comment_id , Comment::STATUS_APPROVED);
    return AjaxResponses::successResponse('دیدگاه با موفقییت تایید شد');
}




//-------------------- modules/Webamooz/Comment/Database/Repositories/CommentRepositories.php
public function updateStatus($comment_id, $status)
{
    return Comment::query()->where('id', $comment_id)->update([
        'status' => $status
    ]);
}



































//------------------------------------------------------------------------------------- Lesson 219 (Show comment thread)
//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function show($comment_id)
{
    $comment = Comment::query()->where('id', $comment_id)->with(['commentable', 'comments', 'user'])->first();
    return view('Comments::show', compact('comment'));
}




//-------------------- modules/Webamooz/Comment/Resources/Views/show.blade.php
@extends('Dashboard::master')

@section('title' , 'مشاهده نظر')
@section('breadcrumb')
    <li><a href="{{ route('comments.index') }}">نظرات</a></li>
@endsection

@section('content')
    <div class="main-content">
        <div class="show-comment">
            <div class="ct__header">
                <div class="comment-info">
                    <a class="back" href="{{ route('comments.index') }}"></a>
                    <div>
                        <p class="comment-name"><a href="">{{ $comment->commentable->title }}</a></p>
                    </div>
                </div>
            </div>

            @include('Comments::comment' , ['comment' => $comment , 'isAnswer' => false])

            @foreach ($comment->comments as $reply)
                @include('Comments::comment' , ['comment' => $reply , 'isAnswer' => true])
            @endforeach

        </div>
        <div class="answer-comment">
            <p class="p-answer-comment">ارسال پاسخ</p>
            <form action="" method="POST">
                <textarea class="textarea" placeholder="متن پاسخ نظر"></textarea>
                <button class="btn btn-webamooz_net">ارسال پاسخ</button>
            </form>
        </div>
    </div>
@endsection





//-------------------- modules/Webamooz/Comment/Resources/Views/comment.blade.php
<div class="transition-comment {{ $isAnswer ? 'is-answer' : '' }}">
    <div class="transition-comment-header">
       <span>
           <img src="{{ $comment->user->thumb }}" class="logo-pic" alt="{{ $comment->user->name }}">
       </span>
        <span class="nav-comment-status">
            <p class="username"> کاربر : {{ $comment->user->name }}</p>
            <p class="comment-date">{{ $comment->created_at->diffForHumans() }}</p>
        </span>

        <div class="comment-action">
            <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف" onclick="deleteItem(event , '{{ route('comments.destroy' , $comment->id) }}')"></a>
            <a href="" class="item-confirm mlg-15 btn_success_customize" title="تایید شده" onclick="updateConfirmationStatus(event ,
                '{{ route('comments.accept' , $comment->id) }}' , 'آیا از تایید این نظر اطمینان دارید؟' ,'تایید شده','confirmation_status')"></a>
            <a href="" class="item-reject mlg-15 btn_red_customize" title="رد شده" onclick="updateConfirmationStatus(event,
                '{{ route('comments.reject' , $comment->id) }}' , 'آیا از رد این نظر اطمینان دارد؟' ,'رد شده', 'confirmation_status')"></a>
        </div>

    </div>
    <div class="transition-comment-body">
        <pre>{{ $comment->body }}</pre>
    </div>
</div>

































//--------------------------------------------------------------------------------- Lesson 220 (Manage comment replaies)
//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function show($comment_id)
{
    $comment = Comment::query()->where('id', $comment_id)->with(['commentable', 'comments', 'user'])->first();
    return view('Comments::show', compact('comment'));
}




//-------------------- modules/Webamooz/Comment/Resources/Views/show.blade.php
@extends('Dashboard::master')

@section('title' , 'مشاهده نظر')
@section('breadcrumb')
    <li><a href="{{ route('comments.index') }}">نظرات</a></li>
@endsection

@section('content')
    <div class="main-content">
        <div class="show-comment">
            <div class="ct__header">
                <div class="comment-info">
                    <a class="back" href="{{ route('comments.index') }}"></a>
                    <div>
                        <p class="comment-name"><a href="">{{ $comment->commentable->title }}</a></p>
                    </div>
                </div>
            </div>

            @include('Comments::comment' , ['comment' => $comment , 'isAnswer' => false])

            @foreach ($comment->comments as $reply)
                @include('Comments::comment' , ['comment' => $reply , 'isAnswer' => true])
            @endforeach

        </div>
        <div class="answer-comment">
            <p class="p-answer-comment">ارسال پاسخ</p>
            <form action="{{ route('comments.store') }}" method="POST">
                @csrf
                <input type="hidden" name="comment_id" value="{{ $comment->id }}">
                <input type="hidden" name="commentable_id" class="w-100" value="{{ $comment->commentable->id }}">  {{-- get_class(object) --}}
                <input type="hidden" name="commentable_type" class="w-100" value="{{ get_class($comment->commentable) }}">  {{-- get_class(object) --}}
                <x-textarea class="txt hi-220px" name="body" placeholder="متن دیدگاه" />

                <button type="submit" class="btn i-t">ثبت پاسخ</button>
            </form>
        </div>
    </div>
@endsection






//-------------------- modules/Webamooz/Comment/Resources/Views/comment.blade.php
<div class="transition-comment {{ $isAnswer ? 'is-answer' : '' }}">
    <div class="transition-comment-header">
       <span>
           <img src="{{ $comment->user->thumb }}" class="logo-pic" alt="{{ $comment->user->name }}">
       </span>
        <span class="nav-comment-status">
            <p class="username"> کاربر : {{ $comment->user->name }}</p>
            <p class="comment-date">{{ $comment->created_at->diffForHumans() }}</p>
            <span> وضعیت : <span class="confirmation_status {{ $comment->getStatusCssClass() }}">@lang($comment->status)</span></span>
        </span>

        @if ($isAnswer)
            <div class="comment-action">
                <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف"
                   onclick="deleteItem(event , '{{ route('comments.destroy' , $comment->id) }}' , 'div.transition-comment-header')"></a>
                <a href="" class="item-confirm mlg-15 btn_success_customize" title="تایید شده" onclick="updateConfirmationStatus(event ,
                    '{{ route('comments.accept' , $comment->id) }}' , 'آیا از تایید این نظر اطمینان دارید؟' ,'تایید شده','confirmation_status' ,'div.transition-comment-header' , 'span.')"></a>
                <a href="" class="item-reject mlg-15 btn_red_customize" title="رد شده" onclick="updateConfirmationStatus(event,
                    '{{ route('comments.reject' , $comment->id) }}' , 'آیا از رد این نظر اطمینان دارد؟' ,'رد شده', 'confirmation_status' ,'div.transition-comment-header' , 'span.')"></a>
            </div>
        @endif

    </div>
    <div class="transition-comment-body">
        <pre>{{ $comment->body }}</pre>
    </div>
</div>






//-------------------- public/panel/js/js.js
function updateConfirmationStatus(event, route, message, status, field, parent = 'tr', target = 'td.') {
    event.preventDefault()

    if (confirm(message)) {  //confirm ok or true -> condition
        //1)url , 2)parameters(@ method('delete') , @ csrf)
        $.post(route, {_token: $('meta[name="_token"]').attr('content'), _method: "PATCH"})
            .done(function (response) {  //اگر درست بود این اجرا میکنه + خود جی کوری شرط ایف درونش داره + response get jquery
                $(event.target).closest(parent).find(target + field).text(status);
                if (status == "تایید شده" || status == "باز شده") {
                    $(event.target).closest(parent).find(target + field).html("<span class='text-success fw-bold'>" + status + "</span>");  //convert jquery
                } else {
                    $(event.target).closest(parent).find(target + field).html("<span class='text-error fw-bold'>" + status + "</span>");  //convert jquery
                }

                //event.target(tag a) + closest('tr' اگر تگ لینک بزاریک فقط دکمه حذف) نزدیک ترین تی آر بگیر + remove() حذف بکن
                // $(event.target).closest('tr').find('td.' + field).text(status);  //convert jquery
                $.toast({
                    heading: response.status,
                    text: response.message,
                    showHideTransition: 'slide',
                    icon: 'success'
                })
            })

            .fail(function (response) {  //اگر غلط باش این مقدار اجرا میکنه + خود جی کوری شرط ایف درونش داره + response get jquery
                $.toast({
                    heading: 'عملیات نا موفق',
                    text: 'عملیات با خطا مواجه شد!',
                    showHideTransition: 'slide',
                    icon: 'error'
                })
            })
    }
}



































//------------------------------------------------------------------ Lesson 221 (Submit reply to comment from dashbaord)
//-------------------- modules/Webamooz/Comment/Resources/Views/show.blade.php
@extends('Dashboard::master')

@section('title' , 'مشاهده نظر')
@section('breadcrumb')
    <li><a href="{{ route('comments.index') }}">نظرات</a></li>
@endsection

@section('content')
    <div class="main-content">
        <div class="show-comment">
            <div class="ct__header">
                <div class="comment-info">
                    <a class="back" href="{{ route('comments.index') }}"></a>
                    <div>
                        <p class="comment-name"><a href="">{{ $comment->commentable->title }}</a></p>
                    </div>
                </div>
            </div>

            @include('Comments::comment' , ['comment' => $comment , 'isAnswer' => false])

            @foreach ($comment->comments as $reply)
                @include('Comments::comment' , ['comment' => $reply , 'isAnswer' => true])
            @endforeach

        </div>
        @if ($comment->status == \Webamooz\Comment\Models\Comment::STATUS_APPROVED)
            <div class="answer-comment">
                <p class="p-answer-comment">ارسال پاسخ</p>
                <form action="{{ route('comments.store') }}" method="POST">
                    @csrf
                    <input type="hidden" name="comment_id" value="{{ $comment->id }}">
                    <input type="hidden" name="commentable_id" class="w-100" value="{{ $comment->commentable->id }}">  {{-- get_class(object) --}}
                    <input type="hidden" name="commentable_type" class="w-100" value="{{ get_class($comment->commentable) }}">  {{-- get_class(object) --}}
                    <x-textarea class="txt hi-220px" name="body" placeholder="متن دیدگاه" />

                    <button type="submit" class="btn i-t">ثبت پاسخ</button>
                </form>
            </div>
        @else
            <p class="text-danger_custom">جهت ارسال پاسخ به این دیدیگاه لطفا ابتدا آن را تایید کنید.</p>
        @endif
    </div>
@endsection




//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function store(CommentRequest $request)
{
    //Webamooz\Course\Models\Course::findOrFail(1)
    //$commentable = $request->commentable_type::findOrFail($request->commentable_id);  //از طریق مادل گرفتیم دیتا دوره مد نظر
    $this->commentRepo->store($request->all());
    Generate::newFeedback("عملیات موفقیت آمیر", "دیدگاه شما با موفقیت ثبت شد");
    return back();
}



































//----------------------------------------------------------------------------------------- Lesson 222 (Search comments)
//-------------------- modules/Webamooz/Comment/Resources/Views/index.blade.php
<div class="tab__box">
    <div class="tab__items">
        <a class="tab__item @if(request()->status == '') is-active @endif" href="{{ route('comments.index') }}"> همه نظرات</a>

        <a class="tab__item @if(request()->status == 'rejected') is-active @endif"
           href="{{ route('comments.index') }}?status={{ \Webamooz\Comment\Models\Comment::STATUS_REJECTED }}" >نظرات رد شده</a>

        <a class="tab__item @if(request()->status == 'approved') is-active @endif"
           href="{{ route('comments.index') }}?status={{ \Webamooz\Comment\Models\Comment::STATUS_APPROVED }}" >نظرات تاییده شده</a>

        <a class="tab__item @if(request()->status == 'new') is-active @endif"
           href="{{ route('comments.index') }}?status={{ \Webamooz\Comment\Models\Comment::STATUS_NEW }}" >نظرات جدید</a>
    </div>
</div>

<div class="bg-white padding-20">
    <div class="t-header-search">
        <form action="{{ route('comments.index') }}" method="GET">
            <div class="t-header-searchbox font-size-13">
                <input type="text" class="text search-input__box font-size-13" placeholder="جستجوی در نظرات">
                <div class="t-header-search-content ">
                    <input type="text" class="text" placeholder="قسمتی از متن" name="body" value="{{ request()->body }}">
                    <input type="text" class="text" placeholder="ایمیل" name="email" value="{{ request()->email }}" >
                    <input type="text" class="text margin-bottom-20" placeholder="نام و نام خانوادگی" name="name" value="{{ request()->name }}" >
                    <button type="submit" class="btn btn-webamooz_net mt-5">جستجو</button>
                </div>
            </div>
        </form>
    </div>
</div>




//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function index(Request $req)
{
    $comments = $this->commentRepo
//      ->searchJoinUser()
        ->searchStatus($req->status)
        ->searchBody($req->body)
        ->searchEmail($req->email)
        ->searchName($req->name)
        ->paginateParents(12);  //paginateParents -> فقط نمایش کامنت ها
    return view('Comments::index', compact('comments'));
}




//-------------------- modules/Webamooz/Comment/Database/Repositories/CommentRepositories.php
class CommentRepositories
{

    private $query;
    public function __construct()
    {
        $this->query = Comment::query();
    }

    public function paginateParents($count = 10)  //فقط کامنت ها نمایش بده نه پاسخ ها
    {
        //withCount -> نمایش تعداد یک چیزی از طریق ریلیشن
        return $this->query->whereNull('comment_id')->withCount('notApprovedComments')->latest()->paginate($count);

        /*$query = Comment::whereNull('comment_id')->withCount('notApprovedComments');
        if(! is_null($status)){
            $query->where('status' , $status);
        }
        return $query->latest()->paginate($count);*/
    }

    //----- Search
    /*public function searchJoinUser()
    {
        $this->query->join('users', 'comments.user_id', 'users.id')
            ->select('comments.*', 'users.name', 'users.email');
        return $this;
    }*/

    public function searchStatus($status)
    {
        if (!is_null($status)) {
            $this->query->where('status', $status);
        }
        return $this;
    }

    public function searchBody($body)
    {
        if (!is_null($body)) {
            $this->query->where('body', 'LIKE', '%' . $body . '%');
        }
        return $this;
    }

    public function searchEmail($email)
    {
        if (!is_null($email))
            $this->query->whereHas('user', function ($q) use ($email) {
                $q->where('email', 'LIKE', '%' . $email . '%');  //کوری ما درون جدول کاربران زده میشه
            });
        return $this;
    }

    public function searchName($name)
    {
        if (!is_null($name))
            $this->query->whereHas('user', function ($q) use ($name) {
                $q->where('name', 'LIKE', '%' . $name . '%');
            });
        return $this;
    }
    //----- Search
}



































//----------------------------------------------------------------------------------------- Lesson 223 (Comments policy)
1) php artisan make:policy CommentPolicy




//-------------------- modules/Webamooz/Comment/Providers/CommentServiceProvider.php
public function register()
{
    Gate::policy(Comment::class, CommentPolicy::class);  //1)Model 2)Policy
}





//-------------------- modules/Webamooz/Comment/Policies/CommentPolicy.php
public function manage($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COMMENTS)) return true;
    return null;
}

public function index($user)
{
    if ($user->hasAnyPermission([Permission::PERMISSION_MANAGE_COMMENTS, Permission::PERMISSION_TEACH])) return true;
    return null;
}

public function view($user, $comment)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_COMMENTS) || $user->id == $comment->commentable->teacher_id) return true;
    return null;
}





//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function index(Request $req)
{
    $this->authorize('index', Comment::class);

    $comments = $this->commentRepo
//      ->searchJoinUser()
        ->searchStatus($req->status)
        ->searchBody($req->body)
        ->searchEmail($req->email)
        ->searchName($req->name)
        ->paginateParents(8);  //paginateParents -> فقط نمایش کامنت ها

    if (!auth()->user()->hasAnyPermission(Permission::PERMISSION_MANAGE_COMMENTS, Permission::PERMISSION_SUPER_ADMIN)) {
        /*$comments->query()->where('id' , '=' , 4)->whereHasMorph("commentable", [Course::class] , function ($query) {
            return $query->where("teacher_id", auth()->id());
        });*/
         $comments = Comment::query()
             ->whereHas('commentable' , function ($q) {
             return $q->where('teacher_id' , auth()->user()->id);
         })->whereNull('comment_id')
             ->withCount('notApprovedComments')
             ->latest()
             ->paginate();
    }
    return view('Comments::index', compact('comments'));
}





//-------------------- modules/Webamooz/Front/Resources/Views/comments/index.blade.php  //Front
<div class="container">
    <div class="comments">
        {{-- Create From Comment --}}
        @if (auth()->user())
            @include('Front::comments.create' , ['commentable' => $course])
        @else
            <div class="comment-main">
                <div class="ct-header">
                    <p>برای ثبت دیدگاه باید ابتدا <a href="{{ route('login') }}" class="text-info_custom">وارد سایت</a> شوید</p>
                </div>
            </div>
        @endif

        <div class="comments-list">
            {{-- Modal Reply --}}
            @auth
                @includeIf('Front::comments.reply',['commentable' => $course])
            @endauth

            @foreach($commentable->approvedComments as $comment)  {{-- SingleCourse.blade.php -> @includeIf('Front::comments.index' ,['commentable' => $course]) --}}
            <ul class="comment-list-ul">
                @auth
                    <div class="div-btn-answer">
                        <button class="btn-answer" onclick="setCommentId({{ $comment->id }})">پاسخ به دیدگاه</button>
                    </div>
                @endauth

































//--------------------------------------------------------------------------- Lesson 224 (Comments some minor bug fixes)
//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function index(Request $req)
{
    $this->authorize('index', Comment::class);

    $comments = $this->commentRepo
//      ->searchJoinUser()
        ->searchStatus($req->status)
        ->searchBody($req->body)
        ->searchEmail($req->email)
        ->searchName($req->name)
        ->paginateParents(12);  //paginateParents -> فقط نمایش کامنت ها

    if (!auth()->user()->hasAnyPermission(Permission::PERMISSION_MANAGE_COMMENTS, Permission::PERMISSION_SUPER_ADMIN)) {
        /*$comments->query()->where('id' , '=' , 4)->whereHasMorph("commentable", [Course::class] , function ($query) {
            return $query->where("teacher_id", auth()->id());
        });*/
         $comments = Comment::query()
             ->whereHas('commentable' , function ($q) {
             return $q->where('teacher_id' , auth()->user()->id);
         })->whereNull('comment_id')
             ->where('status' , Comment::STATUS_APPROVED)
             ->withCount('notApprovedComments')
             ->latest()
             ->paginate();
    }
    return view('Comments::index', compact('comments'));
}





//-------------------- modules/Webamooz/Comment/Resources/Views/index.blade.php
<div class="tab__items">
    <a class="tab__item @if(request()->status == '') is-active @endif" href="{{ route('comments.index') }}"> همه نظرات</a>

    @can(\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_COMMENTS)
        <a class="tab__item @if(request()->status == 'rejected') is-active @endif"
           href="{{ route('comments.index') }}?status={{ \Webamooz\Comment\Models\Comment::STATUS_REJECTED }}" >نظرات رد شده</a>

        <a class="tab__item @if(request()->status == 'approved') is-active @endif"
           href="{{ route('comments.index') }}?status={{ \Webamooz\Comment\Models\Comment::STATUS_APPROVED }}" >نظرات تاییده شده</a>

        <a class="tab__item @if(request()->status == 'new') is-active @endif"
           href="{{ route('comments.index') }}?status={{ \Webamooz\Comment\Models\Comment::STATUS_NEW }}" >نظرات جدید</a>
    @endcan
</div>

<td>
    <a href="{{ route('comments.show' , $comment->id) }}" class="item-eye mlg-15 btn_warning_customize" title="مشاهده"></a>
    @if(auth()->user()->hasAnyPermission([\Webamooz\RolePermissions\Model\Permission::PERMISSION_MANAGE_COMMENTS ,                                                                                       \Webamooz\RolePermissions\Model\Permission::PERMISSION_SUPER_ADMIN]))
        <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف" onclick="deleteItem(event , '{{ route('comments.destroy' , $comment->id) }}')"></a>
        <a href="" class="item-confirm mlg-15 btn_success_customize" title="تایید شده" onclick="updateConfirmationStatus(event ,
            '{{ route('comments.accept' , $comment->id) }}' , 'آیا از تایید این نظر اطمینان دارید؟' ,'تایید شده','confirmation_status')"></a>
        <a href="" class="item-reject mlg-15 btn_red_customize" title="رد شده" onclick="updateConfirmationStatus(event,
            '{{ route('comments.reject' , $comment->id) }}' , 'آیا از رد این نظر اطمینان دارد؟' ,'رد شده', 'confirmation_status')"></a>
    @endif
</td>





































//------------------------------------------------------------------------------------------- Lesson 225 (Comments test)
//-------------------- phpunit.xml
<testsuite name="Feature">  <!-- Unit از چه نوع تستی فیچر یا یونیت -->
    <directory suffix="Test.php">./modules/Webamooz/Comment/Tests/Feature</directory> <!-- ./modules/Webamooz/User/Tests/Feature آدرس -->
</testsuite>




//-------------------- modules/Webamooz/Comment/Tests/Feature/TicketTest.php
class CommentTest extends TestCase
{

    use WithFaker, RefreshDatabase;

    //---------- index
    public function test_permitted_user_can_see_comments_index()
    {
        $this->actingAsSuperAdmin();
        $this->get(route('comments.index'))->assertOk();

        $this->actingAsAdminComment();
        $this->get(route('comments.index'))->assertOk();
    }


    public function test_normal_user_can_not_see_comments_index()
    {
        $this->actingAsUser();
        $this->get(route('comments.index'))->assertStatus(403);
    }

    //---------- store
    public function test_user_can_store_comment()
    {
        $this->actingAsUser();  //یک کاربر ساده میتونه کامنت بزاره
        $course = $this->createCourse();

        $this->post(route('comments.store', [
            'user_id' => auth()->user()->id,
            'comment_id' => null,  //comment because comment_id null
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => Comment::STATUS_NEW,
        ]))->assertRedirect();

        $this->assertEquals(1, Comment::all()->count());
    }

    //---------- reply
    public function test_user_can_not_reply_to_unapproved_comment()
    {
        $this->actingAsUser();
        $course = $this->createCourse();
        //----- create comment
        $this->post(route('comments.store', [
            'user_id' => auth()->user()->id,
            'comment_id' => null,  //comment because comment_id null
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => Comment::STATUS_NEW,
        ]));

        //----- create reply comment
        $this->post(route('comments.store', [
            'user_id' => auth()->user()->id,
            'comment_id' => 1,  //reply comment
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => Comment::STATUS_NEW,
        ]));
        $this->assertEquals(1, Comment::all()->count());  //فقط درون جدول کامنت ما ثبت شده نه پاسخ چون وضعیتش تایید شده نیست
    }

    public function test_permitted_user_can_reply_to_approved_comment()
    {
        $this->actingAsAdminComment();
        $course = $this->createCourse();
        //----- create comment
        $this->post(route('comments.store', [
            'user_id' => auth()->user()->id,
            'comment_id' => null,  //comment because comment_id null
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
                ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
        ]));

        //----- create reply comment
        $this->post(route('comments.store', [
            'user_id' => auth()->user()->id,
            'comment_id' => 1,  //reply comment
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
                ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
        ]));
        $this->assertEquals(2, Comment::all()->count());  //هم کامنت ساختیم و هم پاسخ دادیم و هر دو وضعیت تایید شده
    }

    //---------- show list
    public function test_permitted_user_can_show_list_comments()
    {
        $this->actingAsAdminComment();
        $course = $this->createCourse();
        //----- create comment
        $this->post(route('comments.store', [
            'user_id' => auth()->user()->id,
            'comment_id' => null,  //comment because comment_id null
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
                ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
        ]))->assertRedirect();

        $this->assertEquals(1, Comment::query()->count());

        $this->delete(route('comments.show', 1))->assertOk();
    }

    public function test_user_can_not_show_list_comments()
    {
        $this->actingAsUser();
        $course = $this->createCourse();
        //----- create comment
        $this->post(route('comments.store', [
            'user_id' => auth()->user()->id,
            'comment_id' => null,  //comment because comment_id null
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
                ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
        ]))->assertRedirect();

        $this->assertEquals(1, Comment::query()->count());

        $this->delete(route('comments.show', 1))->assertStatus(403);
    }

    //---------- delete
    public function test_permitted_user_can_delete_comment()
    {
        $this->actingAsAdminComment();
        $course = $this->createCourse();
        //----- create comment
        $this->post(route('comments.store', [
            'user_id' => auth()->user()->id,
            'comment_id' => null,  //comment because comment_id null
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
                ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
        ]))->assertRedirect();

        $this->assertEquals(1, Comment::query()->count());

        $this->delete(route('comments.destroy', 1))->assertOk();
        $this->assertEquals(0, Comment::all()->count());
    }

    public function test_user_can_not_delete_comment()
    {
        $this->actingAsUser();
        $course = $this->createCourse();
        //----- create comment
        $this->post(route('comments.store', [
            'user_id' => auth()->user()->id,
            'comment_id' => null,  //comment because comment_id null
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
                ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
        ]))->assertRedirect();

        $this->assertEquals(1, Comment::query()->count());

        $this->delete(route('comments.destroy', 1))->assertStatus(403);
        $this->assertEquals(1, Comment::get()->count());
    }

    //---------- change status
    public function test_permitted_user_can_change_status_comment()
    {
        $this->actingAsAdminComment();
        $course = $this->createCourse();
        //----- create comment
        $comment = Comment::create([
            'user_id' => auth()->user()->id,
            'comment_id' => null,  //comment because comment_id null
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
                ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
        ]);

        $this->patch(route('comments.accept', $comment->id), [
            'status' => Comment::STATUS_APPROVED,
        ])->assertOk();

        $this->patch(route('comments.reject', $comment->id), [
            'status' => Comment::STATUS_REJECTED,
        ])->assertOk();
    }

    public function test_user_can_not_change_status_comment()
    {
        $this->actingAsUser();
        $course = $this->createCourse();
        //----- create comment
        $comment = Comment::create([
            'user_id' => auth()->user()->id,
            'comment_id' => null,  //comment because comment_id null
            'commentable_id' => $course->id,
            'commentable_type' => get_class($course),
            'body' => $this->faker->text(250),
            'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
                ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
        ]);

        $this->patch(route('comments.accept', $comment->id), [
            'status' => Comment::STATUS_APPROVED,
        ])->assertStatus(403);

        $this->patch(route('comments.reject', $comment->id), [
            'status' => Comment::STATUS_REJECTED,
        ])->assertStatus(403);
    }

    //-------------------- User Create
    public function createUSer()
    {
        $this->actingAs(User::factory()->create());  //actingAs -> authentication + factory(User::class))->create() -> create user
    }

    private function actingAsSuperAdmin()
    {
        $this->createUSer();
        $this->seed(RolePermissionTableSeeder::class);  //create permission + role
        auth()->user()->givePermissionTo(Permission::PERMISSION_SUPER_ADMIN);
    }

    public function actingAsAdminComment()
    {
        $this->createUSer();
        $this->seed(RolePermissionTableSeeder::class);
        auth()->user()->givePermissionTo(Permission::PERMISSION_MANAGE_COMMENTS);
    }

    public function actingAsUser()
    {
        $this->createUSer();
        $this->seed(RolePermissionTableSeeder::class);  //create permission + role
    }

    private function createTicket()
    {
        return Comment::create([
            'user_id' => auth()->user()->id,
            'comment_id' => null,
            'commentable_id' => 1,
            'commentable_type' => 'Webamooz\Course\Models\Course',
            'body' => $this->faker->text(),
            'status' => auth()->user()->can(Permission::PERMISSION_MANAGE_COMMENTS) || auth()->user()->can(Permission::PERMISSION_TEACH)
                ? Comment::STATUS_APPROVED : Comment::STATUS_NEW,
        ]);
//      $this->post(route('tickets.store'), ['title' => $this->faker->title(), 'course' => $this->faker->numberBetween(1, 4), 'body' => $this->faker->unique()->text()]);
    }


    //---------- Create Category
    public function createCategory()
    {
        return Category::create(['title' => $this->faker->title, 'slug' => $this->faker->slug]);
    }

    //---------- Create Course
    public function createCourse()
    {
        $data = $this->courseData() + ['confirmation_status' => Course::CONFIRMATION_STATUS_PENDING,];
        unset($data['image']);
        return Course::create($data);
    }

    public function courseData()
    {
        $category = $this->createCategory();
        return [
            'teacher_id' => auth()->id(),
            'category_id' => $category->id,
            'title' => $this->faker->sentence(2),
            'slug' => $this->faker->sentence(2),
            'priority' => 5,
            'price' => 1000000,
            'percent' => 45,
            'type' => Course::TYPE_FREE,
            'status' => Course::STATUS_NOT_COMPLETED,
            "image" => UploadedFile::fake()->image('banner.jpg', 150, 200),  //send file in testing -> UploadedFile
//          "pdf" => UploadedFile::fake()->create('test.pdf' , 120 , 'pdf'),  //send other file(pdf,word,excel,powerPoint,video,music) in testing
            'body' => $this->faker->word,
        ];
    }

}










































//--------------------------------------------- Lesson 226 (Notifications intro and create CommentSubmittedNotification)
1) php artisan make:notification CommentSubmittedNotification  //بعد صدا زدن رویداد وصل میشه لیستنر ها و بعد به نوتیفیکیشن
2) php artisan make:event CommentSubmittedEvent  //وقتی رویدادی صدا بزنیم بعد ایجاد کامنت میاد به لیستنر ها وصل میشه
3) php artisan make:listener CommentSubmittedListener  //listener میاد بهیک رویداد گوش میده و برای ما یک عملیاتی انجام میده
4) Event -> رویداد برای این که بعد متود ساختن کامنت صداش بزنیم و وصلش کنیم به لیستنر ها که یک عملیاتی گوش بده و بعدش نوتیفیکشن ها تا چیزی نمایش بدن





//-------------------- app/Events/CommentSubmittedEvent.php
public function store(CommentRequest $request)
{
    //Webamooz\Course\Models\Course::findOrFail(1)
    //$commentable = $request->commentable_type::findOrFail($request->commentable_id);  //از طریق مادل گرفتیم دیتا دوره مد نظر
    $comment = $this->commentRepo->store($request->all());
    event(new CommentSubmittedEvent($comment));
    Generate::newFeedback("عملیات موفقیت آمیر", "دیدگاه شما با موفقیت ثبت شد");
    return back();
}





//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public Comment $comment;
public function __construct(Comment $comment)
{
    $this->comment = $comment;
}





//-------------------- modules/Webamooz/Comment/Listeners/CommentSubmittedListener.php   //Listener
public function __construct()
{
}

public function handle($event)
{
    //$event->comment->(relationCourse)->(relationUser)
    $event->comment->commentable->teacher->notify(new CommentSubmittedNotification($event->comment));
}





//-------------------- modules/Webamooz/Comment/Providers/EventServiceProvider.php
protected $listen = [
    CommentSubmittedEvent::class => [  //event
        CommentSubmittedListener::class  //listener
    ]
];





//-------------------- modules/Webamooz/Comment/Providers/CommentServiceProvider.php
public function register()
{
    $this->app->register(EventServiceProvider::class);  //add serviceProvider in app
}






//-------------------- app/Notifications/CommentSubmittedNotification.php
public $comment;
public function __construct(Comment $comment)
{
    $this->comment = $comment;
}

public function via($notifiable): array
{
    return ['mail'];
}

public function toMail($notifiable): MailMessage
{
    dd("email notification", $this->comment);
    return (new MailMessage)
        ->line('The introduction to the notification.')
        ->action('Notification Action', url('/'))
        ->line('Thank you for using our application!');
}































//-------------------------------------------------- Lesson 227 (Send mail notification for CommentSubmitted to teacher)
1) php artisan make:mail CommentSubmittedMail



//-------------------- modules/Webamooz/Comment/Notifications/CommentSubmittedNotification.php
public $comment;
public function __construct(Comment $comment)
{
    $this->comment = $comment;
}

public function via($notifiable): array
{
    return ['mail'];  //method -> to + Name
}

public function toMail($notifiable)  //$notifiable -> access user چون در لیستنر نوشتیم که این کامنت روابطش با دوره و روابط دوره با کاربر یا مدرس دوره گرفتیم
{
    return (new CommentSubmittedMail($this->comment))->to($notifiable->email);  //->to برای ارسال به ایمیل کاربر
}




//-------------------- modules/Webamooz/Comment/Mail/CommentSubmittedMail.php
public $comment;
public function __construct($comment)
{
    $this->comment = $comment;
}

public function envelope()
{
    return new Envelope(subject: 'وب آموز | پاسخ دیدیگاه',);
}

public function content()
{
    return new Content(markdown: 'Comments::mails.comment-submitted',);  //هر چی متغیر گلوبال باش درون ویو بهش دتسرسی دارم
}




//-------------------- modules/Webamooz/Comment/Resources/Views/mails/comment-submitted.blade.php
<x-mail::message>
# یک کامنت جدید برای دوره {{ $comment->commentable->title }} ارسال شده است
مدرس گرامی یک کامنت جدید برای دوره **{{ $comment->commentable->title }}** در سایت وب آموز ارسال شده است. لطفا در اسرع وقت پاسخ مناسب ارسال فرمایید

<x-mail::panel>
جهت رفتن به دوره روی لینک زیر کلیک کنید.
@component('mail::button' , ['url' => $comment->commentable->path()])
مشاهده دوره
@endcomponent
</x-mail::panel>

با تشکر از,<br>
{{ config('app.name') }}
</x-mail::message>



































//----------------------------------------------------------------------------- Lesson 228 (Send telegram notifications)
1) URL -> https://laravel-notification-channels.com/telegram/#contents
2) composer require laravel-notification-channels/telegram  //support laravel 11
3) https://api.telegram.org/bot7283119174:AAFW8o3ESBKwowmAZK1uCKk9AEONjI5e5gg/getupdates  //چک کنیم ربات فعال



//-------------------- config/services.php
'telegram-bot-api' => [
    'token' => env('TELEGRAM_BOT_TOKEN', 'YOUR BOT TOKEN HERE')
],




//-------------------- .env
TELEGRAM_BOT_TOKEN=7283119174:AAFW8o3ESBKwowmAZK1uCKk9AEONjI5e5gg




//-------------------- modules/Webamooz/Comment/Notifications/CommentSubmittedNotification.php
public function via($notifiable)
{
    return ['mail', 'telegram'];  //method -> to + Name
}

public function toTelegram($notifiable)
{
    if (!empty($notifiable->telegram)) {
        return TelegramMessage::create()
            ->to(966868056)
            ->content("یک دیدگاه جدید برای شما در وب آموز ارسال شده است")
            ->button('مشاهده دوره', $this->comment->commentable->path())
            ->button('مدیریت دیدگاه ها', route('comments.index'));
    }
}



































//-------------------------------------------------------------- Lesson 229 (Add telegram id filed to user profile page)
//-------------------- modules/Webamooz/Comment/Notifications/CommentSubmittedNotification.php
public Comment $comment;
public function __construct(Comment $comment)
{
    $this->comment = $comment;
}

public function via($notifiable)
{
    $channels = ['mail'];
    if (!is_null($notifiable->telegram)) $channels[] = 'telegram';  //اگر آیدی تلگرام داشت بریز درون آرایه چنل ها
    return $channels;
}

public function toMail($notifiable)  //$notifiable -> access user چون در لیستنر نوشتیم که این کامنت روابطش با دوره و روابط دوره با کاربر یا مدرس دوره گرفتیم
{
    return (new CommentSubmittedMail($this->comment))->to($notifiable->email);  //->to برای ارسال به ایمیل کاربر
}

public function toTelegram($notifiable)
{
    if (!empty($notifiable->telegram)) {
        return TelegramMessage::create()
            ->to($notifiable->telegram)  //user id telegram -> 966868056
            ->content("یک دیدگاه جدید برای شما در وب آموز ارسال شده است")
            ->button('مشاهده دوره', $this->comment->commentable->path())
            ->button('مدیریت دیدگاه ها', route('comments.index'));
    }
    return false;
}





























//-------------------------------------------------------------------- Lesson 230 (Bug fix - resend reset password mail)
1) ->middleware('throttle:5,30');  //middleware('throttle:(numberRequest چند بار درخواست میتونه بده),(minutes محاسبه درخواست ها در دقیقه)')



//-------------------- modules/Webamooz/User/Routes/user_routes.php
Route::get('/password/reset', [ForgotPasswordController::class, 'showVerifyCodeForm'])->name('password.request');  //show form + send email
Route::get('/password/reset/send', [ForgotPasswordController::class, 'sendVerifyCodeEmail'])
    ->name('password.sendVerifyCodeEmail')->middleware('throttle:5,30');  //middleware('throttle:(numberRequest چند بار درخواست میتونه بده),(minutes محاسبه درخواست ها در دقیقه)')




//-------------------- modules/Webamooz/User/Http/Controllers/Auth/ForgotPasswordController.php
public function showVerifyCodeForm()
{
    return view('User::Front.passwords.email');
}

public function sendVerifyCodeEmail(Request $request)
{
    $user = (new UserRepository())->getByEmail($request->email);
    VerifyCodeService::forgetCache($user->id);

    if ($user) {  //اگر ایمیل کاربر وجود داشت ایمیلش بیا ارسال کد براش بفرست
        $user->sendResetPasswordRequestNotification();  //send notification for verify code reset password
        return view('User::Front.passwords.enter-verify-code-form');

    }else {
        return back()->withErrors(['not_exit_email' => 'این ایمیل در دیتابیس وجود ندارد!']);
    }
}




//-------------------- modules/Webamooz/User/Resources/Views/Front/passwords/enter-verify-code-form.blade.php
<form action="{{ route('password.checkVerifyCode') }}" class="form" method="post">
    @csrf
    <a class="account-logo" href="{{ route('home') }}">
        <img src="/img/weblogo.png" alt="">
    </a>
    <input type="hidden" name="email" value="{{ request()->email }}">
    <div class="card-header">
        <p class="activation-code-title">کد فرستاده شده به ایمیل  <span>{{ request()->email }}</span> را وارد کنید</p>
    </div>
    <div class="form-content form-content1">
        <input name="verify_code" required class="activation-code-input" placeholder="فعال سازی">
        @error('verify_code')
        <span class="invalid-feedback" role="alert">
            <strong style="color: crimson">{{ $message }}</strong>
        </span>
        @enderror
        <br>
        <button class="btn i-t">تایید</button>

        <a href="{{ route('password.sendVerifyCodeEmail') }}?email={{ request()->email }}">ارسال مجدد کد فعال سازی</a>

        <div class="form-footer">
            <a href="{{ route('register') }}">صفحه ثبت نام</a>
        </div>
    </div>
</form>

































//----------------------------------------------------------------------------------- Lesson 231 (Send sms notification)
1) URL -> https://github.com/kavenegar/kavenegar-laravel-notification



//-------------------- config/app.php
'providers' => [
    ...
    Kavenegar\LaravelNotification\KavenegarServiceProvider::class,
],



//-------------------- config/services.php
'kavenegar' => [
    'key' => env('KAVENEGAR_API_KEY'),
    'sender' => env('KAVENEGAR_SENDER')
],



//-------------------- .env
KAVENEGAR_API_KEY=454A6F6C4E786743535A6C5830723534796B68416A537775756E6362687065417163326478635759666A453D
KAVENEGAR_SENDER=10008663




//-------------------- modules/Webamooz/User/Models/User.php
public function routeNotificationForSms()  //ارسال نوتیفیکیشن
{
    return $this->mobile;
}



//-------------------- modules/Webamooz/Comment/Mail/CommentSubmittedMail.php
public function via($notifiable)
{
    $channels = ['mail'];
    if (!is_null($notifiable->telegram)) $channels[] = 'telegram';  //اگر آیدی تلگرام داشت بریز درون آرایه چنل ها
    if(!is_null($notifiable->mobile)) $channels[] = KavenegarChannel::class;
    return $channels;
}

public function toSMS($notifiable)
{
    return "یک دیدگاه جدید برای دوره ی شما در وب آموز ارسال شده است. جهت مشاهده و ارسال پاسخ روی لینک زیر کلیک نمایید." . '\n' . route('comments.index');
}






























//-------------------------------------------------------------- Lesson 232 (Send notification to replied message owner)
//-------------------- modules/Webamooz/Comment/Listeners/CommentSubmittedListener.php
public function handle($event)  //اگر مدرس یا ادمین یا ی کاربر ناشناس پاسخ بده دیدیگاه کاربر نوتیفیکیشن برای صاحب دیدگاه
{
    //notification for comment owner -> پاسخ دیدگاه کاربر
    //$event->comment->comment->user);  $event->comment->comment -> بیا کامنتی که بای پاسخ گذاشته بگیر و کسی که صاحب اون دیدگاه بوده اطلاعاتش بده و بعدش آیدی صاحب دیدگاه
        //اگر اون کامنت پاسخ بود$ event->comment->comment_id + مدرس یا ادمین یا کاربر ناشناس سایت پاسخ داد نه باز صاحب دیدگاه پاسخ بده، حالا نوتیفیکیشن برای کسی که کامنت گذاشته بره
    if ($event->comment->comment_id && $event->comment->user_id != $event->comment->comment->user->id) {
        $event->comment->comment->user->notify(new CommentSubmittedNotification($event->comment));  //event->comment->comment صاحب دیدیگاه
    }
}


































//----------------------------------------------------------------- Lesson 233 (Comment approved-rejected notifications)
1) php artisan make:notification CommentApprovedNotification




//-------------------- modules/Webamooz/Comment/Http/Controllers/CommentController.php
public function reject($comment_id)
{
    $this->authorize('manage', Comment::class);
    $comment = $this->commentRepo->findById($comment_id);
    if ($this->commentRepo->updateStatus($comment_id, Comment::STATUS_REJECTED)) {
        CommentRejectedEvent::dispatch($comment);
        return AjaxResponses::successResponse('دیدگاه با موفقیت رد شد');
    }
    return AjaxResponses::failedResponse('دیدگاه با خطا مواجه شد');
}

public function accept($comment_id)
{
    $this->authorize('manage', Comment::class);
    $comment = $this->commentRepo->findById($comment_id);
    if ($this->commentRepo->updateStatus($comment_id, Comment::STATUS_APPROVED)) {
        CommentApprovedEvent::dispatch($comment);  //event(new CommentApprovedEvent($comment))
        return AjaxResponses::successResponse('دیدگاه با موفقییت تایید شد');
    }
    return AjaxResponses::failedResponse('دیدیگاه با خطا مواجه شد');
}






//-------------------- modules/Webamooz/Comment/Events/CommentApprovedEvent.php
public Comment $comment;
public function __construct(Comment $comment)
{
    $this->comment = $comment;
}





//-------------------- modules/Webamooz/Comment/Listeners/CommentApprovedListener.php
public function handle($event)  //با تایید دیدیگاه یا پاسخ یک نوتیفیکیشن برای مدرس میاد + یکی برای کاربری که دیدیگاه گذاشته
{
    //notification for teacher -> یک کامنت جدید(کاربر) + یک پاسخ به دیدگاه خودش(کاربر)
    if ($event->comment->user_id != $event->comment->commentable->teacher->id) {  //اگر کسی که کامنت گذاشته آیدی ش مخالف با مدرس دوره برای خود مدرس نوتیفیکیشن بره
        //$event->comment->(relationCourse)->(relationUser)
        $event->comment->commentable->teacher->notify(new CommentSubmittedNotification($event->comment));
    }

    //notification for comment owner -> تایید دیدیگاه
    //$event->comment->user -> رفتن نوتیفیکیشن به کابری که دیدیگاه گذاشته پس از تایید دیدیگاه
    $event->comment->user->notify(new CommentApprovedNotification($event->comment));  //event->comment->comment صاحب دیدیگاه
}






//-------------------- modules/Webamooz/Comment/Notifications/CommentApprovedNotification.php
public Comment $comment;
public function __construct(Comment $comment)
{
    $this->comment = $comment;
}

public function via($notifiable)
{
    $channels = ['mail'];
//  if (!is_null($notifiable->telegram)) $channels[] = TelegramChannel::class;  //اگر آیدی تلگرام داشت بریز درون آرایه چنل ها
    return $channels;
}

public function toMail($notifiable)
{
    return (new MailMessage)
        ->line("دیدیگاه شما تایید شد.")
        ->action('نوتیفیکیشن', url('/'))
        ->line('ممنون برای ارسال دیدگاه زیبایتان');
}


public function toTelegram($notifiable)
{
    if (!is_null($notifiable->telegram)) {
        return TelegramMessage::create()
            ->to($notifiable->telegram)  //user id telegram -> 966868056
            ->content("دیدیگاه شما تایید شد.")
            ->button('مشاهده دوره', $this->comment->commentable->path());
    }
    return false;
}






//-------------------- modules/Webamooz/Comment/Events/CommentRejectedEvent.php
public Comment $comment;
public function __construct(Comment $comment)
{
    $this->comment = $comment;
}





//-------------------- modules/Webamooz/Comment/Listeners/CommentRejectedListener.php
public function handle($event)  //با رد دیدیگاه برای کاربری که دیدیگاه گذاشته
{
    //notification for comment owner -> تایید دیدیگاه
    //$event->comment->user -> رفتن نوتیفیکیشن به کابری که دیدیگاه گذاشته پس از تایید دیدیگاه
    $event->comment->user->notify(new CommentRejectedNotification($event->comment));  //event->comment->comment صاحب دیدیگاه
}





//-------------------- modules/Webamooz/Comment/Notifications/CommentRejectedNotification.php
public Comment $comment;
public function __construct(Comment $comment)
{
    $this->comment = $comment;
}

public function via($notifiable)
{
    $channels = ['mail'];
//      if (!is_null($notifiable->telegram)) $channels[] = TelegramChannel::class;  //اگر آیدی تلگرام داشت بریز درون آرایه چنل ها
    return $channels;
}

public function toMail($notifiable)
{
    return (new MailMessage)
        ->line('The introduction to the notification.')
        ->action('Notification Action', url('/'))
        ->line('Thank you for using our application!');
}

public function toTelegram($notifiable)
{
    if (!is_null($notifiable->telegram)) {
        return TelegramMessage::create()
            ->to($notifiable->telegram)  //user id telegram -> 966868056
            ->content("دیدیگاه شما رد شد.")
            ->button('مشاهده دوره', $this->comment->commentable->path());
    }
    return false;
}





//-------------------- modules/Webamooz/Comment/Providers/EventServiceProvider.php
protected $listen = [
    CommentSubmittedEvent::class => [  //event -> ارسال دیدیگاه
        CommentSubmittedListener::class,  //listener
    ],

    CommentApprovedEvent::class => [
        CommentApprovedListener::class
    ]
];
































//----------------------------------------------------------------------------- Lesson 234 (Show notifications in panel)
1) php artisan notifications:table    //Create a migration for the notifications table




//-------------------- database/migrations/2024_09_04_083545_create_notifications_table.php  //ما فقط ستون دیتا پر میکنیم
Schema::create('notifications', function (Blueprint $table) {
    $table->uuid('id')->primary();            //id -> f4b201a5-ffde-40d8-a543-46300916c7c1
    $table->string('type');                   //Webamooz\Comment\Notifications\CommentApprovedNotification
    $table->morphs('notifiable');              //notifiable_type -> Webamooz\User\Models\User + notifiable_id -> 2
    $table->text('data');                      //json -> Notification Method -> toArray هر چی ریترن کنیم درون این ذخیره میکنه
    $table->timestamp('read_at')->nullable();  //وانده شدن یا دیده شده
    $table->timestamps();
});




//-------------------- modules/Webamooz/Comment/Notifications/CommentApprovedNotification.php
public function via($notifiable)
{
    $channels = ['mail'];
    $channels[] = 'database';  //بدونه باید درون دیتابیس ذخیره بشه +  متود toArray
//      if (!is_null($notifiable->telegram)) $channels[] = TelegramChannel::class;  //اگر آیدی تلگرام داشت بریز درون آرایه چنل ها
    return $channels;
}

public function toArray($notifiable)  //save to database -> in column data(json) همه موارد درون ریترن در ستون دیتا که آبجکت ذخیره و بقیه موارد پر میشن
{
    return [
        "message" => "دیدیگاه شما تایید شد",
        "url" => $this->comment->commentable->path(),
    ];
}




//-------------------- modules/Webamooz/Comment/Notifications/CommentRejectedNotification.php
public function via($notifiable)
{
    $channels = ['mail'];
    $channels[] = 'database';  //بدونه باید درون دیتابیس ذخیره بشه +  متود toArray
//  if (!is_null($notifiable->telegram)) $channels[] = TelegramChannel::class;  //اگر آیدی تلگرام داشت بریز درون آرایه چنل ها
    return $channels;
}

public function toArray($notifiable)  //save to database -> in column data(json) همه موارد درون ریترن در ستون دیتا که آبجکت ذخیره و بقیه موارد پر میشن
{
    return [
        "message" => "دیدیگاه شما رد شد",
        "url" => $this->comment->commentable->path(),
    ];
}




//-------------------- modules/Webamooz/Comment/Notifications/CommentSubmittedNotification.php
public function via($notifiable)
{
    $channels = ['mail'];
    $channels[] = 'database';  //بدونه باید درون دیتابیس ذخیره بشه +  متود toArray
//  if (!is_null($notifiable->telegram)) $channels[] = TelegramChannel::class;  //اگر آیدی تلگرام داشت بریز درون آرایه چنل ها
//  if (!is_null($notifiable->mobile)) $channels[] = KavenegarChannel::class;
    return $channels;
}

public function toArray($notifiable)  //save to database -> in column data(json) همه موارد درون ریترن در ستون دیتا که آبجکت ذخیره و بقیه موارد پر میشن
{
    return [
        "message" => "دیدگاه جدید برای دوره شما ثبت شده است",
        "url" => route('comments.index'),
    ];
}




//-------------------- modules/Webamooz/Common/Providers/CommonServiceProvider.php
public function boot()
{
//  return __DIR__ . "/../helpers.php";  //better use composer.json inside module common
    view()->composer('Dashboard::layouts.header', function ($view) {  //روی صفحه ای خاص اطلاعات میفرستیم
        $notifications = auth()->user()->unreadNotifications;  //unreadNotifications -> میره اونایی که ستون read_at خالی میاره
        return $view->with(compact('notifications'));  //$view->with -> برو تو این صفحه و همراه خودت ببر این متغیر
    });
}




//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/header.blade.php
<div class="content__notification">
    <ul class="notification">
        @forelse ($notifications as $notification)
        <li>
            <a href="{{ $notification->data['url'] }}">
                <span class="font-size-13">{{ $notification->data['message'] }}</span>
            </a>
        </li>
        @empty
        <span class="font-size-13 text-danger_custom">موردی برای نمایش وجود ندارد</span>
        @endforelse
    </ul>
</div>





























//-------------------------------------------------------------------------- Lesson 235 (Mark all notifications as read)
1) auth()->user()->unreadNotifications;  //unreadNotifications -> نال میاره read_at میره اونایی که ستون
2) auth()->user()->readNotifications;    تایم خورده read_at اونایی که ستون




//-------------------- modules/Webamooz/Common/Providers/CommonServiceProvider.php
private $namespace = "Webamooz\Common\Http\Controllers";

public function register()
{
    Route::middleware(['web'])->namespace($this->namespace)->group(__DIR__ . '/../Routes/common_routes.php');
//  $this->loadRoutesFrom(__DIR__ .'/../Routes/common_routes.php');
    $this->loadViewsFrom(__DIR__ . "/../Resources/Views/", 'Common');
}

public function boot()
{
        //return __DIR__ . "/../helpers.php";  //better use composer.json inside module common
    view()->composer('Dashboard::layouts.header', function ($view) {  //روی صفحه ای خاص اطلاعات میفرستیم
        //readNotifications -> تایم خورده read_at اونایی که ستون
        $notifications = auth()->user()->unreadNotifications;  //unreadNotifications -> میره اونایی که ستون read_at خالی میاره
        return $view->with(compact('notifications'));  //$view->with -> برو تو این صفحه و همراه خودت ببر این متغیر
    });
}





//-------------------- modules/Webamooz/Common/Http/Controllers/NotificationController.php
public function markAllAsRead()
{
//  auth()->user()->unreadNotifications()->update(['read_at' => now()]);
    auth()->user()->unreadNotifications->markAsRead();  //marjAsRead -> column(read_at) = now()
    Generate::newFeedback('موفقیت آمیر', 'همه دیدگاه های شما با موفقیت خوانده شد');
    return back();
}




//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/header.blade.php
<div class="content__notification">
    <ul class="notification">
        @forelse ($notifications as $notification)
        <li>
            <a href="{{ $notification->data['url'] }}">
                <span class="font-size-13">{{ $notification->data['message'] }}</span>
            </a>
        </li>
        @empty
        <span class="font-size-13 text-danger_custom">موردی برای نمایش وجود ندارد</span>
        @endforelse
    </ul>
        <a href="{{ route('notifications.markAllRead') }}" class="text-info font-size-12">علامت زدن همه به عنوان خوانده شده</a>
</div>





//-------------------- modules/Webamooz/Common/Routes/common_routes.php
Route::group(['middleware' => ['auth']], function ($router) {
    $router->get('notifications/mark-all-as-read', [NotificationController::class, 'markAllAsRead'])->name('notifications.markAllRead');
});





























//-------------------------------------------------------------------------------------- Lesson 236 (Notifications menu)
//-------------------- modules/Webamooz/Dashboard/Resources/Views/layouts/header.blade.php
<div class="notification margin-15">
    @if(count($notifications))  <!-- $notifications -> مقدار از سرویس پروایدر گرفتیم تمام نوتیفیکشن های خوانده نشده -->
        <span class="notify_dot_active"></span>
    @endif
    <a class="notification__icon @if(count(auth()->user()->unreadNotifications)) notify_active @endif"></a>
    <div class="dropdown__notification">
        <div class="content__notification">
            <ul class="notification">
                @forelse ($notifications as $notification)
                <li>
                    <a href="{{ $notification->data['url'] }}">
                        <span class="font-size-13">{{ $notification->data['message'] }}</span>
                    </a>
                </li>
                @empty
                <span class="font-size-13 text-danger_custom">موردی برای نمایش وجود ندارد</span>
                @endforelse
            </ul>
            @if(count(auth()->user()->unreadNotifications))
                <a href="{{ route('notifications.markAllRead') }}" class="btn btn-webamooz_net mt-4 font-size-10">علامت زدن همه به عنوان خوانده شده</a>
            @endif
        </div>
    </div>
</div>



























//-------------------------------------------------------------------------------------- Lesson 237 (Init slider module)
1) c:\laragon_5.4\bin\php\php-7.4\php.exe  C:\composer\bin\composer.phar dump-autoload  //وقتی نسخه پی اچ پی به کامپوزر نمیخوره
2) php artisan make:migration create_slides_table --create
3) php artisan db:seed --class=Webamooz\RolePermissions\Database\Seeders\RolePermissionTableSeeder



//-------------------- composer.json
"autoload": {
    "psr-4": {
        "App\\": "app/",
        "Webamooz\\Slider\\": "modules/Webamooz/Slider/",
    }
},




//-------------------- config/app.php
\Webamooz\Slider\Providers\SliderServiceProvider::class,




//-------------------- modules/Webamooz/Slider/Providers/SliderServiceProvider.php
private $namespace = "Webamooz\Slider\Http\Controllers";

public function register()
{
    Route::middleware(['web'])->namespace($this->namespace)->group(__DIR__ . '/../Routes/slider_routes.php');
    $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations/');
    $this->loadViewsFrom(__DIR__ . '/../Resources/Views/', 'Slides');
}

public function boot()
{
    config()->set('sidebar.items.sliders', [
        "icon" => "i-slide",
        "title" => "اسلایدر",
        "url" => route('slides.index'),
        "permission" => Permission::PERMISSION_MANAGE_SLIDES
    ]);
}




//-------------------- modules/Webamooz/Slider/Routes/slider_routes.php
Route::group(['middleware' => ['auth']], function ($router) {
    $router->resource('/slides', SlideController::class);
});




//-------------------- modules/Webamooz/RolePermissions/Model/Permission.php
const PERMISSION_MANAGE_SLIDES = 'manage slides';
public static array $permissions = [  //نمایش لیست بعد سیدر در ویو
    self::PERMISSION_MANAGE_SLIDES,
];




//-------------------- modules/Webamooz/Slider/Database/Migrations/2024_09_04_191810_create_slides.php
Schema::create('slides', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained()->cascadeOnDelete();
    $table->foreignId('media_id')->nullable()->references('id')->on('media')->nullOnDelete();  //nullOnDelete -> set null
    $table->float('priority')->nullable();
    $table->string('link')->nullable();
    $table->boolean('status')->default(true);
    $table->timestamps();
});





//-------------------- modules/Webamooz/Slider/Models/Slide.php
/*
const STATUS_ENABLE = 'enable';
const STATUS_DISABLE = 'disable';
public static array $statuses = [
    self::STATUS_ENABLE,
    self::STATUS_DISABLE
];
*/

protected $fillable = [
    'user_id',
    'media_id',
    'priority',
    'link',
    'status',
];

public function user()
{
    return $this->belongsTo(User::class);
}

public function media()
{
    return $this->belongsTo(Media::class);
}
































//---------------------------------------------------------------------------------- Lesson 238 (Slider module - part 1)
1) php artisan make:request SlideRequest






//-------------------- modules/Webamooz/Slider/Http/Controllers/SlideController.php
public SlideRepositories $slideRepo;
public function __construct(SlideRepositories $slideRepo)
{
    $this->slideRepo = $slideRepo;
}

public function index()
{
    $this->authorize('manage', Slide::class);
    $slides = $this->slideRepo->paginate(12);
    return view('Slides::index', ['slides' => $slides]);
}

public function store(SlideRequest $request)
{
    $this->authorize('manage', Slide::class);
    if ($request->has('image')) {
        $media_id = MediaFileService::publicUpload($request->file('image'))->id;
    }
    $this->slideRepo->store($request,$media_id);
    Generate::newFeedback('موفقیت آمیر', 'عملیاد ایجاد اسلاید با موفقیت انجام شد');
    return to_route('slides.index');
}






//-------------------- modules/Webamooz/Slider/Database/Repositories/SlideRepositories.php
public function paginate($count = 10)
{
    return Slide::query()->orderBy('priority','asc')->paginate($count);
}

public function findById($slide_id)
{
    return Slide::query()->findOrFail($slide_id);
}

public function store($values, $media_id)
{
    return Slide::create([
        'user_id' => auth()->id(),
        'media_id' => $media_id,
        'priority' => $values->priority,
        'link' => $values->link,
    ]);
}





//-------------------- modules/Webamooz/Slider/Policies/SlidePolicy.php
public function manage($user)
{
    if ($user->hasPermissionTo(Permission::PERMISSION_MANAGE_SLIDES)) return true;
    return null;
}




//-------------------- modules/Webamooz/Slider/Resources/Views/index.blade.php
@extends('Dashboard::master')

@section('title' , 'لیست اسلاید ها')
@section('breadcrumb')
<li><a href="#" title="اسلاید ها">اسلاید ها</a></li>
@endsection

@section('content')

<div class="row no-gutters">
    <div class="col-8 margin-left-10 margin-bottom-15 border-radius-3">
        <p class="box__title">اسلاید ها</p>
        <div class="table__box">
            <table class="table">
                <thead role="rowgroup">
                <tr role="row" class="title-row">
                    <th>شناسه</th>
                    <th>کاربر</th>
                    <th>تصویر</th>
                    <th>الویت</th>
                    <th>لینک</th>
                    <th>وضعیت نمایش</th>
                    <th>عملیات</th>
                </tr>
                </thead>
                <tbody>
                @foreach ($slides as $index => $slide)
                <tr role="row" class="">
                    <td>{{ $slides->firstItem() + $index }}</td>
                    <td><a href="">{{ $slide->user->name }}</a></td>
                    <td><img src="{{ $slide->media->thumb }}" alt="" width="80"></td>
                    <td>{{ $slide->priority }}</td>
                    <td>{{ $slide->link }}</td>
                    <td>@lang($slide->status)</td>
                    <td>
                        <a href="" class="item-delete mlg-15 btn_red_customize" title="حذف" onclick=""></a>
                        <a href="" class="item-eye mlg-15 btn_warning_customize" title="مشاهده"></a>
                        <a href="{{ route('slides.edit' , $slide->id) }}" class="item-edit btn_info_customize" title="ویرایش"></a>
                    </td>
                </tr>
                @endforeach
                </tbody>
            </table>
            {{ $slides->links() }}
        </div>
    </div>

    <div class="col-4 bg-white">
        @includeIf('Slides::create')
    </div>
</div>
@endsection






//-------------------- modules/Webamooz/Slider/Resources/Views/create.blade.php
<p class="box__title">ایجاد اسلاید جدید</p>

@if (session()->has('message'))
    <p class="text-success alert alert-success">{{ session()->get('message') }}</p>
@endif

<form action="{{ route('slides.store') }}" method="POST" class="padding-30" enctype="multipart/form-data">
    @csrf
    <x-input type="file" name="image" placeholder="تصویر" class="text" required />
    <x-input type="text" name="priority" placeholder="الویت بندی" class="text" />
    <x-input type="text" name="link" placeholder="لینک" class="text" />
    <p class="box__title margin-bottom-15 mt-5">وضعیت نمایش</p>
    <x-select name="status">
        <option value="1" selected>فعال</option>
        <option value="0">غیر فعال</option>
    </x-select>

    <button type="submit" class="btn btn-webamooz_net mt-5">اضافه کردن</button>
</form>





//-------------------- modules/Webamooz/Slider/Http/Requests/SlideRequest.php
public function rules()
{
    return [
        'image' => 'required|file|mimes:' . MediaFileService::getExtensions(),
        'priority' => 'nullable|numeric|min:1',
        'link' => 'nullable|string|max:255',
        'status' => 'required|boolean',
    ];
}

public function attributes()
{
    return [
        'media_id' => 'تصویر',
        'priority' => 'الویت بندی',
        'link' => 'لینک',
        'status' => 'وضعیت',
    ];
}































//------------------------------------------------------------------------------------- Lesson 239 (Slide module part 2)
//-------------------- modules/Webamooz/Slider/Http/Controllers/SlideController.php
public function edit(Slide $slide)
{
    $this->authorize('manage', Slide::class);
    return view('Slides::edit', compact('slide'));
}

public function update(SlideRequest $request, $slide_id)
{
    $this->authorize('manage', Slide::class);
    $slide = $this->slideRepo->findById($slide_id);
    if ($request->has('image')) {
        $media_id = MediaFileService::publicUpload($request->file('image'))->id;
        if ($slide->media) {
            $slide->media->delete();
        }
    } else {
        $media_id = $slide->media_id;
    }
    $this->slideRepo->update($request, $slide_id, $media_id);
    Generate::newFeedback('موفقیت آمیر', 'عملیات ویرایش اسلاید با موفقیت انجام شد');
    return to_route('slides.index');
}

public function destroy(Slide $slide)
{
    $this->authorize('manage', Slide::class);
    if ($slide->media) {
        $slide->media()->delete();
    }
    $slide->delete();
    return AjaxResponses::successResponse('اسلاید با موفقیت حذف شد');
}





//-------------------- modules/Webamooz/Slider/Database/Repositories/SlideRepositories.php
public function update($values, $slide_id, $media_id)
{
    return Slide::where('id', $slide_id)->update([
        'media_id' => $media_id,
        'priority' => $values->priority,
        'link' => $values->link,
        'status' => $values->status,
    ]);
}




//-------------------- modules/Webamooz/Slider/Resources/Views/edit.blade.php
@extends('Dashboard::master')

@section('title' , 'ویرایش اسلاید')
@section('breadcrumb')
    <li><a href="{{ route('slides.index') }}" title="اسلاید ها">اسلاید ها</a></li>
    <li><a href="#" title="ویرایش اسلاید">ویرایش اسلاید</a></li>
@endsection

@section('content')
    <div class="row no-gutters bg-white">
        <div class="col-12">
            <p class="box__title">ویرایش اسلاید</p>

            <form action="{{ route('slides.update' , $slide->id) }}" method="post" class="padding-30" enctype="multipart/form-data">
                @csrf
                @method('PATCH')
                <img src="{{ $slide->media->thumb }}" alt="" width="80">
                <x-input type="file" name="image" placeholder="تصویر" class="text" />
                <x-input type="text" name="priority" placeholder="الویت بندی" class="text" value="{{ $slide->priority }}" />
                <x-input type="text" name="link" placeholder="لینک" class="text" value="{{ $slide->link }}" />
                <p class="box__title margin-bottom-15 mt-5">وضعیت نمایش</p>
                <x-select name="status">
                    <option value="1" @if($slide->status == 1) selected @endif>فعال</option>
                    <option value="0" @if($slide->status == 0) selected @endif>غیر فعال</option>
                </x-select>

                <button type="submit" class="btn btn-webamooz_net mt-4">به روزرسانی</button>

            </form>
        </div>
    </div>

@endsection

@section('js')
    <script src="{{ asset('panel/js/tagsInput.js') }}"></script>
@endsection





//-------------------- modules/Webamooz/Slider/Http/Requests/SlideRequest.php
public function rules()
{
    $rules = [
        'image' => 'required|file|mimes:' . MediaFileService::getExtensions(),
        'priority' => 'nullable|numeric|min:1',
        'link' => 'nullable|string|max:255',
        'status' => 'required|boolean',
    ];

    if (request()->method() == 'PATCH') {  //request()->getMethod()
        $rules['image'] = ['nullable', 'file', 'image', 'mimes:' . MediaFileService::getExtensions()];
    }
    return $rules;
}





































//------------------------------------------------------------------------------------ Lesson 240 (Slide module - front)
1)
2)
3)


//--------------------


//--------------------


//--------------------


//--------------------












































































































TODO -> ResetPasswordTest -> test_user_can_see_enter_verify_code_form_by_correct_email() //check vpn on + send email in mailtrap
/------------------------------------------------------------------------------------------------------------- IMPORTANT
1) php artisan migrate:fresh               //table current -> all delete
2) <link rel="stylesheet" href="/css/style.css?v={{ uniqid() }}">  // اسلش قبل شروع برای خواندن صفحه استایل ها در صفحات دیگر به جز صفحه اصلی
{{-- ?v={{ uniqid() }} ورژن = هر سری تغییر کنه تا کش نکنه مرورگر --}}
3) php artisan make:rule ValidMobile
 //ساخت رول برای کنترل ولیدیشن ها و حالت آبجکتی با نیو صدا میزنیم در ولیدیشن و درون رول میسازیم در (پسس) و مسیج برای نمایش متنن ها
4) php artisan make:rule ValidPassword
5) app/lang/fa.json                                                            //email send persian
6) Use Pagination -> $payments->links() === $payments->render()


7) php artisan make:notification CommentSubmitted  //بعد صدا زدن رویداد وصل میشه لیستنر ها و بعد به نوتیفیکیشن
8) php artisan make:event CommentSubmittedEvent  //وقتی رویدادی صدا بزنیم بعد ایجاد کامنت میاد به لیستنر ها وصل میشه
9) php artisan make:listener SendCommentSubmittedNotification  //listener میاد بهیک رویداد گوش میده و برای ما یک عملیاتی انجام میده
10) Event -> رویداد برای این که بعد متود ساختن کامنت صداش بزنیم و وصلش کنیم به لیستنر ها که یک عملیاتی گوش بده و بعدش نوتیفیکشن ها تا چیزی نمایش بدن










//------------------------------------------------------------ GIT -> create a new repository
…or create a new repository on the command line
echo "# laravel_module" >> README.md
git init
git add . A -a all
git commit -m "first commit"
git branch -M main  //or -> git branch -M master
git remote add origin https://github.com/mahdi99k/laravel_module.git
git push -u origin main  //or -> git push -u origin master




//------------------------------------------------------------ GIT tag -> Episode
git status
git add .
git status
git push origin main  //or -> git push origin master
git tag
git tag -a v0.1.2 -m "Episode 1"
git push orogin v0.1.2




//------------------------------------------------------------ Blade custom -> Blade auth laravel -> change تغییرات اعمال میکنیم
{{--
autocomplete="name" -> نمایش اطلاعات ثبت شده ما و کمک به نمایش آن ها + ادامه متن های ما مثل سرچ های گوگل  +
autocomplete="new-password" -> خود مرورگر خودکار یک پسوورد پیشنهاد بدهد
autofocus -> input,select,textarea,button اشاره گر متن نوشتن به صورت خودکار درون اینپوت و تکست آریاو سلکت و دکمه فقط برای
{{ old('name') }} -> اگر متنی نوشتیم به خطایی برخوردیم برامون نگه داره متن قدیمی
class="txt @error('name') is-invalid @enderror" -> is-invalid اگر خطایی برای اسم اینپوت وجود داشت اضافه بکن کلاس
--}}

<input type="text" class="txt @error('name') is-invalid @enderror" placeholder="نام و نام خانوادگی"
       name="name" value="{{ old('name') }}" required autocomplete="name" autofocus>
@error('name')
<span class="invalid-feedback" role="alert">
        <strong>{{ $message }}</strong>
    </span>
@enderror










//-------------------- Override LofinController(auth) TO AuthenticatesUsers(credentials) درونش هست و ما درون این نمینویسیم اورراید میکنیم
//---------- app/Http/Controllers/Auth/LoginController.php
    use AuthenticatesUsers;

    protected $redirectTo = RouteServiceProvider::HOME;

    public function __construct()
    {
        $this->middleware('guest')->except('logout');
    }

    /*public function showLoginForm()  //override -> که درون اون فانکشن تغییر ندادم و همینجا از روش اور راید AuthenticatesUsers از درون ترید
    {
        return 'salam';
    }*/

    public function credentials(Request $request)
    {
        $username = $request->get($this->username());   //به صورت override اضافه میکنیم نه در ترید AuthenticatesUsers اصلی پروژه
        $field = filter_var($username, FILTER_VALIDATE_EMAIL) ? 'email' : 'mobile';  //1)value(property)  2)filter(for value)
        return [
            $field => $username,
            'password' => $request->get('password')
        ];
    }









//------------------------------------------------------------ Learn Regex
.         ->    any character except newline    //(newline خط جدید) هر کاراکتری به جز اینتر
\w\d\s    ->    word, digit, whitespace        //w=کلمه و اعداد و _ (آندرلاین) به جز(!@#$%^&*)(_+=-)    d=اعداد    s=فضای خالی
\W\D\S    ->    not word, digit, whitespace    //W,D,S=اگر حروف بزرگ باشن یعنی هر چیزی به جز خود کلمه یا اعداد یا فضای خالی
[abc]     ->    any of a, b, or c              //[range = هر چی درونش حساب کن]
[^abc]    ->    not a, b, or c                 //[range = هر چی به جز چیزایی که درونش حساب کن]
[a-g]     ->    character between a & g        //[range = هر چی هست حساب کن a-g بین حروف کوچک]
^abc$     ->    start / end of the string      // ^=شروع استرینگ ریجکس    $=finish string پایان نوشته استرینگ
a{5}a{2,} ->    exactly five, two or more      //{عدد پنج}    {شروع از دو تا بی نهایت}
a{1,3}    ->    between one & three            //{بین اعداد یک تا سه}
*** regex mobile without 0 -> ^9[0-9]{9}       //شروع از عدد نه و بین اعداد صفر تا نه و جمع اعداد بعدش تا نه تا بیشتر نباشد
'mobile' => ['nullable', 'numeric', 'min:9', 'max:14', 'unique:users', 'regex:^9[0-9]{9}'],














//------------------------------------------------------------ Rule (validation)
1) url -> https://regexr.com/
2) url -> https://ihateregex.io/expr/password
3) php artisan make:rule ValidMobile
4) php artisan make:rule ValidPassword


//-------------------- Learn Regex
.         ->    any character except newline    //(newline خط جدید) هر کاراکتری به جز اینتر
\w\d\s    ->    word, digit, whitespace        //w=کلمه و اعداد و _ (آندرلاین) به جز(!@#$%^&*)(_+=-)    d=اعداد    s=فضای خالی
\W\D\S    ->    not word, digit, whitespace    //W,D,S=اگر حروف بزرگ باشن یعنی هر چیزی به جز خود کلمه یا اعداد یا فضای خالی
[abc]     ->    any of a, b, or c              //[range = هر چی درونش حساب کن]
[^abc]    ->    not a, b, or c                 //[range = هر چی به جز چیزایی که درونش حساب کن]
[a-g]     ->    character between a & g        //[range = هر چی هست حساب کن a-g بین حروف کوچک]
^abc$     ->    start / end of the string      // ^=شروع استرینگ ریجکس    $=finish string پایان نوشته استرینگ
a{5}a{2,} ->    exactly five, two or more      //{عدد پنج}    {شروع از دو تا بی نهایت}
a{1,3}    ->    between one & three            //{بین اعداد یک تا سه}
*** regex mobile without 0 -> ^9[0-9]{9}       //شروع از عدد نه و بین اعداد صفر تا نه و جمع اعداد بعدش تا نه تا بیشتر نباشد

'mobile' => ['nullable', 'numeric', 'min:9', 'max:14', 'unique:users', 'regex:^9[0-9]{9}'],
//regex password = ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$   //حروف بزرگ و کوچک و اعداد و کاراکتروحتما 8 تا به بالا



//-------------------- Http/Controllers/Auth/RegisterController.php
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'mobile' => ['nullable', 'string', 'min:9', 'max:14', 'unique:users', 'regex:/^9[0-9]{9}/'], //regex:/^[a-zA-Z0-9@$#^%&*!]+$/u
            'password' => ['required', 'string', 'min:6', 'confirmed', 'regex:/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{6,}$/'],
            //regex password = ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$   //حروف بزرگ و کوچک و اعداد و کاراکتروحتما 8 تا به بالا
        ]);
    }


//-------------------- app/Rules/ValidMobile.php
class ValidMobile implements Rule
{

    public function __construct()
    {
        //
    }


    public function passes($attribute, $value): bool|int
    {
        return preg_match('/^9[0-9]{9}/' , $value);  //1)regex  2)value(Validation name:'mobile' => ['nullable',max:255])
    }


    public function message(): string
    {
        return 'فرمت موبایل نامعتبر است.شماره موبایل باید با عدد 9 شروع شود و بدون فاصله وارد شود.';
    }
}


//-------------------- app/Rules/ValidPassword.php
class ValidPassword implements Rule
{

    public function __construct()
    {
        //
    }


    public function passes($attribute, $value): bool|int
    {
        return preg_match('/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{6,}$/' , $value);
        //1)regex  2)value(Validation name:'mobile' => ['nullable',max:255])
    }

    public function message(): string
    {
        return 'فرمت پسوورد اشتباه است.';
    }
}














//------------------------------------------------------------ Modules(packages) create in root project
1) modules/Webamooz(capital+namespace)/User(capital+single)   //namespace(اسم شخص یا اشخاص به صورت هم تیمی)
2) app/composer.json                                          //"autoload": { "psr-4": {

//-------------------- app/composer.json
"autoload": {
    "psr-4": {
        "App\\": "app/",
        "Webamooz\\User\\" : "modules/Webamooz/User/",
        "Database\\Factories\\": "database/factories/",
        "Database\\Seeders\\": "database/seeders/"
    }
},

//--------------------
ً"Webamooz\\User\\" نیم اسپیس بدون اسم ماژول (بک اسلش دو تا لینوکسی)  +  "modules/Webamooz/User/" مسیر پوشه ها با اسم ماژول (اسلش)


//--------------------
1) User/Providers/UserServiceProvider.php  //برای شناختنش به لاراول نیاز سرویس پروایدر بسازیم و در کانفیگ و اپ اضافه کنیم سرویس پروادر
2) config/app.php                          //insert servicePorvider
3) composer dump-autoload                  //next change in config


//-------------------- modules/Webamooz/User/Providers/UserServiceProvider.php
namespace Webamooz\User\Providers;

use Illuminate\Support\ServiceProvider;

class UserServiceProvider extends ServiceProvider
{
    public function boot()
    {

    }
}


//-------------------- config/app.php
Illuminate\View\ViewServiceProvider::class,
//-------------------- Custom
\Webamooz\User\Providers\UserServiceProvider::class,
















//------------------------------------------------------------ Request check befor logged
public function authorize()
{
    return auth()->check() == true; //اگر کسی لاگین کرده میتونه دسترسی داشته باش وگرنه نمیتونه کاری بکنه + وگرنه فالس
}

public function rules()
{
    return [
        'password' => ['required', 'confirmed', new ValidPassword()],
    ];
}












//------------------------------------------------------------ Testing
public function createUser()
{
    $user = User::create([
        'name' => 'mahdi',
        'email' => $this->faker->unique()->safeEmail(),
        'mobile' => '939818' . rand(1000, 9999),
        'email_verified_at' => now(),
        'password' => \Hash::make('12aBC!@'),
        'remember_token' => Str::random(10),
    ]);
    $this->actingAs($user);  //actingAs -> authentication + factory(User::class))->create() -> create user
    $this->seed(RolePermissionTableSeeder::class);
}


"image" => UploadedFile::fake()->image('banner.jpg', 150, 200),   //send file in testing -> UploadedFile

"pdf" => UploadedFile::fake()->create('test.pdf' , 120 , 'pdf'),  //send other file(pdf,word,excel,powerPoint,video,music) in testing







//------------------------------------------------------------




//------------------------------------------------------------




//------------------------------------------------------------



//------------------------------------------------------------







